#include "ppc_recomp_shared.h"

__attribute__((alias("__imp__sub_826A00C8"))) PPC_WEAK_FUNC(sub_826A00C8);
PPC_FUNC_IMPL(__imp__sub_826A00C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A00D0;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r27,r11,4272
	ctx.r27.s64 = ctx.r11.s64 + 4272;
	// li r29,0
	ctx.r29.s64 = 0;
	// stb r10,0(r28)
	PPC_STORE_U8(ctx.r28.u32 + 0, ctx.r10.u8);
	// mr r30,r27
	ctx.r30.u64 = ctx.r27.u64;
loc_826A00F0:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// li r31,0
	ctx.r31.s64 = 0;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x826a0134
	if (!ctx.cr6.gt) goto loc_826A0134;
loc_826A0100:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82392520
	ctx.lr = 0x826A010C;
	sub_82392520(ctx, base);
	// rlwinm r11,r3,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r28
	ctx.r11.u64 = ctx.r11.u64 + ctx.r28.u64;
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// bl 0x8236e2e8
	ctx.lr = 0x826A0124;
	sub_8236E2E8(ctx, base);
	// lwz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r10
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x826a0100
	if (ctx.cr6.lt) goto loc_826A0100;
loc_826A0134:
	// addi r30,r30,4
	ctx.r30.s64 = ctx.r30.s64 + 4;
	// addi r11,r27,20
	ctx.r11.s64 = ctx.r27.s64 + 20;
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x826a00f0
	if (ctx.cr6.lt) goto loc_826A00F0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A0154"))) PPC_WEAK_FUNC(sub_826A0154);
PPC_FUNC_IMPL(__imp__sub_826A0154) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A0158"))) PPC_WEAK_FUNC(sub_826A0158);
PPC_FUNC_IMPL(__imp__sub_826A0158) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d0
	ctx.lr = 0x826A0160;
	__savegprlr_18(ctx, base);
	// stfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -128, ctx.f31.u64);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x824e0648
	ctx.lr = 0x826A0170;
	sub_824E0648(ctx, base);
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32125
	ctx.r9.s64 = -2105344000;
	// lis r8,-32125
	ctx.r8.s64 = -2105344000;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// addi r25,r11,-25696
	ctx.r25.s64 = ctx.r11.s64 + -25696;
	// lis r5,-32125
	ctx.r5.s64 = -2105344000;
	// addi r4,r10,-21856
	ctx.r4.s64 = ctx.r10.s64 + -21856;
	// stw r25,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r25.u32);
	// addi r3,r9,-28824
	ctx.r3.s64 = ctx.r9.s64 + -28824;
	// addi r11,r8,-29204
	ctx.r11.s64 = ctx.r8.s64 + -29204;
	// stw r4,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r4.u32);
	// addi r10,r7,-27684
	ctx.r10.s64 = ctx.r7.s64 + -27684;
	// stw r3,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r3.u32);
	// addi r9,r6,-27696
	ctx.r9.s64 = ctx.r6.s64 + -27696;
	// stw r11,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r11.u32);
	// addi r27,r31,21696
	ctx.r27.s64 = ctx.r31.s64 + 21696;
	// stw r10,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r10.u32);
	// li r30,0
	ctx.r30.s64 = 0;
	// stw r9,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r9.u32);
	// addi r8,r5,-29192
	ctx.r8.s64 = ctx.r5.s64 + -29192;
	// addi r11,r31,12
	ctx.r11.s64 = ctx.r31.s64 + 12;
	// stw r30,21680(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21680, ctx.r30.u32);
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// subf r9,r27,r8
	ctx.r9.s64 = ctx.r8.s64 - ctx.r27.s64;
	// li r10,40
	ctx.r10.s64 = 40;
loc_826A01DC:
	// lwzx r8,r9,r11
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r11.u32);
	// addic. r10,r10,-1
	ctx.xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r8,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r8.u32);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// bne 0x826a01dc
	if (!ctx.cr0.eq) goto loc_826A01DC;
	// addi r26,r31,21856
	ctx.r26.s64 = ctx.r31.s64 + 21856;
	// li r29,2
	ctx.r29.s64 = 2;
	// mr r28,r26
	ctx.r28.u64 = ctx.r26.u64;
loc_826A01FC:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a00c8
	ctx.lr = 0x826A0204;
	sub_826A00C8(ctx, base);
	// addic. r29,r29,-1
	ctx.xer.ca = ctx.r29.u32 > 0;
	ctx.r29.s64 = ctx.r29.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// addi r28,r28,5764
	ctx.r28.s64 = ctx.r28.s64 + 5764;
	// bge 0x826a01fc
	if (!ctx.cr0.lt) goto loc_826A01FC;
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// li r10,49
	ctx.r10.s64 = 49;
	// addi r11,r11,-23552
	ctx.r11.s64 = ctx.r11.s64 + -23552;
	// li r9,200
	ctx.r9.s64 = 200;
	// addi r11,r11,8
	ctx.r11.s64 = ctx.r11.s64 + 8;
	// li r29,-1
	ctx.r29.s64 = -1;
loc_826A0228:
	// stw r9,-4(r11)
	PPC_STORE_U32(ctx.r11.u32 + -4, ctx.r9.u32);
	// addic. r10,r10,-1
	ctx.xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r29,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r29.u32);
	// stb r30,-8(r11)
	PPC_STORE_U8(ctx.r11.u32 + -8, ctx.r30.u8);
	// stw r29,132(r11)
	PPC_STORE_U32(ctx.r11.u32 + 132, ctx.r29.u32);
	// stw r29,136(r11)
	PPC_STORE_U32(ctx.r11.u32 + 136, ctx.r29.u32);
	// stw r29,140(r11)
	PPC_STORE_U32(ctx.r11.u32 + 140, ctx.r29.u32);
	// addi r11,r11,152
	ctx.r11.s64 = ctx.r11.s64 + 152;
	// bne 0x826a0228
	if (!ctx.cr0.eq) goto loc_826A0228;
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// addi r3,r3,-15944
	ctx.r3.s64 = ctx.r3.s64 + -15944;
	// bl 0x82398118
	ctx.lr = 0x826A0258;
	sub_82398118(ctx, base);
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// addi r3,r3,-15888
	ctx.r3.s64 = ctx.r3.s64 + -15888;
	// bl 0x82395138
	ctx.lr = 0x826A0264;
	sub_82395138(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,0
	ctx.r10.s64 = 0;
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// ori r8,r11,57996
	ctx.r8.u64 = ctx.r11.u64 | 57996;
	// ori r7,r10,39520
	ctx.r7.u64 = ctx.r10.u64 | 39520;
	// addi r6,r9,-29168
	ctx.r6.s64 = ctx.r9.s64 + -29168;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r3,17296
	ctx.r3.s64 = 17296;
	// stwx r5,r31,r8
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, ctx.r5.u32);
	// stbx r30,r31,r7
	PPC_STORE_U8(ctx.r31.u32 + ctx.r7.u32, ctx.r30.u8);
	// lwz r11,4(r6)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// cntlzw r4,r11
	ctx.r4.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r11,r4,27,31,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 27) & 0x1;
	// xori r10,r11,1
	ctx.r10.u64 = ctx.r11.u64 ^ 1;
	// stb r10,21670(r31)
	PPC_STORE_U8(ctx.r31.u32 + 21670, ctx.r10.u8);
	// bl 0x82130528
	ctx.lr = 0x826A02A4;
	sub_82130528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a02b4
	if (ctx.cr6.eq) goto loc_826A02B4;
	// bl 0x826b1f88
	ctx.lr = 0x826A02B0;
	sub_826B1F88(ctx, base);
	// b 0x826a02b8
	goto loc_826A02B8;
loc_826A02B4:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_826A02B8:
	// lis r6,0
	ctx.r6.s64 = 0;
	// stw r3,21680(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21680, ctx.r3.u32);
	// lis r11,0
	ctx.r11.s64 = 0;
	// stw r30,21672(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21672, ctx.r30.u32);
	// lis r10,0
	ctx.r10.s64 = 0;
	// stw r30,21676(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21676, ctx.r30.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// stw r30,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r30.u32);
	// ori r6,r6,57768
	ctx.r6.u64 = ctx.r6.u64 | 57768;
	// stb r30,21684(r31)
	PPC_STORE_U8(ctx.r31.u32 + 21684, ctx.r30.u8);
	// ori r11,r11,57776
	ctx.r11.u64 = ctx.r11.u64 | 57776;
	// stb r30,21668(r31)
	PPC_STORE_U8(ctx.r31.u32 + 21668, ctx.r30.u8);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r7,0
	ctx.r7.s64 = 0;
	// ori r10,r10,57992
	ctx.r10.u64 = ctx.r10.u64 | 57992;
	// ori r9,r9,57984
	ctx.r9.u64 = ctx.r9.u64 | 57984;
	// stwx r29,r31,r6
	PPC_STORE_U32(ctx.r31.u32 + ctx.r6.u32, ctx.r29.u32);
	// lis r5,0
	ctx.r5.s64 = 0;
	// stbx r30,r31,r11
	PPC_STORE_U8(ctx.r31.u32 + ctx.r11.u32, ctx.r30.u8);
	// ori r8,r8,57780
	ctx.r8.u64 = ctx.r8.u64 | 57780;
	// ori r7,r7,57980
	ctx.r7.u64 = ctx.r7.u64 | 57980;
	// lis r20,0
	ctx.r20.s64 = 0;
	// stwx r30,r31,r10
	PPC_STORE_U32(ctx.r31.u32 + ctx.r10.u32, ctx.r30.u32);
	// ori r5,r5,39260
	ctx.r5.u64 = ctx.r5.u64 | 39260;
	// stbx r30,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r30.u8);
	// lis r28,0
	ctx.r28.s64 = 0;
	// lis r3,0
	ctx.r3.s64 = 0;
	// stwx r29,r31,r8
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, ctx.r29.u32);
	// lis r24,0
	ctx.r24.s64 = 0;
	// stwx r30,r31,r7
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, ctx.r30.u32);
	// lis r23,0
	ctx.r23.s64 = 0;
	// ori r6,r20,39244
	ctx.r6.u64 = ctx.r20.u64 | 39244;
	// stwx r30,r31,r5
	PPC_STORE_U32(ctx.r31.u32 + ctx.r5.u32, ctx.r30.u32);
	// ori r11,r28,57712
	ctx.r11.u64 = ctx.r28.u64 | 57712;
	// lis r4,0
	ctx.r4.s64 = 0;
	// lis r22,0
	ctx.r22.s64 = 0;
	// lis r21,0
	ctx.r21.s64 = 0;
	// ori r3,r3,39356
	ctx.r3.u64 = ctx.r3.u64 | 39356;
	// stbx r30,r31,r6
	PPC_STORE_U8(ctx.r31.u32 + ctx.r6.u32, ctx.r30.u8);
	// ori r10,r24,57772
	ctx.r10.u64 = ctx.r24.u64 | 57772;
	// stwx r30,r31,r11
	PPC_STORE_U32(ctx.r31.u32 + ctx.r11.u32, ctx.r30.u32);
	// ori r9,r23,57704
	ctx.r9.u64 = ctx.r23.u64 | 57704;
	// lis r19,-32256
	ctx.r19.s64 = -2113929216;
	// lis r18,-32256
	ctx.r18.s64 = -2113929216;
	// ori r4,r4,39256
	ctx.r4.u64 = ctx.r4.u64 | 39256;
	// stwx r30,r31,r3
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, ctx.r30.u32);
	// ori r8,r22,57700
	ctx.r8.u64 = ctx.r22.u64 | 57700;
	// stwx r30,r31,r10
	PPC_STORE_U32(ctx.r31.u32 + ctx.r10.u32, ctx.r30.u32);
	// ori r7,r21,39228
	ctx.r7.u64 = ctx.r21.u64 | 39228;
	// stwx r29,r31,r9
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, ctx.r29.u32);
	// lis r5,-32125
	ctx.r5.s64 = -2105344000;
	// lfs f0,17032(r19)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r19.u32 + 17032);
	ctx.f0.f64 = double(temp.f32);
	// li r6,1
	ctx.r6.s64 = 1;
	// lfs f13,7444(r18)
	temp.u32 = PPC_LOAD_U32(ctx.r18.u32 + 7444);
	ctx.f13.f64 = double(temp.f32);
	// li r11,20
	ctx.r11.s64 = 20;
	// stfs f0,21688(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 21688, temp.u32);
	// lis r10,0
	ctx.r10.s64 = 0;
	// stbx r6,r31,r4
	PPC_STORE_U8(ctx.r31.u32 + ctx.r4.u32, ctx.r6.u8);
	// lis r9,0
	ctx.r9.s64 = 0;
	// stwx r29,r31,r8
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, ctx.r29.u32);
	// lis r3,0
	ctx.r3.s64 = 0;
	// stbx r30,r31,r7
	PPC_STORE_U8(ctx.r31.u32 + ctx.r7.u32, ctx.r30.u8);
	// stfs f13,21692(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 21692, temp.u32);
	// stw r11,-29212(r5)
	PPC_STORE_U32(ctx.r5.u32 + -29212, ctx.r11.u32);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r7,-32255
	ctx.r7.s64 = -2113863680;
	// ori r6,r10,39248
	ctx.r6.u64 = ctx.r10.u64 | 39248;
	// ori r5,r9,39524
	ctx.r5.u64 = ctx.r9.u64 | 39524;
	// ori r3,r3,39232
	ctx.r3.u64 = ctx.r3.u64 | 39232;
	// lis r4,-32125
	ctx.r4.s64 = -2105344000;
	// lfs f31,3796(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 3796);
	ctx.f31.f64 = double(temp.f32);
	// addis r10,r31,1
	ctx.r10.s64 = ctx.r31.s64 + 65536;
	// lfs f12,-31384(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -31384);
	ctx.f12.f64 = double(temp.f32);
	// li r11,6
	ctx.r11.s64 = 6;
	// stfsx f12,r31,r6
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r6.u32, temp.u32);
	// addi r10,r10,-25952
	ctx.r10.s64 = ctx.r10.s64 + -25952;
	// stwx r29,r31,r5
	PPC_STORE_U32(ctx.r31.u32 + ctx.r5.u32, ctx.r29.u32);
	// stfsx f31,r31,r3
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, temp.u32);
	// li r9,25
	ctx.r9.s64 = 25;
	// stw r11,-29208(r4)
	PPC_STORE_U32(ctx.r4.u32 + -29208, ctx.r11.u32);
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lis r4,-32254
	ctx.r4.s64 = -2113798144;
	// lfs f4,-26972(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -26972);
	ctx.f4.f64 = double(temp.f32);
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// lfs f5,-26976(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -26976);
	ctx.f5.f64 = double(temp.f32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lfs f6,-26980(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -26980);
	ctx.f6.f64 = double(temp.f32);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lfs f7,-26984(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + -26984);
	ctx.f7.f64 = double(temp.f32);
	// lfs f8,-11624(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + -11624);
	ctx.f8.f64 = double(temp.f32);
	// lfs f9,-26988(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + -26988);
	ctx.f9.f64 = double(temp.f32);
	// lfs f10,-26992(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -26992);
	ctx.f10.f64 = double(temp.f32);
	// lfs f11,-26996(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -26996);
	ctx.f11.f64 = double(temp.f32);
	// lfs f12,-27000(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -27000);
	ctx.f12.f64 = double(temp.f32);
loc_826A0444:
	// stfs f12,12(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 12, temp.u32);
	// addic. r9,r9,-1
	ctx.xer.ca = ctx.r9.u32 > 0;
	ctx.r9.s64 = ctx.r9.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// stfs f11,0(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// stfs f10,4(r11)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4, temp.u32);
	// stfs f9,8(r11)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r11.u32 + 8, temp.u32);
	// stfs f31,16(r11)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r11.u32 + 16, temp.u32);
	// stfs f8,20(r11)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r11.u32 + 20, temp.u32);
	// stfs f31,32(r11)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r11.u32 + 32, temp.u32);
	// stfs f31,36(r11)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r11.u32 + 36, temp.u32);
	// stfs f31,40(r11)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r11.u32 + 40, temp.u32);
	// stfs f7,1200(r11)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r11.u32 + 1200, temp.u32);
	// stfs f6,1216(r11)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r11.u32 + 1216, temp.u32);
	// stfs f5,1220(r11)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r11.u32 + 1220, temp.u32);
	// stfs f4,1224(r11)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r11.u32 + 1224, temp.u32);
	// stfs f13,1232(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 1232, temp.u32);
	// stfs f13,1236(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 1236, temp.u32);
	// addi r11,r11,48
	ctx.r11.s64 = ctx.r11.s64 + 48;
	// bne 0x826a0444
	if (!ctx.cr0.eq) goto loc_826A0444;
	// lis r9,0
	ctx.r9.s64 = 0;
	// lfs f13,0(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// lis r8,0
	ctx.r8.s64 = 0;
	// vspltisw128 v63,0
	_mm_store_si128((__m128i*)ctx.v63.u32, _mm_set1_epi32(int(0x0)));
	// ori r9,r9,39588
	ctx.r9.u64 = ctx.r9.u64 | 39588;
	// lis r7,0
	ctx.r7.s64 = 0;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r8,r8,39592
	ctx.r8.u64 = ctx.r8.u64 | 39592;
	// ori r7,r7,39600
	ctx.r7.u64 = ctx.r7.u64 | 39600;
	// lis r6,0
	ctx.r6.s64 = 0;
	// lfsx f11,r31,r9
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	ctx.f11.f64 = double(temp.f32);
	// ori r11,r11,39596
	ctx.r11.u64 = ctx.r11.u64 | 39596;
	// ori r9,r6,39292
	ctx.r9.u64 = ctx.r6.u64 | 39292;
	// lis r5,0
	ctx.r5.s64 = 0;
	// lfsx f10,r31,r8
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	ctx.f10.f64 = double(temp.f32);
	// lis r4,0
	ctx.r4.s64 = 0;
	// lfsx f9,r31,r7
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	ctx.f9.f64 = double(temp.f32);
	// lis r3,0
	ctx.r3.s64 = 0;
	// lis r10,0
	ctx.r10.s64 = 0;
	// lfsx f12,r31,r11
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	ctx.f12.f64 = double(temp.f32);
	// lis r28,0
	ctx.r28.s64 = 0;
	// stfsx f12,r31,r9
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// lis r24,0
	ctx.r24.s64 = 0;
	// ori r8,r5,39268
	ctx.r8.u64 = ctx.r5.u64 | 39268;
	// ori r7,r4,39296
	ctx.r7.u64 = ctx.r4.u64 | 39296;
	// lis r23,0
	ctx.r23.s64 = 0;
	// ori r6,r3,39272
	ctx.r6.u64 = ctx.r3.u64 | 39272;
	// ori r5,r10,39300
	ctx.r5.u64 = ctx.r10.u64 | 39300;
	// lis r29,0
	ctx.r29.s64 = 0;
	// stfsx f12,r31,r8
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, temp.u32);
	// ori r3,r28,39304
	ctx.r3.u64 = ctx.r28.u64 | 39304;
	// stfsx f13,r31,r7
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, temp.u32);
	// ori r10,r24,39280
	ctx.r10.u64 = ctx.r24.u64 | 39280;
	// ori r9,r23,39308
	ctx.r9.u64 = ctx.r23.u64 | 39308;
	// stfsx f13,r31,r6
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r6.u32, temp.u32);
	// ori r4,r29,39276
	ctx.r4.u64 = ctx.r29.u64 | 39276;
	// stfsx f11,r31,r5
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r5.u32, temp.u32);
	// lis r22,0
	ctx.r22.s64 = 0;
	// lis r21,0
	ctx.r21.s64 = 0;
	// stfsx f10,r31,r3
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, temp.u32);
	// lis r20,-32111
	ctx.r20.s64 = -2104426496;
	// stfsx f10,r31,r10
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r10.u32, temp.u32);
	// lis r18,0
	ctx.r18.s64 = 0;
	// stfsx f9,r31,r9
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// lis r11,0
	ctx.r11.s64 = 0;
	// stfsx f11,r31,r4
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r4.u32, temp.u32);
	// ori r8,r22,39284
	ctx.r8.u64 = ctx.r22.u64 | 39284;
	// ori r7,r21,39328
	ctx.r7.u64 = ctx.r21.u64 | 39328;
	// addi r6,r20,-29216
	ctx.r6.s64 = ctx.r20.s64 + -29216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r19,0
	ctx.r19.s64 = 0;
	// ori r11,r11,39344
	ctx.r11.u64 = ctx.r11.u64 | 39344;
	// stfsx f9,r31,r8
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, temp.u32);
	// ori r3,r18,39264
	ctx.r3.u64 = ctx.r18.u64 | 39264;
	// stvx128 v63,r31,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addis r10,r31,1
	ctx.r10.s64 = ctx.r31.s64 + 65536;
	// stvx128 v63,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addis r9,r31,1
	ctx.r9.s64 = ctx.r31.s64 + 65536;
	// lfs f13,14988(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 14988);
	ctx.f13.f64 = double(temp.f32);
	// ori r4,r19,39240
	ctx.r4.u64 = ctx.r19.u64 | 39240;
	// addi r10,r10,-26388
	ctx.r10.s64 = ctx.r10.s64 + -26388;
	// stfsx f13,r31,r11
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r11.u32, temp.u32);
	// addi r9,r9,-26348
	ctx.r9.s64 = ctx.r9.s64 + -26348;
	// stwx r30,r31,r3
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, ctx.r30.u32);
	// addis r8,r31,1
	ctx.r8.s64 = ctx.r31.s64 + 65536;
	// addis r7,r31,1
	ctx.r7.s64 = ctx.r31.s64 + 65536;
	// addis r6,r31,1
	ctx.r6.s64 = ctx.r31.s64 + 65536;
	// stwx r30,r31,r4
	PPC_STORE_U32(ctx.r31.u32 + ctx.r4.u32, ctx.r30.u32);
	// addis r5,r31,1
	ctx.r5.s64 = ctx.r31.s64 + 65536;
	// stfs f31,0(r10)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// stfs f31,4(r10)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// stfs f0,0(r9)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
	// stfs f0,4(r9)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 4, temp.u32);
	// addi r8,r8,-26380
	ctx.r8.s64 = ctx.r8.s64 + -26380;
	// addi r7,r7,-26340
	ctx.r7.s64 = ctx.r7.s64 + -26340;
	// addi r6,r6,-26372
	ctx.r6.s64 = ctx.r6.s64 + -26372;
	// addi r5,r5,-26332
	ctx.r5.s64 = ctx.r5.s64 + -26332;
	// addi r3,r3,-26364
	ctx.r3.s64 = ctx.r3.s64 + -26364;
	// addi r11,r11,-26324
	ctx.r11.s64 = ctx.r11.s64 + -26324;
	// stfs f31,0(r8)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r8.u32 + 0, temp.u32);
	// addis r10,r31,1
	ctx.r10.s64 = ctx.r31.s64 + 65536;
	// stfs f31,4(r8)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r8.u32 + 4, temp.u32);
	// addis r9,r31,1
	ctx.r9.s64 = ctx.r31.s64 + 65536;
	// stfs f0,0(r7)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r7.u32 + 0, temp.u32);
	// addi r10,r10,-26356
	ctx.r10.s64 = ctx.r10.s64 + -26356;
	// stfs f0,4(r7)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r7.u32 + 4, temp.u32);
	// addi r9,r9,-26316
	ctx.r9.s64 = ctx.r9.s64 + -26316;
	// stfs f31,0(r6)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r6.u32 + 0, temp.u32);
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// stfs f31,4(r6)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r6.u32 + 4, temp.u32);
	// stfs f0,0(r5)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r5.u32 + 0, temp.u32);
	// stfs f0,4(r5)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r5.u32 + 4, temp.u32);
	// stfs f31,0(r3)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r3.u32 + 0, temp.u32);
	// stfs f31,4(r3)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r3.u32 + 4, temp.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stfs f0,0(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// stfs f0,4(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4, temp.u32);
	// stfs f31,0(r10)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// stfs f31,4(r10)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r10.u32 + 4, temp.u32);
	// stfs f0,0(r9)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
	// stfs f0,4(r9)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r9.u32 + 4, temp.u32);
	// bl 0x824e06e0
	ctx.lr = 0x826A062C;
	sub_824E06E0(ctx, base);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r7,0
	ctx.r7.s64 = 0;
	// lis r6,0
	ctx.r6.s64 = 0;
	// ori r3,r8,49588
	ctx.r3.u64 = ctx.r8.u64 | 49588;
	// lis r5,-32111
	ctx.r5.s64 = -2104426496;
	// lis r4,-32111
	ctx.r4.s64 = -2104426496;
	// lfs f12,-12084(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -12084);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// ori r7,r7,49584
	ctx.r7.u64 = ctx.r7.u64 | 49584;
	// ori r6,r6,39229
	ctx.r6.u64 = ctx.r6.u64 | 39229;
	// stwx r30,r31,r3
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, ctx.r30.u32);
	// lis r9,-32252
	ctx.r9.s64 = -2113667072;
	// lis r8,-32251
	ctx.r8.s64 = -2113601536;
	// lis r29,-32244
	ctx.r29.s64 = -2113142784;
	// addi r28,r5,-29312
	ctx.r28.s64 = ctx.r5.s64 + -29312;
	// addi r25,r4,-29200
	ctx.r25.s64 = ctx.r4.s64 + -29200;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
	// lfs f0,-11300(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -11300);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,4764(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 4764);
	ctx.f13.f64 = double(temp.f32);
	// lis r3,-32254
	ctx.r3.s64 = -2113798144;
	// stw r11,-29336(r10)
	PPC_STORE_U32(ctx.r10.u32 + -29336, ctx.r11.u32);
	// lfs f11,-27004(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + -27004);
	ctx.f11.f64 = double(temp.f32);
	// stwx r30,r31,r7
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, ctx.r30.u32);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// stbx r30,r31,r6
	PPC_STORE_U8(ctx.r31.u32 + ctx.r6.u32, ctx.r30.u8);
	// stfs f0,-29312(r5)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r5.u32 + -29312, temp.u32);
	// stfs f12,-29200(r4)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r4.u32 + -29200, temp.u32);
	// lis r29,-32125
	ctx.r29.s64 = -2105344000;
	// stfs f13,4(r28)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r28.u32 + 4, temp.u32);
	// addi r30,r3,-14596
	ctx.r30.s64 = ctx.r3.s64 + -14596;
	// stfs f31,8(r28)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r28.u32 + 8, temp.u32);
	// addi r24,r11,-14960
	ctx.r24.s64 = ctx.r11.s64 + -14960;
	// stfs f11,4(r25)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r25.u32 + 4, temp.u32);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// stfs f31,8(r25)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r25.u32 + 8, temp.u32);
	// mr r9,r30
	ctx.r9.u64 = ctx.r30.u64;
	// stfs f0,16(r28)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r28.u32 + 16, temp.u32);
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// stfs f13,20(r28)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r28.u32 + 20, temp.u32);
	// addi r5,r10,-27016
	ctx.r5.s64 = ctx.r10.s64 + -27016;
	// stfs f31,24(r28)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r28.u32 + 24, temp.u32);
	// li r7,160
	ctx.r7.s64 = 160;
	// stfs f12,16(r25)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r25.u32 + 16, temp.u32);
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// stfs f11,20(r25)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r25.u32 + 20, temp.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// stfs f31,24(r25)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r25.u32 + 24, temp.u32);
	// lwz r3,2832(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2832);
	// bl 0x82202b98
	ctx.lr = 0x826A06F4;
	sub_82202B98(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// addi r5,r7,-27032
	ctx.r5.s64 = ctx.r7.s64 + -27032;
	// lwz r3,2832(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 2832);
	// mr r9,r30
	ctx.r9.u64 = ctx.r30.u64;
	// mr r8,r24
	ctx.r8.u64 = ctx.r24.u64;
	// li r7,17292
	ctx.r7.s64 = 17292;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82202b98
	ctx.lr = 0x826A0718;
	sub_82202B98(ctx, base);
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// li r4,8
	ctx.r4.s64 = 8;
	// addi r5,r6,-27048
	ctx.r5.s64 = ctx.r6.s64 + -27048;
	// li r6,1
	ctx.r6.s64 = 1;
	// lwz r11,-10236(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213058
	ctx.lr = 0x826A0738;
	sub_82213058(ctx, base);
	// lwz r11,-10236(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r5,-27064
	ctx.r5.s64 = ctx.r5.s64 + -27064;
	// li r4,15
	ctx.r4.s64 = 15;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213058
	ctx.lr = 0x826A0754;
	sub_82213058(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r30,9
	ctx.r30.s64 = 9;
	// addi r28,r11,-27084
	ctx.r28.s64 = ctx.r11.s64 + -27084;
loc_826A0760:
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// addi r6,r30,-9
	ctx.r6.s64 = ctx.r30.s64 + -9;
	// li r4,32
	ctx.r4.s64 = 32;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82137a08
	ctx.lr = 0x826A0774;
	sub_82137A08(ctx, base);
	// lwz r11,-10236(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213058
	ctx.lr = 0x826A078C;
	sub_82213058(ctx, base);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpwi cr6,r30,14
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 14, ctx.xer);
	// ble cr6,0x826a0760
	if (!ctx.cr6.gt) goto loc_826A0760;
	// lis r11,-32131
	ctx.r11.s64 = -2105737216;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r26,r11,30576
	ctx.r26.s64 = ctx.r11.s64 + 30576;
	// addi r4,r10,-27108
	ctx.r4.s64 = ctx.r10.s64 + -27108;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x821ca540
	ctx.lr = 0x826A07B0;
	sub_821CA540(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r30,18
	ctx.r30.s64 = 18;
	// li r28,26
	ctx.r28.s64 = 26;
	// addi r27,r11,-27124
	ctx.r27.s64 = ctx.r11.s64 + -27124;
loc_826A07C0:
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// addi r6,r30,-24
	ctx.r6.s64 = ctx.r30.s64 + -24;
	// li r4,32
	ctx.r4.s64 = 32;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82137a08
	ctx.lr = 0x826A07D4;
	sub_82137A08(ctx, base);
	// lwz r11,-10236(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213058
	ctx.lr = 0x826A07EC;
	sub_82213058(ctx, base);
	// addic. r28,r28,-1
	ctx.xer.ca = ctx.r28.u32 > 0;
	ctx.r28.s64 = ctx.r28.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// bne 0x826a07c0
	if (!ctx.cr0.eq) goto loc_826A07C0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x821c9a90
	ctx.lr = 0x826A0800;
	sub_821C9A90(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// lfd f31,-128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -128);
	// b 0x823d9220
	__restgprlr_18(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A0810"))) PPC_WEAK_FUNC(sub_826A0810);
PPC_FUNC_IMPL(__imp__sub_826A0810) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x8269cb58
	ctx.lr = 0x826A0830;
	sub_8269CB58(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a0848
	if (ctx.cr6.eq) goto loc_826A0848;
	// bl 0x82130588
	ctx.lr = 0x826A0844;
	sub_82130588(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_826A0848:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A0860"))) PPC_WEAK_FUNC(sub_826A0860);
PPC_FUNC_IMPL(__imp__sub_826A0860) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r3,r3,58000
	ctx.r3.u64 = ctx.r3.u64 | 58000;
	// bl 0x82130528
	ctx.lr = 0x826A0878;
	sub_82130528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a0888
	if (ctx.cr6.eq) goto loc_826A0888;
	// bl 0x826a0158
	ctx.lr = 0x826A0884;
	sub_826A0158(ctx, base);
	// b 0x826a088c
	goto loc_826A088C;
loc_826A0888:
	// li r3,0
	ctx.r3.s64 = 0;
loc_826A088C:
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// stw r3,-29340(r11)
	PPC_STORE_U32(ctx.r11.u32 + -29340, ctx.r3.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A08A4"))) PPC_WEAK_FUNC(sub_826A08A4);
PPC_FUNC_IMPL(__imp__sub_826A08A4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A08A8"))) PPC_WEAK_FUNC(sub_826A08A8);
PPC_FUNC_IMPL(__imp__sub_826A08A8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d4
	ctx.lr = 0x826A08B0;
	__savegprlr_19(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A08C4;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-26948
	ctx.r3.s64 = ctx.r9.s64 + -26948;
	// lwz r8,48(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lwz r11,132(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 132);
	// addi r22,r11,64
	ctx.r22.s64 = ctx.r11.s64 + 64;
	// bl 0x821fa230
	ctx.lr = 0x826A08E0;
	sub_821FA230(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// li r28,0
	ctx.r28.s64 = 0;
	// li r24,3
	ctx.r24.s64 = 3;
	// li r19,1
	ctx.r19.s64 = 1;
	// lis r25,-32121
	ctx.r25.s64 = -2105081856;
	// addi r21,r11,-14196
	ctx.r21.s64 = ctx.r11.s64 + -14196;
	// addi r23,r10,-26956
	ctx.r23.s64 = ctx.r10.s64 + -26956;
	// addi r29,r9,-26968
	ctx.r29.s64 = ctx.r9.s64 + -26968;
	// addi r26,r8,-21664
	ctx.r26.s64 = ctx.r8.s64 + -21664;
loc_826A0914:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82392460
	ctx.lr = 0x826A0920;
	sub_82392460(ctx, base);
	// lwz r11,-10236(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826A0934;
	sub_821F9FB8(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r31,56(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// stw r24,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r24.u32);
	// bl 0x821c9790
	ctx.lr = 0x826A0950;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A0960;
	sub_825ED480(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x826a0978
	if (!ctx.cr6.eq) goto loc_826A0978;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x821bd618
	ctx.lr = 0x826A0978;
	sub_821BD618(ctx, base);
loc_826A0978:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ed4a0
	ctx.lr = 0x826A098C;
	sub_825ED4A0(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A0998;
	sub_8268DCB0(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826A09A4;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a09b4
	if (ctx.cr6.eq) goto loc_826A09B4;
	// stw r27,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r27.u32);
	// stw r19,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r19.u32);
loc_826A09B4:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// cmpwi cr6,r28,7
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 7, ctx.xer);
	// blt cr6,0x826a0914
	if (ctx.cr6.lt) goto loc_826A0914;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823d9224
	__restgprlr_19(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A09C8"))) PPC_WEAK_FUNC(sub_826A09C8);
PPC_FUNC_IMPL(__imp__sub_826A09C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A09D0;
	__savegprlr_28(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A09F4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A0A00;
	sub_8268DCB0(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-26956
	ctx.r4.s64 = ctx.r9.s64 + -26956;
	// bl 0x8268da78
	ctx.lr = 0x826A0A10;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a0a1c
	if (ctx.cr6.eq) goto loc_826A0A1C;
	// lwz r31,4(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_826A0A1C:
	// add. r11,r31,r29
	ctx.r11.u64 = ctx.r31.u64 + ctx.r29.u64;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// li r9,43
	ctx.r9.s64 = 43;
	// blt 0x826a0a2c
	if (ctx.cr0.lt) goto loc_826A0A2C;
	// li r9,0
	ctx.r9.s64 = 0;
loc_826A0A2C:
	// lis r10,12192
	ctx.r10.s64 = 799014912;
	// mr r8,r11
	ctx.r8.u64 = ctx.r11.u64;
	// ori r7,r10,48771
	ctx.r7.u64 = ctx.r10.u64 | 48771;
	// mulhw r6,r8,r7
	ctx.r6.s64 = (int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32)) >> 32;
	// srawi r11,r6,3
	ctx.xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x7) != 0);
	ctx.r11.s64 = ctx.r6.s32 >> 3;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0x1;
	// add r5,r11,r10
	ctx.r5.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulli r4,r5,43
	ctx.r4.s64 = ctx.r5.s64 * 43;
	// subf r11,r4,r8
	ctx.r11.s64 = ctx.r8.s64 - ctx.r4.s64;
	// add r31,r11,r9
	ctx.r31.u64 = ctx.r11.u64 + ctx.r9.u64;
	// cmpwi cr6,r31,15
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 15, ctx.xer);
	// beq cr6,0x826a0a64
	if (ctx.cr6.eq) goto loc_826A0A64;
	// cmpwi cr6,r31,16
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 16, ctx.xer);
	// bne cr6,0x826a0a74
	if (!ctx.cr6.eq) goto loc_826A0A74;
loc_826A0A64:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// li r31,17
	ctx.r31.s64 = 17;
	// bgt cr6,0x826a0a74
	if (ctx.cr6.gt) goto loc_826A0A74;
	// li r31,14
	ctx.r31.s64 = 14;
loc_826A0A74:
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A0A90;
	sub_822A3998(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lwz r7,48(r9)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r8,0(r30)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r11,132(r7)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 132);
	// lwz r6,336(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 336);
	// addi r29,r11,64
	ctx.r29.s64 = ctx.r11.s64 + 64;
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A0AB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// bl 0x823924b0
	ctx.lr = 0x826A0AC4;
	sub_823924B0(ctx, base);
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// addi r28,r5,-21664
	ctx.r28.s64 = ctx.r5.s64 + -21664;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A0ADC;
	sub_821F9FB8(ctx, base);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,336(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 336);
	// lwz r30,56(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A0AF8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r9,3
	ctx.r9.s64 = 3;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r8,-26968
	ctx.r4.s64 = ctx.r8.s64 + -26968;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82203058
	ctx.lr = 0x826A0B1C;
	sub_82203058(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A0B28;
	sub_821F9FB8(ctx, base);
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r7,1072
	ctx.r4.s64 = ctx.r7.s64 + 1072;
	// bl 0x825ee0e0
	ctx.lr = 0x826A0B3C;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A0B44"))) PPC_WEAK_FUNC(sub_826A0B44);
PPC_FUNC_IMPL(__imp__sub_826A0B44) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A0B48"))) PPC_WEAK_FUNC(sub_826A0B48);
PPC_FUNC_IMPL(__imp__sub_826A0B48) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A0B74;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r8,0
	ctx.r8.s64 = 0;
	// ori r7,r9,57692
	ctx.r7.u64 = ctx.r9.u64 | 57692;
	// ori r6,r8,57696
	ctx.r6.u64 = ctx.r8.u64 | 57696;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r5,r31,r7
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// lwzx r4,r31,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r6.u32);
	// bl 0x82393118
	ctx.lr = 0x826A0B9C;
	sub_82393118(ctx, base);
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lfs f31,7444(r5)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 7444);
	ctx.f31.f64 = double(temp.f32);
	// stfs f31,96(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f31,100(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f31,104(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lwz r10,8(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	// clrlwi r7,r10,24
	ctx.r7.u64 = ctx.r10.u32 & 0xFF;
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// rlwinm r6,r10,24,24,31
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 24) & 0xFF;
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// rlwinm r4,r10,16,24,31
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 16) & 0xFF;
	// fcfid f8,f13
	ctx.f8.f64 = double(ctx.f13.s64);
	// std r6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r6.u64);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r4.u64);
	// lfd f11,80(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f9,f12
	ctx.f9.f64 = double(ctx.f12.s64);
	// lfs f0,15364(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 15364);
	ctx.f0.f64 = double(temp.f32);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// frsp f6,f9
	ctx.f6.f64 = double(float(ctx.f9.f64));
	// frsp f5,f8
	ctx.f5.f64 = double(float(ctx.f8.f64));
	// frsp f7,f10
	ctx.f7.f64 = double(float(ctx.f10.f64));
	// fmuls f3,f6,f0
	ctx.f3.f64 = double(float(ctx.f6.f64 * ctx.f0.f64));
	// stfs f3,100(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// fmuls f2,f5,f0
	ctx.f2.f64 = double(float(ctx.f5.f64 * ctx.f0.f64));
	// stfs f2,104(r1)
	temp.f32 = float(ctx.f2.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// fmuls f4,f7,f0
	ctx.f4.f64 = double(float(ctx.f7.f64 * ctx.f0.f64));
	// stfs f4,96(r1)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// bl 0x8261e1a0
	ctx.lr = 0x826A0C1C;
	sub_8261E1A0(ctx, base);
	// lis r3,-32256
	ctx.r3.s64 = -2113929216;
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lfs f0,31016(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 31016);
	ctx.f0.f64 = double(temp.f32);
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r30,r8,-21664
	ctx.r30.s64 = ctx.r8.s64 + -21664;
	// lvlx128 v63,r0,r11
	temp.u32 = ctx.r11.u32;
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v62,v63,0
	_mm_store_si128((__m128i*)ctx.v62.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v63.u32), 0xFF));
	// lvx128 v61,r0,r10
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// vmulfp128 v60,v61,v62
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v60.f32, _mm_mul_ps(_mm_load_ps(ctx.v61.f32), _mm_load_ps(ctx.v62.f32)));
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// stvx128 v60,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821f9fb8
	ctx.lr = 0x826A0C60;
	sub_821F9FB8(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lfs f1,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f1.f64 = double(temp.f32);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// fctiwz f0,f1
	ctx.f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// addi r4,r7,-26880
	ctx.r4.s64 = ctx.r7.s64 + -26880;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A0C80;
	sub_825EE0E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A0C8C;
	sub_821F9FB8(ctx, base);
	// lfs f13,100(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// fctiwz f12,f13
	ctx.f12.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f12,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f12.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r4,r6,-26896
	ctx.r4.s64 = ctx.r6.s64 + -26896;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// bl 0x825ee0e0
	ctx.lr = 0x826A0CAC;
	sub_825EE0E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A0CB8;
	sub_821F9FB8(ctx, base);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lfs f11,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f11.f64 = double(temp.f32);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// fctiwz f10,f11
	ctx.f10.s64 = (ctx.f11.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f11.f64));
	// addi r4,r5,-26912
	ctx.r4.s64 = ctx.r5.s64 + -26912;
	// stfd f10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f10.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A0CD8;
	sub_825EE0E0(ctx, base);
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// lfs f9,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f9.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f0,11360(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f8,f9,f0
	ctx.f8.f64 = double(float(ctx.f9.f64 * ctx.f0.f64));
	// stfs f31,116(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stfs f31,120(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// stfs f8,112(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x8261e2b8
	ctx.lr = 0x826A0CFC;
	sub_8261E2B8(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// lis r7,-1
	ctx.r7.s64 = -65536;
	// lfs f0,15360(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lvlx128 v59,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v59.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v58,v59,0
	_mm_store_si128((__m128i*)ctx.v58.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v59.u32), 0xFF));
	// lvx128 v57,r0,r9
	_mm_store_si128((__m128i*)ctx.v57.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmulfp128 v56,v57,v58
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v56.f32, _mm_mul_ps(_mm_load_ps(ctx.v57.f32), _mm_load_ps(ctx.v58.f32)));
	// stvx128 v56,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v56.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f7,120(r1)
	ctx.fpscr.disableFlushModeUnconditional();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f7.f64 = double(temp.f32);
	// lfs f6,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f6.f64 = double(temp.f32);
	// lfs f5,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f5.f64 = double(temp.f32);
	// fctidz f4,f5
	ctx.f4.s64 = (ctx.f5.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f5.f64));
	// stfd f4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f4.u64);
	// lbz r6,87(r1)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// fctidz f3,f7
	ctx.f3.s64 = (ctx.f7.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f7.f64));
	// stfd f3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f3.u64);
	// lbz r5,87(r1)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// fctidz f2,f6
	ctx.f2.s64 = (ctx.f6.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f6.f64));
	// stfd f2,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f2.u64);
	// lbz r11,87(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// rlwimi r7,r11,8,16,23
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r11.u32, 8) & 0xFF00) | (ctx.r7.u64 & 0xFFFFFFFFFFFF00FF);
	// or r10,r7,r6
	ctx.r10.u64 = ctx.r7.u64 | ctx.r6.u64;
	// rlwinm r9,r10,8,0,23
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r9,r5
	ctx.r31.u64 = ctx.r9.u64 | ctx.r5.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826A0D78;
	sub_821F9FB8(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r8,-26932
	ctx.r4.s64 = ctx.r8.s64 + -26932;
	// bl 0x825ee0e0
	ctx.lr = 0x826A0D8C;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A0DA8"))) PPC_WEAK_FUNC(sub_826A0DA8);
PPC_FUNC_IMPL(__imp__sub_826A0DA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A0DD4;
	sub_822A3998(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// ori r7,r10,39356
	ctx.r7.u64 = ctx.r10.u64 | 39356;
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// lfs f31,7444(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 7444);
	ctx.f31.f64 = double(temp.f32);
	// lwzx r10,r31,r7
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// addi r11,r11,64
	ctx.r11.s64 = ctx.r11.s64 + 64;
	// stfs f31,96(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// addi r9,r10,-2
	ctx.r9.s64 = ctx.r10.s64 + -2;
	// stfs f31,100(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f31,104(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r10,r11,16
	ctx.r10.s64 = ctx.r11.s64 + 16;
	// cmplwi cr6,r9,19
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 19, ctx.xer);
	// bgt cr6,0x826a0f7c
	if (ctx.cr6.gt) goto loc_826A0F7C;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,3624
	ctx.r12.s64 = ctx.r12.s64 + 3624;
	// rlwinm r0,r9,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r9.u64) {
	case 0:
		goto loc_826A0E9C;
	case 1:
		goto loc_826A0EB0;
	case 2:
		goto loc_826A0EC4;
	case 3:
		goto loc_826A0F7C;
	case 4:
		goto loc_826A0F7C;
	case 5:
		goto loc_826A0ED8;
	case 6:
		goto loc_826A0EEC;
	case 7:
		goto loc_826A0F00;
	case 8:
		goto loc_826A0F14;
	case 9:
		goto loc_826A0F28;
	case 10:
		goto loc_826A0F3C;
	case 11:
		goto loc_826A0F50;
	case 12:
		goto loc_826A0F64;
	case 13:
		goto loc_826A0F7C;
	case 14:
		goto loc_826A0F7C;
	case 15:
		goto loc_826A0F7C;
	case 16:
		goto loc_826A0F7C;
	case 17:
		goto loc_826A0F7C;
	case 18:
		goto loc_826A0E78;
	case 19:
		goto loc_826A0E88;
	default:
		__builtin_unreachable();
	}
	// lwz r19,3740(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3740);
	// lwz r19,3760(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3760);
	// lwz r19,3780(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3780);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3800(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3800);
	// lwz r19,3820(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3820);
	// lwz r19,3840(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3840);
	// lwz r19,3860(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3860);
	// lwz r19,3880(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3880);
	// lwz r19,3900(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3900);
	// lwz r19,3920(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3920);
	// lwz r19,3940(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3940);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3964);
	// lwz r19,3704(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3704);
	// lwz r19,3720(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 3720);
loc_826A0E78:
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// lvx128 v63,r0,r10
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0E88:
	// li r11,16
	ctx.r11.s64 = 16;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v62,r10,r11
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v62,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0E9C:
	// li r11,64
	ctx.r11.s64 = 64;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v61,r10,r11
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v61,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v61.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0EB0:
	// li r11,80
	ctx.r11.s64 = 80;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v60,r10,r11
	_mm_store_si128((__m128i*)ctx.v60.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v60,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0EC4:
	// li r11,96
	ctx.r11.s64 = 96;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v59,r10,r11
	_mm_store_si128((__m128i*)ctx.v59.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v59,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v59.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0ED8:
	// li r11,32
	ctx.r11.s64 = 32;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v58,r10,r11
	_mm_store_si128((__m128i*)ctx.v58.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v58,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v58.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0EEC:
	// li r11,48
	ctx.r11.s64 = 48;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v57,r10,r11
	_mm_store_si128((__m128i*)ctx.v57.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32 + ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v57,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v57.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0F00:
	// li r10,1408
	ctx.r10.s64 = 1408;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v56,r11,r10
	_mm_store_si128((__m128i*)ctx.v56.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v56,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v56.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0F14:
	// li r10,1424
	ctx.r10.s64 = 1424;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v55,r11,r10
	_mm_store_si128((__m128i*)ctx.v55.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v55,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v55.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0F28:
	// li r10,1440
	ctx.r10.s64 = 1440;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v54,r11,r10
	_mm_store_si128((__m128i*)ctx.v54.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v54,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v54.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0F3C:
	// li r10,1456
	ctx.r10.s64 = 1456;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v53,r11,r10
	_mm_store_si128((__m128i*)ctx.v53.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v53,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v53.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0F50:
	// li r10,1472
	ctx.r10.s64 = 1472;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v52,r11,r10
	_mm_store_si128((__m128i*)ctx.v52.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v52,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v52.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a0f7c
	goto loc_826A0F7C;
loc_826A0F64:
	// lfs f0,280(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 280);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,276(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 276);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,272(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 272);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,96(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f13,100(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f0,104(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
loc_826A0F7C:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8261e1a0
	ctx.lr = 0x826A0F84;
	sub_8261E1A0(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// lfs f0,31016(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 31016);
	ctx.f0.f64 = double(temp.f32);
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r30,r7,-21664
	ctx.r30.s64 = ctx.r7.s64 + -21664;
	// lvlx128 v51,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v51.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v50,v51,0
	_mm_store_si128((__m128i*)ctx.v50.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v51.u32), 0xFF));
	// lvx128 v49,r0,r9
	_mm_store_si128((__m128i*)ctx.v49.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// vmulfp128 v48,v49,v50
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v48.f32, _mm_mul_ps(_mm_load_ps(ctx.v49.f32), _mm_load_ps(ctx.v50.f32)));
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// stvx128 v48,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v48.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821f9fb8
	ctx.lr = 0x826A0FC8;
	sub_821F9FB8(ctx, base);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f0.f64 = double(temp.f32);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// addi r4,r6,-26880
	ctx.r4.s64 = ctx.r6.s64 + -26880;
	// stfd f13,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f13.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A0FE8;
	sub_825EE0E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A0FF4;
	sub_821F9FB8(ctx, base);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lfs f12,100(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// fctiwz f11,f12
	ctx.f11.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f11.u64);
	// addi r4,r5,-26896
	ctx.r4.s64 = ctx.r5.s64 + -26896;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A1014;
	sub_825EE0E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1020;
	sub_821F9FB8(ctx, base);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lfs f10,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f10.f64 = double(temp.f32);
	// fctiwz f9,f10
	ctx.f9.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f9.u64);
	// addi r4,r4,-26912
	ctx.r4.s64 = ctx.r4.s64 + -26912;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A1040;
	sub_825EE0E0(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f8,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f8.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f0,11360(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f7,f8,f0
	ctx.f7.f64 = double(float(ctx.f8.f64 * ctx.f0.f64));
	// stfs f7,112(r1)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f31,116(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stfs f31,120(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x8261e2b8
	ctx.lr = 0x826A1064;
	sub_8261E2B8(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// addi r7,r1,112
	ctx.r7.s64 = ctx.r1.s64 + 112;
	// lis r6,-1
	ctx.r6.s64 = -65536;
	// lfs f0,15360(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lvlx128 v47,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v47.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v46,v47,0
	_mm_store_si128((__m128i*)ctx.v46.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v47.u32), 0xFF));
	// lvx128 v45,r0,r8
	_mm_store_si128((__m128i*)ctx.v45.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmulfp128 v44,v45,v46
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v44.f32, _mm_mul_ps(_mm_load_ps(ctx.v45.f32), _mm_load_ps(ctx.v46.f32)));
	// stvx128 v44,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v44.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f5,116(r1)
	ctx.fpscr.disableFlushModeUnconditional();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f5.f64 = double(temp.f32);
	// lfs f6,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f6.f64 = double(temp.f32);
	// fctidz f3,f6
	ctx.f3.s64 = (ctx.f6.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f6.f64));
	// fctidz f4,f5
	ctx.f4.s64 = (ctx.f5.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f5.f64));
	// stfd f4,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f4.u64);
	// stfd f3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f3.u64);
	// lbz r5,87(r1)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// lfs f2,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f2.f64 = double(temp.f32);
	// lbz r11,95(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// fctidz f1,f2
	ctx.f1.s64 = (ctx.f2.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f2.f64));
	// stfd f1,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f1.u64);
	// lbz r10,95(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// rlwimi r6,r10,8,16,23
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFF00) | (ctx.r6.u64 & 0xFFFFFFFFFFFF00FF);
	// or r9,r6,r11
	ctx.r9.u64 = ctx.r6.u64 | ctx.r11.u64;
	// rlwinm r8,r9,8,0,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r8,r5
	ctx.r31.u64 = ctx.r8.u64 | ctx.r5.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826A10E0;
	sub_821F9FB8(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r7,-26932
	ctx.r4.s64 = ctx.r7.s64 + -26932;
	// bl 0x825ee0e0
	ctx.lr = 0x826A10F4;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A1110"))) PPC_WEAK_FUNC(sub_826A1110);
PPC_FUNC_IMPL(__imp__sub_826A1110) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A113C;
	sub_822A3998(ctx, base);
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// ori r7,r10,39356
	ctx.r7.u64 = ctx.r10.u64 | 39356;
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// lfs f31,7444(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 7444);
	ctx.f31.f64 = double(temp.f32);
	// addi r10,r11,64
	ctx.r10.s64 = ctx.r11.s64 + 64;
	// lwzx r6,r31,r7
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// lis r11,0
	ctx.r11.s64 = 0;
	// stfs f31,96(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f31,100(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// ori r7,r11,39260
	ctx.r7.u64 = ctx.r11.u64 | 39260;
	// stfs f31,104(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// lwzx r11,r31,r7
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// bne cr6,0x826a11a0
	if (!ctx.cr6.eq) goto loc_826A11A0;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r8,1568
	ctx.r8.s64 = 1568;
	// add r5,r11,r9
	ctx.r5.u64 = ctx.r11.u64 + ctx.r9.u64;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// rlwinm r11,r5,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 4) & 0xFFFFFFF0;
	// add r4,r11,r10
	ctx.r4.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lvx128 v63,r4,r8
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a11bc
	goto loc_826A11BC;
loc_826A11A0:
	// addi r11,r11,33
	ctx.r11.s64 = ctx.r11.s64 + 33;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r6,r11,r9
	ctx.r6.u64 = ctx.r11.u64 + ctx.r9.u64;
	// rlwinm r5,r6,4,0,27
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// lvx128 v62,r5,r10
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v62,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826A11BC:
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8261e1a0
	ctx.lr = 0x826A11C4;
	sub_8261E1A0(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// addi r8,r1,96
	ctx.r8.s64 = ctx.r1.s64 + 96;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// lfs f0,31016(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 31016);
	ctx.f0.f64 = double(temp.f32);
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r30,r7,-21664
	ctx.r30.s64 = ctx.r7.s64 + -21664;
	// lvlx128 v61,r0,r10
	temp.u32 = ctx.r10.u32;
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v60,v61,0
	_mm_store_si128((__m128i*)ctx.v60.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v61.u32), 0xFF));
	// lvx128 v59,r0,r9
	_mm_store_si128((__m128i*)ctx.v59.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// vmulfp128 v58,v59,v60
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v58.f32, _mm_mul_ps(_mm_load_ps(ctx.v59.f32), _mm_load_ps(ctx.v60.f32)));
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// stvx128 v58,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v58.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821f9fb8
	ctx.lr = 0x826A1208;
	sub_821F9FB8(ctx, base);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lfs f0,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f0.f64 = double(temp.f32);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// addi r4,r6,-26880
	ctx.r4.s64 = ctx.r6.s64 + -26880;
	// stfd f13,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f13.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A1228;
	sub_825EE0E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1234;
	sub_821F9FB8(ctx, base);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lfs f12,100(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// fctiwz f11,f12
	ctx.f11.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f11.u64);
	// addi r4,r5,-26896
	ctx.r4.s64 = ctx.r5.s64 + -26896;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A1254;
	sub_825EE0E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1260;
	sub_821F9FB8(ctx, base);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lfs f10,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f10.f64 = double(temp.f32);
	// fctiwz f9,f10
	ctx.f9.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f9.u64);
	// addi r4,r4,-26912
	ctx.r4.s64 = ctx.r4.s64 + -26912;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A1280;
	sub_825EE0E0(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f8,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f8.f64 = double(temp.f32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lfs f0,11360(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f7,f8,f0
	ctx.f7.f64 = double(float(ctx.f8.f64 * ctx.f0.f64));
	// stfs f7,112(r1)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// stfs f31,116(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stfs f31,120(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// bl 0x8261e2b8
	ctx.lr = 0x826A12A4;
	sub_8261E2B8(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// addi r8,r1,112
	ctx.r8.s64 = ctx.r1.s64 + 112;
	// addi r7,r1,112
	ctx.r7.s64 = ctx.r1.s64 + 112;
	// lis r6,-1
	ctx.r6.s64 = -65536;
	// lfs f0,15360(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lvlx128 v57,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v57.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v56,v57,0
	_mm_store_si128((__m128i*)ctx.v56.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v57.u32), 0xFF));
	// lvx128 v55,r0,r8
	_mm_store_si128((__m128i*)ctx.v55.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmulfp128 v54,v55,v56
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v54.f32, _mm_mul_ps(_mm_load_ps(ctx.v55.f32), _mm_load_ps(ctx.v56.f32)));
	// stvx128 v54,r0,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v54.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f5,116(r1)
	ctx.fpscr.disableFlushModeUnconditional();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f5.f64 = double(temp.f32);
	// lfs f6,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f6.f64 = double(temp.f32);
	// fctidz f3,f6
	ctx.f3.s64 = (ctx.f6.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f6.f64));
	// fctidz f4,f5
	ctx.f4.s64 = (ctx.f5.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f5.f64));
	// stfd f4,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f4.u64);
	// stfd f3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f3.u64);
	// lbz r5,87(r1)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r1.u32 + 87);
	// lfs f2,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f2.f64 = double(temp.f32);
	// lbz r11,95(r1)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// fctidz f1,f2
	ctx.f1.s64 = (ctx.f2.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f2.f64));
	// stfd f1,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f1.u64);
	// lbz r10,95(r1)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// rlwimi r6,r10,8,16,23
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r10.u32, 8) & 0xFF00) | (ctx.r6.u64 & 0xFFFFFFFFFFFF00FF);
	// or r9,r6,r11
	ctx.r9.u64 = ctx.r6.u64 | ctx.r11.u64;
	// rlwinm r8,r9,8,0,23
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r8,r5
	ctx.r31.u64 = ctx.r8.u64 | ctx.r5.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826A1320;
	sub_821F9FB8(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r7,-26932
	ctx.r4.s64 = ctx.r7.s64 + -26932;
	// bl 0x825ee0e0
	ctx.lr = 0x826A1334;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A1350"))) PPC_WEAK_FUNC(sub_826A1350);
PPC_FUNC_IMPL(__imp__sub_826A1350) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addis r11,r3,1
	ctx.r11.s64 = ctx.r3.s64 + 65536;
	// addi r11,r11,-7548
	ctx.r11.s64 = ctx.r11.s64 + -7548;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addic. r10,r10,-1
	ctx.xer.ca = ctx.r10.u32 > 0;
	ctx.r10.s64 = ctx.r10.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// bne 0x826a13b4
	if (!ctx.cr0.eq) goto loc_826A13B4;
	// li r10,-1
	ctx.r10.s64 = -1;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// stw r10,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r10.u32);
	// addi r3,r9,-26864
	ctx.r3.s64 = ctx.r9.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826A1388;
	sub_821FA230(ctx, base);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// lwz r11,-10236(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -10236);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r4,r11,4
	ctx.r4.s64 = ctx.r11.s64 + 4;
	// bne cr6,0x826a13a4
	if (!ctx.cr6.eq) goto loc_826A13A4;
	// li r4,0
	ctx.r4.s64 = 0;
loc_826A13A4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,348(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 348);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A13B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A13B4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A13C4"))) PPC_WEAK_FUNC(sub_826A13C4);
PPC_FUNC_IMPL(__imp__sub_826A13C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A13C8"))) PPC_WEAK_FUNC(sub_826A13C8);
PPC_FUNC_IMPL(__imp__sub_826A13C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A13F0;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r8,0
	ctx.r8.s64 = 0;
	// ori r7,r9,57692
	ctx.r7.u64 = ctx.r9.u64 | 57692;
	// ori r6,r8,57696
	ctx.r6.u64 = ctx.r8.u64 | 57696;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r5,r31,r7
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// lwzx r4,r31,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r6.u32);
	// bl 0x82393118
	ctx.lr = 0x826A1418;
	sub_82393118(ctx, base);
	// lis r5,-32121
	ctx.r5.s64 = -2105081856;
	// lis r4,-32254
	ctx.r4.s64 = -2113798144;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r4,r4,-21664
	ctx.r4.s64 = ctx.r4.s64 + -21664;
	// lwz r3,-10236(r5)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r5.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1430;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-26844
	ctx.r4.s64 = ctx.r11.s64 + -26844;
	// bl 0x825ee120
	ctx.lr = 0x826A1444;
	sub_825EE120(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r7,80(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r9,5
	ctx.r9.s64 = 5;
	// ori r8,r10,57988
	ctx.r8.u64 = ctx.r10.u64 | 57988;
	// sth r7,16(r30)
	PPC_STORE_U16(ctx.r30.u32 + 16, ctx.r7.u16);
	// stwx r9,r31,r8
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, ctx.r9.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A1474"))) PPC_WEAK_FUNC(sub_826A1474);
PPC_FUNC_IMPL(__imp__sub_826A1474) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A1478"))) PPC_WEAK_FUNC(sub_826A1478);
PPC_FUNC_IMPL(__imp__sub_826A1478) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A1480;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A1498;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addis r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 65536;
	// addi r31,r31,-7840
	ctx.r31.s64 = ctx.r31.s64 + -7840;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x823931c0
	ctx.lr = 0x826A14B4;
	sub_823931C0(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x826a14d0
	if (ctx.cr6.eq) goto loc_826A14D0;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// li r28,64
	ctx.r28.s64 = 64;
	// bne cr6,0x826a14d4
	if (!ctx.cr6.eq) goto loc_826A14D4;
loc_826A14D0:
	// li r28,16
	ctx.r28.s64 = 16;
loc_826A14D4:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826A14E0;
	sub_821FA230(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r31,0
	ctx.r31.s64 = 0;
loc_826A14E8:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A14F4;
	sub_8268DCB0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a1528
	if (ctx.cr6.eq) goto loc_826A1528;
	// cmpw cr6,r31,r29
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r29.s32, ctx.xer);
	// bgt cr6,0x826a1518
	if (ctx.cr6.gt) goto loc_826A1518;
	// cmpw cr6,r31,r28
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r28.s32, ctx.xer);
	// bge cr6,0x826a1518
	if (!ctx.cr6.lt) goto loc_826A1518;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// b 0x826a1520
	goto loc_826A1520;
loc_826A1518:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
loc_826A1520:
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A1528;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A1528:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,64
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 64, ctx.xer);
	// blt cr6,0x826a14e8
	if (ctx.cr6.lt) goto loc_826A14E8;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A1548;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpw cr6,r4,r29
	ctx.cr6.compare<int32_t>(ctx.r4.s32, ctx.r29.s32, ctx.xer);
	// bgt cr6,0x826a155c
	if (ctx.cr6.gt) goto loc_826A155C;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// bge cr6,0x826a1560
	if (!ctx.cr6.lt) goto loc_826A1560;
loc_826A155C:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
loc_826A1560:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A1568;
	sub_8268DCB0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A1570"))) PPC_WEAK_FUNC(sub_826A1570);
PPC_FUNC_IMPL(__imp__sub_826A1570) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A1578;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// addis r30,r29,1
	ctx.r30.s64 = ctx.r29.s64 + 65536;
	// li r27,0
	ctx.r27.s64 = 0;
	// addi r30,r30,-7840
	ctx.r30.s64 = ctx.r30.s64 + -7840;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bge cr6,0x826a15a0
	if (!ctx.cr6.lt) goto loc_826A15A0;
	// stw r27,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r27.u32);
loc_826A15A0:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A15B4;
	sub_821F9FB8(ctx, base);
	// lwz r28,56(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// bne cr6,0x826a15f8
	if (!ctx.cr6.eq) goto loc_826A15F8;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-26708
	ctx.r4.s64 = ctx.r11.s64 + -26708;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A15D4;
	sub_825EE0E0(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r5,0(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r4,r10,-26844
	ctx.r4.s64 = ctx.r10.s64 + -26844;
	// bl 0x825ee0e0
	ctx.lr = 0x826A15E8;
	sub_825EE0E0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a1478
	ctx.lr = 0x826A15F0;
	sub_826A1478(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A15F8:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A1608;
	sub_822A3998(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// ori r8,r10,57692
	ctx.r8.u64 = ctx.r10.u64 | 57692;
	// lwz r10,132(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// lwzx r11,r29,r8
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r8.u32);
	// addi r3,r10,64
	ctx.r3.s64 = ctx.r10.s64 + 64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bge cr6,0x826a162c
	if (!ctx.cr6.lt) goto loc_826A162C;
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
loc_826A162C:
	// mr r5,r11
	ctx.r5.u64 = ctx.r11.u64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x82393118
	ctx.lr = 0x826A1638;
	sub_82393118(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r11,-26708
	ctx.r4.s64 = ctx.r11.s64 + -26708;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A1650;
	sub_825EE0E0(ctx, base);
	// lhz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r31.u32 + 16);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r4,r10,-26844
	ctx.r4.s64 = ctx.r10.s64 + -26844;
	// extsh r5,r9
	ctx.r5.s64 = ctx.r9.s16;
	// bl 0x825ee0e0
	ctx.lr = 0x826A1668;
	sub_825EE0E0(ctx, base);
	// lhz r8,16(r31)
	ctx.r8.u64 = PPC_LOAD_U16(ctx.r31.u32 + 16);
	// cmplwi cr6,r8,65535
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 65535, ctx.xer);
	// bne cr6,0x826a178c
	if (!ctx.cr6.eq) goto loc_826A178C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lis r10,0
	ctx.r10.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// rlwinm r11,r11,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ori r9,r10,39188
	ctx.r9.u64 = ctx.r10.u64 | 39188;
	// add r8,r11,r29
	ctx.r8.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lfsx f1,r8,r9
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8213e850
	ctx.lr = 0x826A1694;
	sub_8213E850(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r3,r31,2
	ctx.r3.s64 = ctx.r31.s64 + 2;
	// addi r7,r11,4899
	ctx.r7.s64 = ctx.r11.s64 + 4899;
	// rlwinm r6,r7,3,0,28
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 3) & 0xFFFFFFF8;
	// lfsx f1,r6,r29
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r29.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8213e850
	ctx.lr = 0x826A16AC;
	sub_8213E850(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lis r5,0
	ctx.r5.s64 = 0;
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// rlwinm r11,r11,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFFFFF8;
	// ori r4,r5,39148
	ctx.r4.u64 = ctx.r5.u64 | 39148;
	// add r10,r11,r29
	ctx.r10.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lfsx f1,r10,r4
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r4.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8213e850
	ctx.lr = 0x826A16CC;
	sub_8213E850(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r3,r31,6
	ctx.r3.s64 = ctx.r31.s64 + 6;
	// addi r9,r11,4894
	ctx.r9.s64 = ctx.r11.s64 + 4894;
	// rlwinm r8,r9,3,0,28
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 3) & 0xFFFFFFF8;
	// lfsx f1,r8,r29
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r29.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8213e850
	ctx.lr = 0x826A16E4;
	sub_8213E850(ctx, base);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// stb r27,18(r31)
	PPC_STORE_U8(ctx.r31.u32 + 18, ctx.r27.u8);
	// addi r3,r31,12
	ctx.r3.s64 = ctx.r31.s64 + 12;
	// lfs f1,3796(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3796);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x8213e850
	ctx.lr = 0x826A16F8;
	sub_8213E850(ctx, base);
	// lwz r6,8(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// addi r11,r31,8
	ctx.r11.s64 = ctx.r31.s64 + 8;
	// oris r5,r6,65280
	ctx.r5.u64 = ctx.r6.u64 | 4278190080;
	// rotlwi r4,r5,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r5.u32, 0);
	// stw r5,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r5.u32);
	// oris r3,r4,255
	ctx.r3.u64 = ctx.r4.u64 | 16711680;
	// rotlwi r11,r3,0
	ctx.r11.u64 = __builtin_rotateleft32(ctx.r3.u32, 0);
	// stw r3,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r3.u32);
	// ori r10,r11,65280
	ctx.r10.u64 = ctx.r11.u64 | 65280;
	// rotlwi r9,r10,0
	ctx.r9.u64 = __builtin_rotateleft32(ctx.r10.u32, 0);
	// stw r10,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r10.u32);
	// ori r8,r9,255
	ctx.r8.u64 = ctx.r9.u64 | 255;
	// stw r8,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r8.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,4
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 4, ctx.xer);
	// bgt cr6,0x826a178c
	if (ctx.cr6.gt) goto loc_826A178C;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,5968
	ctx.r12.s64 = ctx.r12.s64 + 5968;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826A1764;
	case 1:
		goto loc_826A1770;
	case 2:
		goto loc_826A177C;
	case 3:
		goto loc_826A177C;
	case 4:
		goto loc_826A177C;
	default:
		__builtin_unreachable();
	}
	// lwz r19,5988(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 5988);
	// lwz r19,6000(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6000);
	// lwz r19,6012(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6012);
	// lwz r19,6012(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6012);
	// lwz r19,6012(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6012);
loc_826A1764:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lfs f1,-29924(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -29924);
	ctx.f1.f64 = double(temp.f32);
	// b 0x826a1784
	goto loc_826A1784;
loc_826A1770:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lfs f1,-13300(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -13300);
	ctx.f1.f64 = double(temp.f32);
	// b 0x826a1784
	goto loc_826A1784;
loc_826A177C:
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// lfs f1,-29484(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -29484);
	ctx.f1.f64 = double(temp.f32);
loc_826A1784:
	// addi r3,r31,14
	ctx.r3.s64 = ctx.r31.s64 + 14;
	// bl 0x8213e850
	ctx.lr = 0x826A178C;
	sub_8213E850(ctx, base);
loc_826A178C:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,5
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 5, ctx.xer);
	// bgt cr6,0x826a182c
	if (ctx.cr6.gt) goto loc_826A182C;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,6064
	ctx.r12.s64 = ctx.r12.s64 + 6064;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826A17C8;
	case 1:
		goto loc_826A17D4;
	case 2:
		goto loc_826A17E0;
	case 3:
		goto loc_826A17EC;
	case 4:
		goto loc_826A17F8;
	case 5:
		goto loc_826A1804;
	default:
		__builtin_unreachable();
	}
	// lwz r19,6088(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6088);
	// lwz r19,6100(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6100);
	// lwz r19,6112(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6112);
	// lwz r19,6124(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6124);
	// lwz r19,6136(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6136);
	// lwz r19,6148(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 6148);
loc_826A17C8:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26724
	ctx.r4.s64 = ctx.r10.s64 + -26724;
	// b 0x826a180c
	goto loc_826A180C;
loc_826A17D4:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26740
	ctx.r4.s64 = ctx.r10.s64 + -26740;
	// b 0x826a180c
	goto loc_826A180C;
loc_826A17E0:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26756
	ctx.r4.s64 = ctx.r10.s64 + -26756;
	// b 0x826a180c
	goto loc_826A180C;
loc_826A17EC:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26772
	ctx.r4.s64 = ctx.r10.s64 + -26772;
	// b 0x826a180c
	goto loc_826A180C;
loc_826A17F8:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26788
	ctx.r4.s64 = ctx.r10.s64 + -26788;
	// b 0x826a180c
	goto loc_826A180C;
loc_826A1804:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26808
	ctx.r4.s64 = ctx.r10.s64 + -26808;
loc_826A180C:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r3,-10244(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// bl 0x82218310
	ctx.lr = 0x826A1818;
	sub_82218310(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r9,-26828
	ctx.r4.s64 = ctx.r9.s64 + -26828;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x825ee2d8
	ctx.lr = 0x826A182C;
	sub_825EE2D8(ctx, base);
loc_826A182C:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A1838"))) PPC_WEAK_FUNC(sub_826A1838);
PPC_FUNC_IMPL(__imp__sub_826A1838) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A1840;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// addi r30,r11,-21664
	ctx.r30.s64 = ctx.r11.s64 + -21664;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1860;
	sub_821F9FB8(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,1072
	ctx.r4.s64 = ctx.r11.s64 + 1072;
	// bl 0x825ee0e0
	ctx.lr = 0x826A1874;
	sub_825EE0E0(ctx, base);
	// lis r10,-32119
	ctx.r10.s64 = -2104950784;
	// lwz r3,-8256(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8256);
	// lwz r9,1660(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1660);
	// cmpwi cr6,r9,1
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 1, ctx.xer);
	// ble cr6,0x826a18c0
	if (!ctx.cr6.gt) goto loc_826A18C0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1894;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-26676
	ctx.r4.s64 = ctx.r11.s64 + -26676;
	// bl 0x825ee0e0
	ctx.lr = 0x826A18A8;
	sub_825EE0E0(ctx, base);
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// li r4,34
	ctx.r4.s64 = 34;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213338
	ctx.lr = 0x826A18B8;
	sub_82213338(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A18C0:
	// bl 0x8236dab8
	ctx.lr = 0x826A18C4;
	sub_8236DAB8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// blt cr6,0x826a1928
	if (ctx.cr6.lt) goto loc_826A1928;
	// lis r11,4194
	ctx.r11.s64 = 274857984;
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// ori r8,r11,19923
	ctx.r8.u64 = ctx.r11.u64 | 19923;
	// li r7,1000
	ctx.r7.s64 = 1000;
	// mulhw r6,r9,r8
	ctx.r6.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r8.s32)) >> 32;
	// srawi r11,r6,6
	ctx.xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3F) != 0);
	ctx.r11.s64 = ctx.r6.s32 >> 6;
	// divw r4,r3,r7
	ctx.r4.s32 = ctx.r3.s32 / ctx.r7.s32;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0x1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// add r5,r11,r10
	ctx.r5.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulli r11,r5,1000
	ctx.r11.s64 = ctx.r5.s64 * 1000;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - ctx.r11.s64;
	// bl 0x8269d108
	ctx.lr = 0x826A1900;
	sub_8269D108(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A190C;
	sub_821F9FB8(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r10,-26676
	ctx.r4.s64 = ctx.r10.s64 + -26676;
	// bl 0x825ee0e0
	ctx.lr = 0x826A1920;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A1928:
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r4,34
	ctx.r4.s64 = 34;
	// addi r5,r10,-26688
	ctx.r5.s64 = ctx.r10.s64 + -26688;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213b80
	ctx.lr = 0x826A1940;
	sub_82213B80(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A194C;
	sub_821F9FB8(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,-1
	ctx.r5.s64 = -1;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r9,-26676
	ctx.r4.s64 = ctx.r9.s64 + -26676;
	// bl 0x825ee0e0
	ctx.lr = 0x826A1960;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A1968"))) PPC_WEAK_FUNC(sub_826A1968);
PPC_FUNC_IMPL(__imp__sub_826A1968) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A1970;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826A1984;
	sub_821FA230(ctx, base);
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// lis r28,-32119
	ctx.r28.s64 = -2104950784;
	// addi r29,r29,-7840
	ctx.r29.s64 = ctx.r29.s64 + -7840;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// bl 0x8236da50
	ctx.lr = 0x826A19A0;
	sub_8236DA50(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r4,r10,-26608
	ctx.r4.s64 = ctx.r10.s64 + -26608;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A19B8;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a1b1c
	if (ctx.cr6.eq) goto loc_826A1B1C;
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,101
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 101, ctx.xer);
	// bne cr6,0x826a1b1c
	if (!ctx.cr6.eq) goto loc_826A1B1C;
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r26,-32121
	ctx.r26.s64 = -2105081856;
	// ori r30,r11,57692
	ctx.r30.u64 = ctx.r11.u64 | 57692;
	// cmpwi cr6,r27,1
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 1, ctx.xer);
	// ble cr6,0x826a1a10
	if (!ctx.cr6.gt) goto loc_826A1A10;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r5,r31,r30
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r30.u32);
	// bl 0x8236daa0
	ctx.lr = 0x826A19F0;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a1a10
	if (ctx.cr6.eq) goto loc_826A1A10;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26624
	ctx.r3.s64 = ctx.r11.s64 + -26624;
	// bl 0x821fa230
	ctx.lr = 0x826A1A08;
	sub_821FA230(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x826a1ae8
	goto loc_826A1AE8;
loc_826A1A10:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A1A20;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwzx r5,r31,r30
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r30.u32);
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// bl 0x82393118
	ctx.lr = 0x826A1A38;
	sub_82393118(ctx, base);
	// addis r10,r31,1
	ctx.r10.s64 = ctx.r31.s64 + 65536;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r10,r10,-7864
	ctx.r10.s64 = ctx.r10.s64 + -7864;
	// li r9,5
	ctx.r9.s64 = 5;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
loc_826A1A4C:
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addi r11,r11,4
	ctx.r11.s64 = ctx.r11.s64 + 4;
	// stw r9,0(r10)
	PPC_STORE_U32(ctx.r10.u32 + 0, ctx.r9.u32);
	// addi r10,r10,4
	ctx.r10.s64 = ctx.r10.s64 + 4;
	// bdnz 0x826a1a4c
	--ctx.ctr.u64;
	if (ctx.ctr.u32 != 0) goto loc_826A1A4C;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,57688
	ctx.r10.u64 = ctx.r11.u64 | 57688;
	// lhzx r9,r31,r10
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r31.u32 + ctx.r10.u32);
	// extsh r10,r9
	ctx.r10.s64 = ctx.r9.s16;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// blt cr6,0x826a1ac0
	if (ctx.cr6.lt) goto loc_826A1AC0;
	// lis r11,4194
	ctx.r11.s64 = 274857984;
	// mr r9,r10
	ctx.r9.u64 = ctx.r10.u64;
	// ori r8,r11,19923
	ctx.r8.u64 = ctx.r11.u64 | 19923;
	// li r7,1000
	ctx.r7.s64 = 1000;
	// mulhw r6,r9,r8
	ctx.r6.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r8.s32)) >> 32;
	// srawi r11,r6,6
	ctx.xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0x3F) != 0);
	ctx.r11.s64 = ctx.r6.s32 >> 6;
	// divw r4,r10,r7
	ctx.r4.s32 = ctx.r10.s32 / ctx.r7.s32;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r5,r11,r10
	ctx.r5.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulli r11,r5,1000
	ctx.r11.s64 = ctx.r5.s64 * 1000;
	// subf r5,r11,r9
	ctx.r5.s64 = ctx.r9.s64 - ctx.r11.s64;
	// bl 0x8269d108
	ctx.lr = 0x826A1AAC;
	sub_8269D108(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-26640
	ctx.r3.s64 = ctx.r10.s64 + -26640;
	// bl 0x821fa230
	ctx.lr = 0x826A1AB8;
	sub_821FA230(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x826a1ae8
	goto loc_826A1AE8;
loc_826A1AC0:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26660
	ctx.r3.s64 = ctx.r11.s64 + -26660;
	// bl 0x821fa230
	ctx.lr = 0x826A1ACC;
	sub_821FA230(ctx, base);
	// lwz r11,-10236(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + -10236);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r4,34
	ctx.r4.s64 = 34;
	// addi r5,r10,-26688
	ctx.r5.s64 = ctx.r10.s64 + -26688;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213b80
	ctx.lr = 0x826A1AE8;
	sub_82213B80(ctx, base);
loc_826A1AE8:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a1b1c
	if (ctx.cr6.eq) goto loc_826A1B1C;
	// lwz r11,-10236(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + -10236);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A1B0C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826a1b20
	if (ctx.cr6.eq) goto loc_826A1B20;
loc_826A1B1C:
	// li r3,0
	ctx.r3.s64 = 0;
loc_826A1B20:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A1B28"))) PPC_WEAK_FUNC(sub_826A1B28);
PPC_FUNC_IMPL(__imp__sub_826A1B28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e4
	ctx.lr = 0x826A1B30;
	__savegprlr_23(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r23,r4
	ctx.r23.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A1B4C;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addis r30,r25,1
	ctx.r30.s64 = ctx.r25.s64 + 65536;
	// addi r30,r30,-7840
	ctx.r30.s64 = ctx.r30.s64 + -7840;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x823931c0
	ctx.lr = 0x826A1B68;
	sub_823931C0(ctx, base);
	// li r9,7
	ctx.r9.s64 = 7;
	// li r26,0
	ctx.r26.s64 = 0;
	// stw r9,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r9.u32);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// stw r26,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r26.u32);
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addi r4,r7,-21664
	ctx.r4.s64 = ctx.r7.s64 + -21664;
	// lwz r3,-10236(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1B90;
	sub_821F9FB8(ctx, base);
	// lis r6,-32253
	ctx.r6.s64 = -2113732608;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r31,r6,2612
	ctx.r31.s64 = ctx.r6.s64 + 2612;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r29,56(r5)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r5.u32 + 56);
	// bl 0x821c9790
	ctx.lr = 0x826A1BAC;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A1BBC;
	sub_825ED480(ctx, base);
	// lis r4,-32254
	ctx.r4.s64 = -2113798144;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r4,-12116
	ctx.r3.s64 = ctx.r4.s64 + -12116;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
	// bl 0x821c9790
	ctx.lr = 0x826A1BD4;
	sub_821C9790(ctx, base);
	// li r27,1
	ctx.r27.s64 = 1;
	// stw r3,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// bl 0x825ef9f0
	ctx.lr = 0x826A1BE8;
	sub_825EF9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A1C00;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// ble cr6,0x826a1c88
	if (!ctx.cr6.gt) goto loc_826A1C88;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r29,-32119
	ctx.r29.s64 = -2104950784;
	// addi r24,r11,-26596
	ctx.r24.s64 = ctx.r11.s64 + -26596;
loc_826A1C18:
	// lwz r3,-8256(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -8256);
	// cmpwi cr6,r23,0
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 0, ctx.xer);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// beq cr6,0x826a1c38
	if (ctx.cr6.eq) goto loc_826A1C38;
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// li r6,1
	ctx.r6.s64 = 1;
	// b 0x826a1c40
	goto loc_826A1C40;
loc_826A1C38:
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r26.u32);
	// li r6,0
	ctx.r6.s64 = 0;
loc_826A1C40:
	// bl 0x8236da38
	ctx.lr = 0x826A1C44;
	sub_8236DA38(ctx, base);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x825ef9f0
	ctx.lr = 0x826A1C4C;
	sub_825EF9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A1C60;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// bl 0x825ef9f0
	ctx.lr = 0x826A1C64;
	sub_825EF9F0(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r8,44(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 44);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826A1C7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpw cr6,r31,r28
	ctx.cr6.compare<int32_t>(ctx.r31.s32, ctx.r28.s32, ctx.xer);
	// blt cr6,0x826a1c18
	if (ctx.cr6.lt) goto loc_826A1C18;
loc_826A1C88:
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,10
	ctx.r10.s64 = 10;
	// ori r9,r11,57768
	ctx.r9.u64 = ctx.r11.u64 | 57768;
	// stwx r10,r25,r9
	PPC_STORE_U32(ctx.r25.u32 + ctx.r9.u32, ctx.r10.u32);
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A1CA0"))) PPC_WEAK_FUNC(sub_826A1CA0);
PPC_FUNC_IMPL(__imp__sub_826A1CA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A1CA8;
	__savegprlr_26(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r28,0
	ctx.r28.s64 = 0;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
	// lis r29,-32119
	ctx.r29.s64 = -2104950784;
	// addis r30,r26,1
	ctx.r30.s64 = ctx.r26.s64 + 65536;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// addi r30,r30,-7840
	ctx.r30.s64 = ctx.r30.s64 + -7840;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// lwz r3,-8256(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -8256);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x8236daa0
	ctx.lr = 0x826A1CD8;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// lwz r3,-8256(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -8256);
	// li r27,1
	ctx.r27.s64 = 1;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// beq cr6,0x826a1d00
	if (ctx.cr6.eq) goto loc_826A1D00;
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// b 0x826a1d08
	goto loc_826A1D08;
loc_826A1D00:
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// li r6,1
	ctx.r6.s64 = 1;
loc_826A1D08:
	// bl 0x8236da38
	ctx.lr = 0x826A1D0C;
	sub_8236DA38(ctx, base);
	// li r11,7
	ctx.r11.s64 = 7;
	// stw r28,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r28.u32);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// stw r11,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r11.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1D2C;
	sub_821F9FB8(ctx, base);
	// lis r8,-32253
	ctx.r8.s64 = -2113732608;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// addi r30,r8,2612
	ctx.r30.s64 = ctx.r8.s64 + 2612;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r29,56(r7)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r7.u32 + 56);
	// bl 0x821c9790
	ctx.lr = 0x826A1D48;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A1D58;
	sub_825ED480(ctx, base);
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r6,-12116
	ctx.r3.s64 = ctx.r6.s64 + -12116;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r3,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r3.u32);
	// bl 0x821c9790
	ctx.lr = 0x826A1D70;
	sub_821C9790(ctx, base);
	// stw r3,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r3.u32);
	// stw r27,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r27.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x825ef9f0
	ctx.lr = 0x826A1D80;
	sub_825EF9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r5,r1,104
	ctx.r5.s64 = ctx.r1.s64 + 104;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A1D98;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,104
	ctx.r3.s64 = ctx.r1.s64 + 104;
	// bl 0x825ef9f0
	ctx.lr = 0x826A1DA0;
	sub_825EF9F0(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r8,80(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 80);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826A1DB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// bl 0x825ef9f0
	ctx.lr = 0x826A1DB8;
	sub_825EF9F0(ctx, base);
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r7,-26596
	ctx.r4.s64 = ctx.r7.s64 + -26596;
	// lwz r11,44(r6)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 44);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x826A1DD4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,57768
	ctx.r9.u64 = ctx.r10.u64 | 57768;
	// stwx r27,r26,r9
	PPC_STORE_U32(ctx.r26.u32 + ctx.r9.u32, ctx.r27.u32);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A1DE8"))) PPC_WEAK_FUNC(sub_826A1DE8);
PPC_FUNC_IMPL(__imp__sub_826A1DE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r11,-8256(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// lbz r10,248(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 248);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826a1f30
	if (!ctx.cr6.eq) goto loc_826A1F30;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A1E2C;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r8,0
	ctx.r8.s64 = 0;
	// ori r7,r9,57692
	ctx.r7.u64 = ctx.r9.u64 | 57692;
	// ori r6,r8,57696
	ctx.r6.u64 = ctx.r8.u64 | 57696;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r5,r31,r7
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// lwzx r4,r31,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r6.u32);
	// bl 0x82393118
	ctx.lr = 0x826A1E54;
	sub_82393118(ctx, base);
	// lbz r9,8(r3)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r3.u32 + 8);
	// extsw r5,r30
	ctx.r5.s64 = ctx.r30.s32;
	// lwz r8,8(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// std r5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r5.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f8,80(r1)
	ctx.f8.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f7,f8
	ctx.f7.f64 = double(ctx.f8.s64);
	// lfs f0,15364(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 15364);
	ctx.f0.f64 = double(temp.f32);
	// frsp f6,f7
	ctx.f6.f64 = double(float(ctx.f7.f64));
	// lfs f12,11360(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 11360);
	ctx.f12.f64 = double(temp.f32);
	// frsp f9,f13
	ctx.f9.f64 = double(float(ctx.f13.f64));
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// addi r11,r3,8
	ctx.r11.s64 = ctx.r3.s64 + 8;
	// lfs f11,3796(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3796);
	ctx.f11.f64 = double(temp.f32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lfs f13,7444(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 7444);
	ctx.f13.f64 = double(temp.f32);
	// lfs f10,15360(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 15360);
	ctx.f10.f64 = double(temp.f32);
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// fmuls f5,f6,f0
	ctx.f5.f64 = double(float(ctx.f6.f64 * ctx.f0.f64));
	// fmadds f4,f9,f12,f5
	ctx.f4.f64 = double(float(ctx.f9.f64 * ctx.f12.f64 + ctx.f5.f64));
	// fsel f3,f4,f4,f11
	ctx.f3.f64 = ctx.f4.f64 >= 0.0 ? ctx.f4.f64 : ctx.f11.f64;
	// fsubs f2,f3,f13
	ctx.f2.f64 = double(float(ctx.f3.f64 - ctx.f13.f64));
	// fsel f1,f2,f13,f3
	ctx.f1.f64 = ctx.f2.f64 >= 0.0 ? ctx.f13.f64 : ctx.f3.f64;
	// fmuls f13,f1,f10
	ctx.f13.f64 = double(float(ctx.f1.f64 * ctx.f10.f64));
	// fctiwz f12,f13
	ctx.f12.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f12,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f12.u64);
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// clrlwi r6,r7,24
	ctx.r6.u64 = ctx.r7.u32 & 0xFF;
	// rlwimi r8,r6,24,0,7
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r6.u32, 24) & 0xFF000000) | (ctx.r8.u64 & 0xFFFFFFFF00FFFFFF);
	// stw r8,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r8.u32);
	// lbz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 8);
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f11,80(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f10,f11
	ctx.f10.f64 = double(ctx.f11.s64);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// fmuls f31,f9,f0
	ctx.f31.f64 = double(float(ctx.f9.f64 * ctx.f0.f64));
	// bl 0x821f9fb8
	ctx.lr = 0x826A1F08;
	sub_821F9FB8(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r4,r9,-26588
	ctx.r4.s64 = ctx.r9.s64 + -26588;
	// lfs f0,31016(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 31016);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f8,f31,f0
	ctx.f8.f64 = double(float(ctx.f31.f64 * ctx.f0.f64));
	// fctiwz f7,f8
	ctx.f7.s64 = (ctx.f8.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f8.f64));
	// stfd f7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f7.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x825ee0e0
	ctx.lr = 0x826A1F30;
	sub_825EE0E0(ctx, base);
loc_826A1F30:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-32(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A1F4C"))) PPC_WEAK_FUNC(sub_826A1F4C);
PPC_FUNC_IMPL(__imp__sub_826A1F4C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A1F50"))) PPC_WEAK_FUNC(sub_826A1F50);
PPC_FUNC_IMPL(__imp__sub_826A1F50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A1F58;
	__savegprlr_29(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// addi r29,r11,-21664
	ctx.r29.s64 = ctx.r11.s64 + -21664;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1F78;
	sub_821F9FB8(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r10,-26880
	ctx.r4.s64 = ctx.r10.s64 + -26880;
	// bl 0x825ee120
	ctx.lr = 0x826A1F8C;
	sub_825EE120(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1F98;
	sub_821F9FB8(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r5,r1,92
	ctx.r5.s64 = ctx.r1.s64 + 92;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r9,-26896
	ctx.r4.s64 = ctx.r9.s64 + -26896;
	// bl 0x825ee120
	ctx.lr = 0x826A1FAC;
	sub_825EE120(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A1FB8;
	sub_821F9FB8(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r8,-26912
	ctx.r4.s64 = ctx.r8.s64 + -26912;
	// bl 0x825ee120
	ctx.lr = 0x826A1FCC;
	sub_825EE120(ctx, base);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// lwz r5,88(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r4,92(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// extsw r11,r5
	ctx.r11.s64 = ctx.r5.s32;
	// lwz r10,96(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// extsw r9,r4
	ctx.r9.s64 = ctx.r4.s32;
	// lfs f0,11360(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// extsw r8,r10
	ctx.r8.s64 = ctx.r10.s32;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lvlx128 v63,r0,r6
	temp.u32 = ctx.r6.u32;
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f0,80(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r8.u64);
	// vspltw128 v62,v63,0
	_mm_store_si128((__m128i*)ctx.v62.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v63.u32), 0xFF));
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f9,f0
	ctx.f9.f64 = double(ctx.f0.s64);
	// fcfid f11,f12
	ctx.f11.f64 = double(ctx.f12.s64);
	// fcfid f10,f13
	ctx.f10.f64 = double(ctx.f13.s64);
	// frsp f6,f9
	ctx.f6.f64 = double(float(ctx.f9.f64));
	// stfs f6,0(r31)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r31.u32 + 0, temp.u32);
	// frsp f8,f11
	ctx.f8.f64 = double(float(ctx.f11.f64));
	// stfs f8,8(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 8, temp.u32);
	// frsp f7,f10
	ctx.f7.f64 = double(float(ctx.f10.f64));
	// stfs f7,4(r31)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4, temp.u32);
	// lvx128 v61,r0,r31
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmulfp128 v60,v61,v62
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v60.f32, _mm_mul_ps(_mm_load_ps(ctx.v61.f32), _mm_load_ps(ctx.v62.f32)));
	// stvx128 v60,r0,r31
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8261e2b8
	ctx.lr = 0x826A204C;
	sub_8261E2B8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8261e440
	ctx.lr = 0x826A2054;
	sub_8261E440(ctx, base);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lfs f0,3796(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	ctx.cr6.compare(ctx.f1.f64, ctx.f0.f64);
	// beq cr6,0x826a206c
	if (ctx.cr6.eq) goto loc_826A206C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8261e4f8
	ctx.lr = 0x826A206C;
	sub_8261E4F8(ctx, base);
loc_826A206C:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A2074"))) PPC_WEAK_FUNC(sub_826A2074);
PPC_FUNC_IMPL(__imp__sub_826A2074) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A2078"))) PPC_WEAK_FUNC(sub_826A2078);
PPC_FUNC_IMPL(__imp__sub_826A2078) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lfs f0,7444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 7444);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,96(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f0,100(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f0,104(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// bl 0x826a1f50
	ctx.lr = 0x826A20A8;
	sub_826A1F50(ctx, base);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A20B8;
	sub_822A3998(ctx, base);
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r7,0
	ctx.r7.s64 = 0;
	// ori r6,r8,57692
	ctx.r6.u64 = ctx.r8.u64 | 57692;
	// ori r4,r7,57696
	ctx.r4.u64 = ctx.r7.u64 | 57696;
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r5,r31,r6
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r6.u32);
	// lwzx r4,r31,r4
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r4.u32);
	// bl 0x82393118
	ctx.lr = 0x826A20E0;
	sub_82393118(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lbz r8,8(r3)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r3.u32 + 8);
	// lfs f13,100(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f11,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,15360(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// std r8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r8.u64);
	// lfd f8,80(r1)
	ctx.f8.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fmuls f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// lfs f13,15364(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15364);
	ctx.f13.f64 = double(temp.f32);
	// fcfid f7,f8
	ctx.f7.f64 = double(ctx.f8.s64);
	// fmuls f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// fctiwz f6,f10
	ctx.f6.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f6.u64);
	// frsp f5,f7
	ctx.f5.f64 = double(float(ctx.f7.f64));
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fmuls f3,f11,f0
	ctx.f3.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// fctiwz f4,f9
	ctx.f4.s64 = (ctx.f9.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f9.f64));
	// stfd f4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f4.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fmuls f2,f5,f13
	ctx.f2.f64 = double(float(ctx.f5.f64 * ctx.f13.f64));
	// fctiwz f1,f3
	ctx.f1.s64 = (ctx.f3.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f3.f64));
	// stfd f1,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f1.u64);
	// lwz r5,84(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fmuls f0,f2,f0
	ctx.f0.f64 = double(float(ctx.f2.f64 * ctx.f0.f64));
	// fctiwz f13,f0
	ctx.f13.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f13,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f13.u64);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwimi r5,r4,8,16,23
	ctx.r5.u64 = (__builtin_rotateleft32(ctx.r4.u32, 8) & 0xFF00) | (ctx.r5.u64 & 0xFFFFFFFFFFFF00FF);
	// clrlwi r11,r5,16
	ctx.r11.u64 = ctx.r5.u32 & 0xFFFF;
	// rlwimi r7,r11,8,0,23
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r11.u32, 8) & 0xFFFFFF00) | (ctx.r7.u64 & 0xFFFFFFFF000000FF);
	// rlwimi r6,r7,8,0,23
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r7.u32, 8) & 0xFFFFFF00) | (ctx.r6.u64 & 0xFFFFFFFF000000FF);
	// stw r6,8(r3)
	PPC_STORE_U32(ctx.r3.u32 + 8, ctx.r6.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A217C"))) PPC_WEAK_FUNC(sub_826A217C);
PPC_FUNC_IMPL(__imp__sub_826A217C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A2180"))) PPC_WEAK_FUNC(sub_826A2180);
PPC_FUNC_IMPL(__imp__sub_826A2180) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A2188;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// lwz r11,-8256(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// lbz r10,248(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 248);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826a2260
	if (!ctx.cr6.eq) goto loc_826A2260;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A21BC;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r8,0
	ctx.r8.s64 = 0;
	// ori r7,r9,57692
	ctx.r7.u64 = ctx.r9.u64 | 57692;
	// ori r6,r8,57696
	ctx.r6.u64 = ctx.r8.u64 | 57696;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r5,r30,r7
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r7.u32);
	// lwzx r4,r30,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r6.u32);
	// bl 0x82393118
	ctx.lr = 0x826A21E4;
	sub_82393118(ctx, base);
	// lis r5,0
	ctx.r5.s64 = 0;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r11,r5,57668
	ctx.r11.u64 = ctx.r5.u64 | 57668;
	// ori r10,r4,57664
	ctx.r10.u64 = ctx.r4.u64 | 57664;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r9,-28660
	ctx.r4.s64 = ctx.r9.s64 + -28660;
	// stwx r28,r30,r11
	PPC_STORE_U32(ctx.r30.u32 + ctx.r11.u32, ctx.r28.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// stwx r29,r30,r10
	PPC_STORE_U32(ctx.r30.u32 + ctx.r10.u32, ctx.r29.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A2214;
	sub_8268DA78(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lwz r7,8(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// addi r11,r31,8
	ctx.r11.s64 = ctx.r31.s64 + 8;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r6,4(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// srawi r5,r6,16
	ctx.xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFFFF) != 0);
	ctx.r5.s64 = ctx.r6.s32 >> 16;
	// srawi r11,r6,8
	ctx.xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xFF) != 0);
	ctx.r11.s64 = ctx.r6.s32 >> 8;
	// clrlwi r10,r5,24
	ctx.r10.u64 = ctx.r5.u32 & 0xFF;
	// clrlwi r9,r11,24
	ctx.r9.u64 = ctx.r11.u32 & 0xFF;
	// rlwimi r7,r10,16,8,15
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r10.u32, 16) & 0xFF0000) | (ctx.r7.u64 & 0xFFFFFFFFFF00FFFF);
	// rotlwi r8,r7,0
	ctx.r8.u64 = __builtin_rotateleft32(ctx.r7.u32, 0);
	// stw r7,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r7.u32);
	// rlwimi r8,r9,8,16,23
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r9.u32, 8) & 0xFF00) | (ctx.r8.u64 & 0xFFFFFFFFFFFF00FF);
	// rotlwi r7,r8,0
	ctx.r7.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// stw r8,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r8.u32);
	// rlwimi r7,r6,0,24,31
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r6.u32, 0) & 0xFF) | (ctx.r7.u64 & 0xFFFFFFFFFFFFFF00);
	// stw r7,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r7.u32);
	// bl 0x826a1de8
	ctx.lr = 0x826A2260;
	sub_826A1DE8(ctx, base);
loc_826A2260:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A2268"))) PPC_WEAK_FUNC(sub_826A2268);
PPC_FUNC_IMPL(__imp__sub_826A2268) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d8
	ctx.lr = 0x826A2270;
	__savegprlr_20(ctx, base);
	// stwu r1,-352(r1)
	ea = -352 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826A2284;
	sub_821FA230(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r22,-32121
	ctx.r22.s64 = -2105081856;
	// addi r21,r11,-21664
	ctx.r21.s64 = ctx.r11.s64 + -21664;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// lwz r3,-10236(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A22A0;
	sub_821F9FB8(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r24,56(r3)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// li r20,0
	ctx.r20.s64 = 0;
	// ori r9,r10,57696
	ctx.r9.u64 = ctx.r10.u64 | 57696;
	// li r8,7
	ctx.r8.s64 = 7;
	// stw r20,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r20.u32);
	// stw r8,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r8.u32);
	// lwzx r11,r31,r9
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x826a247c
	if (ctx.cr6.lt) goto loc_826A247C;
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// bge cr6,0x826a247c
	if (!ctx.cr6.lt) goto loc_826A247C;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826a2420
	if (ctx.cr6.eq) goto loc_826A2420;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A22EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r9,-26560
	ctx.r4.s64 = ctx.r9.s64 + -26560;
	// bl 0x82203008
	ctx.lr = 0x826A22FC;
	sub_82203008(ctx, base);
	// bl 0x825ef808
	ctx.lr = 0x826A2300;
	sub_825EF808(ctx, base);
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// addi r11,r11,-7764
	ctx.r11.s64 = ctx.r11.s64 + -7764;
	// lwz r8,0(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// subf r10,r3,r8
	ctx.r10.s64 = ctx.r8.s64 - ctx.r3.s64;
	// cmpwi cr6,r8,10
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 10, ctx.xer);
	// bge cr6,0x826a2320
	if (!ctx.cr6.lt) goto loc_826A2320;
	// rotlwi r23,r8,0
	ctx.r23.u64 = __builtin_rotateleft32(ctx.r8.u32, 0);
	// b 0x826a2324
	goto loc_826A2324;
loc_826A2320:
	// li r23,10
	ctx.r23.s64 = 10;
loc_826A2324:
	// cmpwi cr6,r10,10
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 10, ctx.xer);
	// bge cr6,0x826a2350
	if (!ctx.cr6.lt) goto loc_826A2350;
	// lwz r11,-10236(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + -10236);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r4,r10,24
	ctx.r4.s64 = ctx.r10.s64 + 24;
	// addi r5,r9,-26688
	ctx.r5.s64 = ctx.r9.s64 + -26688;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213b80
	ctx.lr = 0x826A2344;
	sub_82213B80(ctx, base);
	// cmpwi cr6,r23,10
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 10, ctx.xer);
	// bne cr6,0x826a2350
	if (!ctx.cr6.eq) goto loc_826A2350;
	// li r23,9
	ctx.r23.s64 = 9;
loc_826A2350:
	// mr r30,r20
	ctx.r30.u64 = ctx.r20.u64;
	// cmpwi cr6,r23,0
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 0, ctx.xer);
	// ble cr6,0x826a2420
	if (!ctx.cr6.gt) goto loc_826A2420;
	// lis r9,4194
	ctx.r9.s64 = 274857984;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lis r26,-32115
	ctx.r26.s64 = -2104688640;
	// li r25,1000
	ctx.r25.s64 = 1000;
	// ori r29,r9,19923
	ctx.r29.u64 = ctx.r9.u64 | 19923;
	// addi r28,r11,9572
	ctx.r28.s64 = ctx.r11.s64 + 9572;
	// addi r27,r10,-26572
	ctx.r27.s64 = ctx.r10.s64 + -26572;
loc_826A237C:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x825ede80
	ctx.lr = 0x826A2390;
	sub_825EDE80(ctx, base);
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// lwz r31,-12040(r26)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r26.u32 + -12040);
	// bl 0x825ef808
	ctx.lr = 0x826A239C;
	sub_825EF808(ctx, base);
	// divw r11,r3,r25
	ctx.r11.s32 = ctx.r3.s32 / ctx.r25.s32;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// addi r11,r11,12
	ctx.r11.s64 = ctx.r11.s64 + 12;
	// rlwinm r10,r11,3,0,28
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lwzx r31,r10,r31
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r31.u32);
	// bl 0x825ef808
	ctx.lr = 0x826A23B4;
	sub_825EF808(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mulhw r8,r9,r29
	ctx.r8.s64 = (int64_t(ctx.r9.s32) * int64_t(ctx.r29.s32)) >> 32;
	// srawi r11,r8,6
	ctx.xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x3F) != 0);
	ctx.r11.s64 = ctx.r8.s32 >> 6;
	// li r4,128
	ctx.r4.s64 = 128;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0x1;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// add r7,r11,r10
	ctx.r7.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulli r6,r7,1000
	ctx.r6.s64 = ctx.r7.s64 * 1000;
	// subf r11,r6,r9
	ctx.r11.s64 = ctx.r9.s64 - ctx.r6.s64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r11,r31
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r31.u32);
	// bl 0x82137a08
	ctx.lr = 0x826A23E8;
	sub_82137A08(ctx, base);
	// li r4,46
	ctx.r4.s64 = 46;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x823db6d0
	ctx.lr = 0x826A23F4;
	sub_823DB6D0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a2400
	if (ctx.cr6.eq) goto loc_826A2400;
	// stb r20,0(r3)
	PPC_STORE_U8(ctx.r3.u32 + 0, ctx.r20.u8);
loc_826A2400:
	// lwz r11,-10236(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + -10236);
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// addi r4,r30,24
	ctx.r4.s64 = ctx.r30.s64 + 24;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213b80
	ctx.lr = 0x826A2414;
	sub_82213B80(ctx, base);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpw cr6,r30,r23
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r23.s32, ctx.xer);
	// blt cr6,0x826a237c
	if (ctx.cr6.lt) goto loc_826A237C;
loc_826A2420:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r31,r11,2612
	ctx.r31.s64 = ctx.r11.s64 + 2612;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821c9790
	ctx.lr = 0x826A2434;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A2444;
	sub_825ED480(ctx, base);
	// li r10,10
	ctx.r10.s64 = 10;
	// lis r9,-32247
	ctx.r9.s64 = -2113339392;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r9,-10964
	ctx.r4.s64 = ctx.r9.s64 + -10964;
	// bl 0x82722678
	ctx.lr = 0x826A245C;
	sub_82722678(ctx, base);
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// lwz r3,-10236(r22)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r22.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A2468;
	sub_821F9FB8(ctx, base);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r8,1072
	ctx.r4.s64 = ctx.r8.s64 + 1072;
	// bl 0x825ee0e0
	ctx.lr = 0x826A247C;
	sub_825EE0E0(ctx, base);
loc_826A247C:
	// addi r1,r1,352
	ctx.r1.s64 = ctx.r1.s64 + 352;
	// b 0x823d9228
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A2484"))) PPC_WEAK_FUNC(sub_826A2484);
PPC_FUNC_IMPL(__imp__sub_826A2484) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A2488"))) PPC_WEAK_FUNC(sub_826A2488);
PPC_FUNC_IMPL(__imp__sub_826A2488) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A2490;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lis r30,-32119
	ctx.r30.s64 = -2104950784;
	// addis r31,r28,1
	ctx.r31.s64 = ctx.r28.s64 + 65536;
	// addi r31,r31,-7840
	ctx.r31.s64 = ctx.r31.s64 + -7840;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8236da50
	ctx.lr = 0x826A24B0;
	sub_8236DA50(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// cmpwi cr6,r3,1
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 1, ctx.xer);
	// ori r29,r11,57692
	ctx.r29.u64 = ctx.r11.u64 | 57692;
	// ble cr6,0x826a24fc
	if (!ctx.cr6.gt) goto loc_826A24FC;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r28,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r29.u32);
	// bl 0x8236daa0
	ctx.lr = 0x826A24D0;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a24fc
	if (ctx.cr6.eq) goto loc_826A24FC;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8236efd8
	ctx.lr = 0x826A24E8;
	sub_8236EFD8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a1838
	ctx.lr = 0x826A24F0;
	sub_826A1838(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826A24FC:
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r28,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r29.u32);
	// bl 0x8236f098
	ctx.lr = 0x826A250C;
	sub_8236F098(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a1838
	ctx.lr = 0x826A2514;
	sub_826A1838(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A2520"))) PPC_WEAK_FUNC(sub_826A2520);
PPC_FUNC_IMPL(__imp__sub_826A2520) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c0
	ctx.lr = 0x826A2528;
	__savegprlr_14(ctx, base);
	// addi r12,r1,-152
	ctx.r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823db9d8
	ctx.lr = 0x826A2530;
	sub_823DB9D8(ctx, base);
	// stwu r1,-992(r1)
	ea = -992 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r18,r3
	ctx.r18.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A2548;
	sub_822A3998(ctx, base);
	// addis r29,r18,1
	ctx.r29.s64 = ctx.r18.s64 + 65536;
	// lwz r30,48(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addi r29,r29,-26188
	ctx.r29.s64 = ctx.r29.s64 + -26188;
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r29.u32);
	// lwz r11,132(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 132);
	// stw r30,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r30.u32);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r25,r11,64
	ctx.r25.s64 = ctx.r11.s64 + 64;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x826a2610
	if (!ctx.cr6.eq) goto loc_826A2610;
	// li r31,0
	ctx.r31.s64 = 0;
loc_826A2574:
	// li r5,-1
	ctx.r5.s64 = -1;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// bl 0x8269d660
	ctx.lr = 0x826A2584;
	sub_8269D660(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,5
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 5, ctx.xer);
	// blt cr6,0x826a2574
	if (ctx.cr6.lt) goto loc_826A2574;
	// lwz r11,12(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826a25a4
	if (!ctx.cr6.eq) goto loc_826A25A4;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A25A4:
	// lwz r3,80(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 80);
	// lwz r31,1016(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1016);
	// bl 0x82360f90
	ctx.lr = 0x826A25B0;
	sub_82360F90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r3,-8256(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// bl 0x8236d850
	ctx.lr = 0x826A25CC;
	sub_8236D850(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-26468
	ctx.r3.s64 = ctx.r9.s64 + -26468;
	// bl 0x821fa230
	ctx.lr = 0x826A25D8;
	sub_821FA230(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// addi r3,r7,-26492
	ctx.r3.s64 = ctx.r7.s64 + -26492;
	// lwz r6,16(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 16);
	// ori r5,r6,16
	ctx.r5.u64 = ctx.r6.u64 | 16;
	// stw r5,16(r8)
	PPC_STORE_U32(ctx.r8.u32 + 16, ctx.r5.u32);
	// bl 0x821fa230
	ctx.lr = 0x826A25F4;
	sub_821FA230(ctx, base);
	// lwz r4,16(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r11,r4,16
	ctx.r11.u64 = ctx.r4.u64 | 16;
	// stw r11,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r11.u32);
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// addi r12,r1,-152
	ctx.r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823dba24
	ctx.lr = 0x826A260C;
	__restfpr_28(ctx, base);
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A2610:
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// ori r9,r11,39352
	ctx.r9.u64 = ctx.r11.u64 | 39352;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-26504
	ctx.r4.s64 = ctx.r10.s64 + -26504;
	// lwzx r3,r18,r9
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r18.u32 + ctx.r9.u32);
	// bl 0x8268da78
	ctx.lr = 0x826A262C;
	sub_8268DA78(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x826a2668
	if (ctx.cr6.lt) goto loc_826A2668;
	// mulli r11,r11,5764
	ctx.r11.s64 = ctx.r11.s64 * 5764;
	// add r11,r11,r18
	ctx.r11.u64 = ctx.r11.u64 + ctx.r18.u64;
	// addi r3,r11,21856
	ctx.r3.s64 = ctx.r11.s64 + 21856;
	// bl 0x8269ca20
	ctx.lr = 0x826A2648;
	sub_8269CA20(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,2
	ctx.r10.s64 = 2;
	// ori r9,r11,57712
	ctx.r9.u64 = ctx.r11.u64 | 57712;
	// stwx r10,r18,r9
	PPC_STORE_U32(ctx.r18.u32 + ctx.r9.u32, ctx.r10.u32);
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// addi r12,r1,-152
	ctx.r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823dba24
	ctx.lr = 0x826A2664;
	__restfpr_28(ctx, base);
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A2668:
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// lis r30,-32244
	ctx.r30.s64 = -2113142784;
	// addi r26,r11,4272
	ctx.r26.s64 = ctx.r11.s64 + 4272;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f31,15360(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 15360);
	ctx.f31.f64 = double(temp.f32);
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// stw r26,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r26.u32);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lis r6,-32131
	ctx.r6.s64 = -2105737216;
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// lis r31,-32244
	ctx.r31.s64 = -2113142784;
	// addi r30,r30,-26512
	ctx.r30.s64 = ctx.r30.s64 + -26512;
	// li r27,0
	ctx.r27.s64 = 0;
	// lis r23,-32255
	ctx.r23.s64 = -2113863680;
	// stw r30,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r30.u32);
	// addi r19,r11,-30140
	ctx.r19.s64 = ctx.r11.s64 + -30140;
	// addi r24,r10,-29924
	ctx.r24.s64 = ctx.r10.s64 + -29924;
	// addi r22,r9,-27624
	ctx.r22.s64 = ctx.r9.s64 + -27624;
	// addi r21,r8,10372
	ctx.r21.s64 = ctx.r8.s64 + 10372;
	// addi r20,r7,-27620
	ctx.r20.s64 = ctx.r7.s64 + -27620;
	// addi r28,r6,30576
	ctx.r28.s64 = ctx.r6.s64 + 30576;
	// addi r17,r5,-26520
	ctx.r17.s64 = ctx.r5.s64 + -26520;
	// addi r16,r4,-26528
	ctx.r16.s64 = ctx.r4.s64 + -26528;
	// addi r15,r3,-26536
	ctx.r15.s64 = ctx.r3.s64 + -26536;
	// addi r14,r31,-26544
	ctx.r14.s64 = ctx.r31.s64 + -26544;
	// b 0x826a26e8
	goto loc_826A26E8;
loc_826A26E4:
	// lwz r29,104(r1)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
loc_826A26E8:
	// addi r11,r27,-1
	ctx.r11.s64 = ctx.r27.s64 + -1;
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// bgt cr6,0x826a2740
	if (ctx.cr6.gt) goto loc_826A2740;
	// addi r11,r27,-1
	ctx.r11.s64 = ctx.r27.s64 + -1;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,10000
	ctx.r12.s64 = ctx.r12.s64 + 10000;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826A2720;
	case 1:
		goto loc_826A2728;
	case 2:
		goto loc_826A2730;
	case 3:
		goto loc_826A2738;
	default:
		__builtin_unreachable();
	}
	// lwz r19,10016(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 10016);
	// lwz r19,10024(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 10024);
	// lwz r19,10032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 10032);
	// lwz r19,10040(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 10040);
loc_826A2720:
	// lwz r5,112(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// b 0x826a2744
	goto loc_826A2744;
loc_826A2728:
	// mr r5,r14
	ctx.r5.u64 = ctx.r14.u64;
	// b 0x826a2744
	goto loc_826A2744;
loc_826A2730:
	// mr r5,r15
	ctx.r5.u64 = ctx.r15.u64;
	// b 0x826a2744
	goto loc_826A2744;
loc_826A2738:
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
	// b 0x826a2744
	goto loc_826A2744;
loc_826A2740:
	// mr r5,r17
	ctx.r5.u64 = ctx.r17.u64;
loc_826A2744:
	// li r4,10
	ctx.r4.s64 = 10;
	// addi r3,r1,88
	ctx.r3.s64 = ctx.r1.s64 + 88;
	// bl 0x82137a08
	ctx.lr = 0x826A2750;
	sub_82137A08(ctx, base);
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x821ca540
	ctx.lr = 0x826A275C;
	sub_821CA540(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// mulli r11,r11,168
	ctx.r11.s64 = ctx.r11.s64 * 168;
	// add r11,r11,r18
	ctx.r11.u64 = ctx.r11.u64 + ctx.r18.u64;
	// addi r7,r1,88
	ctx.r7.s64 = ctx.r1.s64 + 88;
	// li r4,40
	ctx.r4.s64 = 40;
	// addi r3,r1,768
	ctx.r3.s64 = ctx.r1.s64 + 768;
	// addi r6,r11,28
	ctx.r6.s64 = ctx.r11.s64 + 28;
	// bl 0x82137a08
	ctx.lr = 0x826A2780;
	sub_82137A08(ctx, base);
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,768
	ctx.r4.s64 = ctx.r1.s64 + 768;
	// bl 0x821ca6a8
	ctx.lr = 0x826A2798;
	sub_821CA6A8(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// bne cr6,0x826a27b0
	if (!ctx.cr6.eq) goto loc_826A27B0;
	// bl 0x821c9a90
	ctx.lr = 0x826A27AC;
	sub_821C9A90(ctx, base);
	// b 0x826a2a1c
	goto loc_826A2A1C;
loc_826A27B0:
	// bl 0x821c9a90
	ctx.lr = 0x826A27B4;
	sub_821C9A90(ctx, base);
	// li r30,0
	ctx.r30.s64 = 0;
	// stw r24,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r24.u32);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// stw r30,752(r1)
	PPC_STORE_U32(ctx.r1.u32 + 752, ctx.r30.u32);
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// lwz r4,4416(r23)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r23.u32 + 4416);
	// bl 0x821cf7b8
	ctx.lr = 0x826A27D0;
	sub_821CF7B8(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x82392538
	ctx.lr = 0x826A27DC;
	sub_82392538(ctx, base);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A27EC;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0490
	ctx.lr = 0x826A27F8;
	sub_821D0490(ctx, base);
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x826a2a08
	if (!ctx.cr6.gt) goto loc_826A2A08;
loc_826A2804:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x82393118
	ctx.lr = 0x826A2814;
	sub_82393118(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A2828;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0490
	ctx.lr = 0x826A2834;
	sub_821D0490(ctx, base);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A2844;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0490
	ctx.lr = 0x826A2850;
	sub_821D0490(ctx, base);
	// sth r3,16(r31)
	PPC_STORE_U16(ctx.r31.u32 + 16, ctx.r3.u16);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A2864;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0490
	ctx.lr = 0x826A2870;
	sub_821D0490(ctx, base);
	// cntlzw r10,r3
	ctx.r10.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// li r5,80
	ctx.r5.s64 = 80;
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// xori r8,r9,1
	ctx.r8.u64 = ctx.r9.u64 ^ 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// stb r8,19(r31)
	PPC_STORE_U8(ctx.r31.u32 + 19, ctx.r8.u8);
	// bl 0x821cfaa8
	ctx.lr = 0x826A2890;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A289C;
	sub_821D0528(ctx, base);
	// addi r3,r31,14
	ctx.r3.s64 = ctx.r31.s64 + 14;
	// bl 0x8213e850
	ctx.lr = 0x826A28A4;
	sub_8213E850(ctx, base);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A28B4;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A28C0;
	sub_821D0528(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8213e850
	ctx.lr = 0x826A28C8;
	sub_8213E850(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A28D4;
	sub_821D0528(ctx, base);
	// addi r3,r31,2
	ctx.r3.s64 = ctx.r31.s64 + 2;
	// bl 0x8213e850
	ctx.lr = 0x826A28DC;
	sub_8213E850(ctx, base);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A28EC;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A28F8;
	sub_821D0528(ctx, base);
	// addi r3,r31,4
	ctx.r3.s64 = ctx.r31.s64 + 4;
	// bl 0x8213e850
	ctx.lr = 0x826A2900;
	sub_8213E850(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A290C;
	sub_821D0528(ctx, base);
	// addi r3,r31,6
	ctx.r3.s64 = ctx.r31.s64 + 6;
	// bl 0x8213e850
	ctx.lr = 0x826A2914;
	sub_8213E850(ctx, base);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A2924;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A2930;
	sub_821D0528(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = ctx.f1.f64;
	// bl 0x821d0528
	ctx.lr = 0x826A2940;
	sub_821D0528(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	ctx.f29.f64 = ctx.f1.f64;
	// bl 0x821d0528
	ctx.lr = 0x826A2950;
	sub_821D0528(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// fmr f28,f1
	ctx.fpscr.disableFlushMode();
	ctx.f28.f64 = ctx.f1.f64;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A2960;
	sub_821D0528(ctx, base);
	// fmuls f0,f29,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f29.f64 * ctx.f31.f64));
	// fmuls f13,f28,f31
	ctx.f13.f64 = double(float(ctx.f28.f64 * ctx.f31.f64));
	// li r5,80
	ctx.r5.s64 = 80;
	// fmuls f12,f1,f31
	ctx.f12.f64 = double(float(ctx.f1.f64 * ctx.f31.f64));
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// fmuls f11,f30,f31
	ctx.f11.f64 = double(float(ctx.f30.f64 * ctx.f31.f64));
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// fctiwz f10,f0
	ctx.f10.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// stfd f10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f10.u64);
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f9,f13
	ctx.f9.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f9.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f8,f12
	ctx.f8.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f8.u64);
	// fctiwz f7,f11
	ctx.f7.s64 = (ctx.f11.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f11.f64));
	// stfd f7,120(r1)
	PPC_STORE_U64(ctx.r1.u32 + 120, ctx.f7.u64);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// rlwimi r10,r11,8,16,23
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r11.u32, 8) & 0xFF00) | (ctx.r10.u64 & 0xFFFFFFFFFFFF00FF);
	// clrlwi r9,r10,16
	ctx.r9.u64 = ctx.r10.u32 & 0xFFFF;
	// rlwimi r7,r9,8,0,23
	ctx.r7.u64 = (__builtin_rotateleft32(ctx.r9.u32, 8) & 0xFFFFFF00) | (ctx.r7.u64 & 0xFFFFFFFF000000FF);
	// rlwimi r6,r7,8,0,23
	ctx.r6.u64 = (__builtin_rotateleft32(ctx.r7.u32, 8) & 0xFFFFFF00) | (ctx.r6.u64 & 0xFFFFFFFF000000FF);
	// stw r6,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r6.u32);
	// bl 0x821cfaa8
	ctx.lr = 0x826A29C4;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0490
	ctx.lr = 0x826A29D0;
	sub_821D0490(ctx, base);
	// stb r3,18(r31)
	PPC_STORE_U8(ctx.r31.u32 + 18, ctx.r3.u8);
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821cfaa8
	ctx.lr = 0x826A29E4;
	sub_821CFAA8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,208
	ctx.r3.s64 = ctx.r1.s64 + 208;
	// bl 0x821d0528
	ctx.lr = 0x826A29F0;
	sub_821D0528(ctx, base);
	// addi r3,r31,12
	ctx.r3.s64 = ctx.r31.s64 + 12;
	// bl 0x8213e850
	ctx.lr = 0x826A29F8;
	sub_8213E850(ctx, base);
	// lwz r7,0(r26)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpw cr6,r30,r7
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r7.s32, ctx.xer);
	// blt cr6,0x826a2804
	if (ctx.cr6.lt) goto loc_826A2804;
loc_826A2A08:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x82392548
	ctx.lr = 0x826A2A10;
	sub_82392548(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x821be610
	ctx.lr = 0x826A2A18;
	sub_821BE610(ctx, base);
	// stw r19,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r19.u32);
loc_826A2A1C:
	// lwz r11,108(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// addi r26,r26,4
	ctx.r26.s64 = ctx.r26.s64 + 4;
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r10,r11,20
	ctx.r10.s64 = ctx.r11.s64 + 20;
	// cmpw cr6,r26,r10
	ctx.cr6.compare<int32_t>(ctx.r26.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x826a26e4
	if (ctx.cr6.lt) goto loc_826A26E4;
	// lwz r31,100(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// lwz r11,12(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826a2a4c
	if (!ctx.cr6.eq) goto loc_826A2A4C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A2A4C:
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 80);
	// lwz r30,1016(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1016);
	// bl 0x82360f90
	ctx.lr = 0x826A2A58;
	sub_82360F90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r3,-8256(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// bl 0x8236d850
	ctx.lr = 0x826A2A74;
	sub_8236D850(ctx, base);
	// lis r9,0
	ctx.r9.s64 = 0;
	// li r8,2
	ctx.r8.s64 = 2;
	// ori r7,r9,57712
	ctx.r7.u64 = ctx.r9.u64 | 57712;
	// stwx r8,r18,r7
	PPC_STORE_U32(ctx.r18.u32 + ctx.r7.u32, ctx.r8.u32);
	// addi r1,r1,992
	ctx.r1.s64 = ctx.r1.s64 + 992;
	// addi r12,r1,-152
	ctx.r12.s64 = ctx.r1.s64 + -152;
	// bl 0x823dba24
	ctx.lr = 0x826A2A90;
	__restfpr_28(ctx, base);
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A2A94"))) PPC_WEAK_FUNC(sub_826A2A94);
PPC_FUNC_IMPL(__imp__sub_826A2A94) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A2A98"))) PPC_WEAK_FUNC(sub_826A2A98);
PPC_FUNC_IMPL(__imp__sub_826A2A98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A2AA0;
	__savegprlr_26(ctx, base);
	// stfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -72, ctx.f30.u64);
	// stfd f31,-64(r1)
	PPC_STORE_U64(ctx.r1.u32 + -64, ctx.f31.u64);
	// stwu r1,-288(r1)
	ea = -288 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A2AC0;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addis r31,r29,1
	ctx.r31.s64 = ctx.r29.s64 + 65536;
	// lis r30,-32119
	ctx.r30.s64 = -2104950784;
	// addi r31,r31,-7840
	ctx.r31.s64 = ctx.r31.s64 + -7840;
	// li r26,0
	ctx.r26.s64 = 0;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addi r27,r11,64
	ctx.r27.s64 = ctx.r11.s64 + 64;
	// bl 0x8236da50
	ctx.lr = 0x826A2AE8;
	sub_8236DA50(ctx, base);
	// lis r9,0
	ctx.r9.s64 = 0;
	// cmpwi cr6,r3,1
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 1, ctx.xer);
	// ori r28,r9,57692
	ctx.r28.u64 = ctx.r9.u64 | 57692;
	// ble cr6,0x826a2b18
	if (!ctx.cr6.gt) goto loc_826A2B18;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r29,r28
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r28.u32);
	// bl 0x8236daa0
	ctx.lr = 0x826A2B08;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a2b18
	if (ctx.cr6.eq) goto loc_826A2B18;
	// li r26,1
	ctx.r26.s64 = 1;
loc_826A2B18:
	// clrlwi r26,r26,24
	ctx.r26.u64 = ctx.r26.u32 & 0xFF;
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// bne cr6,0x826a2b3c
	if (!ctx.cr6.eq) goto loc_826A2B3C;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r29,r28
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r28.u32);
	// bl 0x82393118
	ctx.lr = 0x826A2B34;
	sub_82393118(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// b 0x826a2b54
	goto loc_826A2B54;
loc_826A2B3C:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// rlwinm r11,r11,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r11,r11,r27
	ctx.r11.u64 = ctx.r11.u64 + ctx.r27.u64;
	// addi r31,r11,2144
	ctx.r31.s64 = ctx.r11.s64 + 2144;
loc_826A2B54:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A2B68;
	sub_821F9FB8(ctx, base);
	// lis r9,0
	ctx.r9.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// ori r8,r9,57708
	ctx.r8.u64 = ctx.r9.u64 | 57708;
	// lwzx r11,r29,r8
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r8.u32);
	// cmplwi cr6,r11,7
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 7, ctx.xer);
	// bgt cr6,0x826a2f54
	if (ctx.cr6.gt) goto loc_826A2F54;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,11160
	ctx.r12.s64 = ctx.r12.s64 + 11160;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826A2BB8;
	case 1:
		goto loc_826A2BCC;
	case 2:
		goto loc_826A2CB0;
	case 3:
		goto loc_826A2E08;
	case 4:
		goto loc_826A2F54;
	case 5:
		goto loc_826A2F54;
	case 6:
		goto loc_826A2E98;
	case 7:
		goto loc_826A2F18;
	default:
		__builtin_unreachable();
	}
	// lwz r19,11192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11192);
	// lwz r19,11212(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11212);
	// lwz r19,11440(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11440);
	// lwz r19,11784(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11784);
	// lwz r19,12116(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12116);
	// lwz r19,12116(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12116);
	// lwz r19,11928(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 11928);
	// lwz r19,12056(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12056);
loc_826A2BB8:
	// lhz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 16);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-26428
	ctx.r4.s64 = ctx.r10.s64 + -26428;
	// extsh r5,r11
	ctx.r5.s64 = ctx.r11.s16;
	// b 0x826a2f4c
	goto loc_826A2F4C;
loc_826A2BCC:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lhz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lfs f30,3796(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3796);
	ctx.f30.f64 = double(temp.f32);
	// bne cr6,0x826a2be8
	if (!ctx.cr6.eq) goto loc_826A2BE8;
	// fmr f0,f30
	ctx.f0.f64 = ctx.f30.f64;
	// b 0x826a2c10
	goto loc_826A2C10;
loc_826A2BE8:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
loc_826A2C10:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// li r29,4
	ctx.r29.s64 = 4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// stw r29,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r29.u32);
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// addi r30,r11,-26448
	ctx.r30.s64 = ctx.r11.s64 + -26448;
	// lfs f31,11364(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 11364);
	ctx.f31.f64 = double(temp.f32);
	// li r5,0
	ctx.r5.s64 = 0;
	// fmuls f0,f0,f31
	ctx.f0.f64 = double(float(ctx.f0.f64 * ctx.f31.f64));
	// stfs f0,88(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82203058
	ctx.lr = 0x826A2C44;
	sub_82203058(ctx, base);
	// lhz r11,6(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 6);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a2c58
	if (!ctx.cr6.eq) goto loc_826A2C58;
	// fmr f0,f30
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f30.f64;
	// b 0x826a2c80
	goto loc_826A2C80;
loc_826A2C58:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
loc_826A2C80:
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// fmuls f0,f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f0.f64 * ctx.f31.f64));
	// stfs f0,104(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// stw r29,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r29.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r6,r1,104
	ctx.r6.s64 = ctx.r1.s64 + 104;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82203058
	ctx.lr = 0x826A2CA0;
	sub_82203058(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A2CB0:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lhz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lfs f31,3796(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3796);
	ctx.f31.f64 = double(temp.f32);
	// bne cr6,0x826a2ccc
	if (!ctx.cr6.eq) goto loc_826A2CCC;
	// fmr f0,f31
	ctx.f0.f64 = ctx.f31.f64;
	// b 0x826a2cf4
	goto loc_826A2CF4;
loc_826A2CCC:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
loc_826A2CF4:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// li r29,4
	ctx.r29.s64 = 4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// stw r29,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r29.u32);
	// addi r6,r1,120
	ctx.r6.s64 = ctx.r1.s64 + 120;
	// addi r30,r11,-26448
	ctx.r30.s64 = ctx.r11.s64 + -26448;
	// lfs f30,31016(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 31016);
	ctx.f30.f64 = double(temp.f32);
	// li r5,0
	ctx.r5.s64 = 0;
	// fmuls f0,f0,f30
	ctx.f0.f64 = double(float(ctx.f0.f64 * ctx.f30.f64));
	// stfs f0,120(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x82203058
	ctx.lr = 0x826A2D28;
	sub_82203058(ctx, base);
	// cmplwi cr6,r26,0
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 0, ctx.xer);
	// beq cr6,0x826a2d9c
	if (ctx.cr6.eq) goto loc_826A2D9C;
	// lhz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a2d44
	if (!ctx.cr6.eq) goto loc_826A2D44;
	// fmr f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f31.f64;
	// b 0x826a2d6c
	goto loc_826A2D6C;
loc_826A2D44:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
loc_826A2D6C:
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// fmuls f0,f0,f30
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f0.f64 * ctx.f30.f64));
	// stfs f0,136(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 136, temp.u32);
	// stw r29,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r29.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r6,r1,136
	ctx.r6.s64 = ctx.r1.s64 + 136;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82203058
	ctx.lr = 0x826A2D8C;
	sub_82203058(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A2D9C:
	// lhz r11,2(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 2);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a2db0
	if (!ctx.cr6.eq) goto loc_826A2DB0;
	// fmr f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f31.f64;
	// b 0x826a2dd8
	goto loc_826A2DD8;
loc_826A2DB0:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
loc_826A2DD8:
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// fmuls f0,f0,f30
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f0.f64 * ctx.f30.f64));
	// stfs f0,152(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 152, temp.u32);
	// stw r29,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r29.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r6,r1,152
	ctx.r6.s64 = ctx.r1.s64 + 152;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x82203058
	ctx.lr = 0x826A2DF8;
	sub_82203058(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A2E08:
	// lhz r11,14(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 14);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a2e20
	if (!ctx.cr6.eq) goto loc_826A2E20;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f0,3796(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// b 0x826a2e48
	goto loc_826A2E48;
loc_826A2E20:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
loc_826A2E48:
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// li r5,359
	ctx.r5.s64 = 359;
	// li r4,0
	ctx.r4.s64 = 0;
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r31,56(r28)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x82250268
	ctx.lr = 0x826A2E64;
	sub_82250268(ctx, base);
	// li r11,3
	ctx.r11.s64 = 3;
	// stw r3,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r3.u32);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// stw r11,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r11.u32);
	// addi r6,r1,168
	ctx.r6.s64 = ctx.r1.s64 + 168;
	// addi r4,r10,-26448
	ctx.r4.s64 = ctx.r10.s64 + -26448;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82203058
	ctx.lr = 0x826A2E88;
	sub_82203058(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A2E98:
	// lhz r11,12(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a2eb0
	if (!ctx.cr6.eq) goto loc_826A2EB0;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f13,3796(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 3796);
	ctx.f13.f64 = double(temp.f32);
	// b 0x826a2ed8
	goto loc_826A2ED8;
loc_826A2EB0:
	// rlwinm r10,r11,3,0,13
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFC0000;
	// clrlwi r9,r11,22
	ctx.r9.u64 = ctx.r11.u32 & 0x3FF;
	// rlwinm r11,r11,22,27,31
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 22) & 0x1F;
	// or r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 | ctx.r9.u64;
	// addi r7,r11,112
	ctx.r7.s64 = ctx.r11.s64 + 112;
	// rlwinm r6,r8,13,0,18
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 13) & 0xFFFFE000;
	// rlwinm r5,r7,23,0,8
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 23) & 0xFF800000;
	// or r4,r6,r5
	ctx.r4.u64 = ctx.r6.u64 | ctx.r5.u64;
	// stw r4,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r4.u32);
	// lfs f13,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f13.f64 = double(temp.f32);
loc_826A2ED8:
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// li r10,4
	ctx.r10.s64 = 4;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// stw r10,192(r1)
	PPC_STORE_U32(ctx.r1.u32 + 192, ctx.r10.u32);
	// addi r6,r1,184
	ctx.r6.s64 = ctx.r1.s64 + 184;
	// addi r4,r9,-26448
	ctx.r4.s64 = ctx.r9.s64 + -26448;
	// lfs f0,31016(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 31016);
	ctx.f0.f64 = double(temp.f32);
	// li r5,0
	ctx.r5.s64 = 0;
	// fmuls f0,f13,f0
	ctx.f0.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// stfs f0,184(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 184, temp.u32);
	// bl 0x82203058
	ctx.lr = 0x826A2F08;
	sub_82203058(ctx, base);
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A2F18:
	// lbz r11,18(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 18);
	// li r10,3
	ctx.r10.s64 = 3;
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// stw r10,208(r1)
	PPC_STORE_U32(ctx.r1.u32 + 208, ctx.r10.u32);
	// addi r6,r1,200
	ctx.r6.s64 = ctx.r1.s64 + 200;
	// addi r4,r9,-26448
	ctx.r4.s64 = ctx.r9.s64 + -26448;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r11,200(r1)
	PPC_STORE_U32(ctx.r1.u32 + 200, ctx.r11.u32);
	// bl 0x82203058
	ctx.lr = 0x826A2F40;
	sub_82203058(ctx, base);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r8,1072
	ctx.r4.s64 = ctx.r8.s64 + 1072;
loc_826A2F4C:
	// lwz r3,56(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 56);
	// bl 0x825ee0e0
	ctx.lr = 0x826A2F54;
	sub_825EE0E0(ctx, base);
loc_826A2F54:
	// addi r1,r1,288
	ctx.r1.s64 = ctx.r1.s64 + 288;
	// lfd f30,-72(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -72);
	// lfd f31,-64(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -64);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A2F64"))) PPC_WEAK_FUNC(sub_826A2F64);
PPC_FUNC_IMPL(__imp__sub_826A2F64) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A2F68"))) PPC_WEAK_FUNC(sub_826A2F68);
PPC_FUNC_IMPL(__imp__sub_826A2F68) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e0
	ctx.lr = 0x826A2F70;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addis r26,r31,1
	ctx.r26.s64 = ctx.r31.s64 + 65536;
	// addi r26,r26,-7840
	ctx.r26.s64 = ctx.r26.s64 + -7840;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x826a30c4
	if (ctx.cr6.lt) goto loc_826A30C4;
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// bge cr6,0x826a30c4
	if (!ctx.cr6.lt) goto loc_826A30C4;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A2FA4;
	sub_822A3998(ctx, base);
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// li r30,0
	ctx.r30.s64 = 0;
	// addi r29,r29,-7764
	ctx.r29.s64 = ctx.r29.s64 + -7764;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r9,-26864
	ctx.r3.s64 = ctx.r9.s64 + -26864;
	// stw r30,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r30.u32);
	// addi r27,r11,64
	ctx.r27.s64 = ctx.r11.s64 + 64;
	// bl 0x821fa230
	ctx.lr = 0x826A2FCC;
	sub_821FA230(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r4,0(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// bl 0x823931c0
	ctx.lr = 0x826A2FDC;
	sub_823931C0(ctx, base);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// ble cr6,0x826a306c
	if (!ctx.cr6.gt) goto loc_826A306C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r24,1
	ctx.r24.s64 = 1;
	// addi r22,r11,-28272
	ctx.r22.s64 = ctx.r11.s64 + -28272;
loc_826A2FF4:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A3000;
	sub_8268DCB0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x826a3060
	if (ctx.cr6.eq) goto loc_826A3060;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// lwz r4,0(r26)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82393118
	ctx.lr = 0x826A301C;
	sub_82393118(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lhz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 16);
	// cmplwi cr6,r11,32768
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 32768, ctx.xer);
	// bge cr6,0x826a306c
	if (!ctx.cr6.lt) goto loc_826A306C;
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A303C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a3060
	if (ctx.cr6.eq) goto loc_826A3060;
	// lhz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r31.u32 + 16);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
	// extsh r10,r11
	ctx.r10.s64 = ctx.r11.s16;
	// stw r10,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r10.u32);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r9,r11,1
	ctx.r9.s64 = ctx.r11.s64 + 1;
	// stw r9,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r9.u32);
loc_826A3060:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpw cr6,r30,r25
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r25.s32, ctx.xer);
	// blt cr6,0x826a2ff4
	if (ctx.cr6.lt) goto loc_826A2FF4;
loc_826A306C:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A3080;
	sub_821F9FB8(ctx, base);
	// lis r9,-32253
	ctx.r9.s64 = -2113732608;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// addi r31,r9,2612
	ctx.r31.s64 = ctx.r9.s64 + 2612;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r30,56(r8)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + 56);
	// bl 0x821c9790
	ctx.lr = 0x826A309C;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A30AC;
	sub_825ED480(ctx, base);
	// li r7,10
	ctx.r7.s64 = 10;
	// lis r6,-32247
	ctx.r6.s64 = -2113339392;
	// stw r7,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r7.u32);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r6,-10964
	ctx.r4.s64 = ctx.r6.s64 + -10964;
	// bl 0x82722678
	ctx.lr = 0x826A30C4;
	sub_82722678(ctx, base);
loc_826A30C4:
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A30CC"))) PPC_WEAK_FUNC(sub_826A30CC);
PPC_FUNC_IMPL(__imp__sub_826A30CC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A30D0"))) PPC_WEAK_FUNC(sub_826A30D0);
PPC_FUNC_IMPL(__imp__sub_826A30D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A30D8;
	__savegprlr_29(ctx, base);
	// stfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, ctx.f29.u64);
	// stfd f30,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, ctx.f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, ctx.f31.u64);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// lis r10,-32120
	ctx.r10.s64 = -2105016320;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-26412
	ctx.r3.s64 = ctx.r9.s64 + -26412;
	// lwz r11,-17936(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -17936);
	// lwz r10,-8092(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8092);
	// addi r8,r11,45
	ctx.r8.s64 = ctx.r11.s64 + 45;
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r6,r7,r10
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r10.u32);
	// lwz r5,688(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 688);
	// lfs f0,648(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 648);
	ctx.f0.f64 = double(temp.f32);
	// lwz r4,692(r6)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + 692);
	// lfs f13,652(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 652);
	ctx.f13.f64 = double(temp.f32);
	// extsw r11,r5
	ctx.r11.s64 = ctx.r5.s32;
	// extsw r10,r4
	ctx.r10.s64 = ctx.r4.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f11,80(r1)
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f10,f12
	ctx.f10.f64 = double(ctx.f12.s64);
	// fcfid f8,f11
	ctx.f8.f64 = double(ctx.f11.s64);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// frsp f6,f8
	ctx.f6.f64 = double(float(ctx.f8.f64));
	// fmuls f7,f9,f0
	ctx.f7.f64 = double(float(ctx.f9.f64 * ctx.f0.f64));
	// fmuls f4,f6,f13
	ctx.f4.f64 = double(float(ctx.f6.f64 * ctx.f13.f64));
	// fctiwz f5,f7
	ctx.f5.s64 = (ctx.f7.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f7.f64));
	// stfd f5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f5.u64);
	// lwz r31,84(r1)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// fctiwz f3,f4
	ctx.f3.s64 = (ctx.f4.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f4.f64));
	// stfd f3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f3.u64);
	// lwz r30,84(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x82130000
	ctx.lr = 0x826A3170;
	sub_82130000(ctx, base);
	// li r29,0
	ctx.r29.s64 = 0;
	// bl 0x82178848
	ctx.lr = 0x826A3178;
	sub_82178848(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a3188
	if (!ctx.cr6.eq) goto loc_826A3188;
	// li r29,1
	ctx.r29.s64 = 1;
loc_826A3188:
	// extsw r11,r30
	ctx.r11.s64 = ctx.r30.s32;
	// extsw r10,r31
	ctx.r10.s64 = ctx.r31.s32;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f11,f0
	ctx.f11.f64 = double(ctx.f0.s64);
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// addi r10,r9,-29312
	ctx.r10.s64 = ctx.r9.s64 + -29312;
	// frsp f29,f11
	ctx.f29.f64 = double(float(ctx.f11.f64));
	// rlwinm r30,r29,4,0,27
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r29.u32 | (ctx.r29.u64 << 32), 4) & 0xFFFFFFF0;
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// addi r8,r10,4
	ctx.r8.s64 = ctx.r10.s64 + 4;
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// lfsx f10,r30,r10
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r10.u32);
	ctx.f10.f64 = double(temp.f32);
	// lfsx f9,r30,r8
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r8.u32);
	ctx.f9.f64 = double(temp.f32);
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// lfs f31,3796(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3796);
	ctx.f31.f64 = double(temp.f32);
	// fmuls f7,f9,f29
	ctx.f7.f64 = double(float(ctx.f9.f64 * ctx.f29.f64));
	// stfs f7,100(r1)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// frsp f30,f12
	ctx.f30.f64 = double(float(ctx.f12.f64));
	// stfs f31,104(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r3,r11,4416
	ctx.r3.s64 = ctx.r11.s64 + 4416;
	// fmuls f8,f10,f30
	ctx.f8.f64 = double(float(ctx.f10.f64 * ctx.f30.f64));
	// stfs f8,96(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// lwz r6,4416(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4416);
	// lwz r5,604(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 604);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x826A3204;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// addi r3,r11,4640
	ctx.r3.s64 = ctx.r11.s64 + 4640;
	// lwz r11,4640(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4640);
	// lwz r10,604(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 604);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A3220;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// stfs f31,88(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// addi r11,r9,-29200
	ctx.r11.s64 = ctx.r9.s64 + -29200;
	// li r7,4496
	ctx.r7.s64 = 4496;
	// addi r6,r11,4
	ctx.r6.s64 = ctx.r11.s64 + 4;
	// li r5,4720
	ctx.r5.s64 = 4720;
	// lfsx f6,r30,r11
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r11.u32);
	ctx.f6.f64 = double(temp.f32);
	// fmuls f4,f6,f30
	ctx.f4.f64 = double(float(ctx.f6.f64 * ctx.f30.f64));
	// stfs f4,80(r1)
	temp.f32 = float(ctx.f4.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lfsx f5,r30,r6
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r6.u32);
	ctx.f5.f64 = double(temp.f32);
	// fmuls f3,f5,f29
	ctx.f3.f64 = double(float(ctx.f5.f64 * ctx.f29.f64));
	// stfs f3,84(r1)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// lvx128 v63,r0,r8
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// stvx128 v63,r11,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// stvx128 v63,r11,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// lfd f29,-56(r1)
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A327C"))) PPC_WEAK_FUNC(sub_826A327C);
PPC_FUNC_IMPL(__imp__sub_826A327C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A3280"))) PPC_WEAK_FUNC(sub_826A3280);
PPC_FUNC_IMPL(__imp__sub_826A3280) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,0
	ctx.r10.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// ori r9,r10,57664
	ctx.r9.u64 = ctx.r10.u64 | 57664;
	// addi r11,r5,-2
	ctx.r11.s64 = ctx.r5.s64 + -2;
	// cmplwi cr6,r11,19
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 19, ctx.xer);
	// stwx r4,r31,r9
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, ctx.r4.u32);
	// bgt cr6,0x826a33cc
	if (ctx.cr6.gt) goto loc_826A33CC;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,12996
	ctx.r12.s64 = ctx.r12.s64 + 12996;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826A332C;
	case 1:
		goto loc_826A3338;
	case 2:
		goto loc_826A3344;
	case 3:
		goto loc_826A33CC;
	case 4:
		goto loc_826A33CC;
	case 5:
		goto loc_826A3350;
	case 6:
		goto loc_826A335C;
	case 7:
		goto loc_826A3368;
	case 8:
		goto loc_826A3374;
	case 9:
		goto loc_826A3380;
	case 10:
		goto loc_826A338C;
	case 11:
		goto loc_826A3398;
	case 12:
		goto loc_826A33A4;
	case 13:
		goto loc_826A33CC;
	case 14:
		goto loc_826A33CC;
	case 15:
		goto loc_826A33CC;
	case 16:
		goto loc_826A33CC;
	case 17:
		goto loc_826A33CC;
	case 18:
		goto loc_826A3314;
	case 19:
		goto loc_826A3320;
	default:
		__builtin_unreachable();
	}
	// lwz r19,13100(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13100);
	// lwz r19,13112(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13112);
	// lwz r19,13124(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13124);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13136(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13136);
	// lwz r19,13148(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13148);
	// lwz r19,13160(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13160);
	// lwz r19,13172(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13172);
	// lwz r19,13184(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13184);
	// lwz r19,13196(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13196);
	// lwz r19,13208(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13208);
	// lwz r19,13220(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13220);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13260);
	// lwz r19,13076(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13076);
	// lwz r19,13088(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13088);
loc_826A3314:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26200
	ctx.r3.s64 = ctx.r11.s64 + -26200;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3320:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26216
	ctx.r3.s64 = ctx.r11.s64 + -26216;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A332C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26228
	ctx.r3.s64 = ctx.r11.s64 + -26228;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3338:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26240
	ctx.r3.s64 = ctx.r11.s64 + -26240;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3344:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26252
	ctx.r3.s64 = ctx.r11.s64 + -26252;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3350:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26264
	ctx.r3.s64 = ctx.r11.s64 + -26264;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A335C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26280
	ctx.r3.s64 = ctx.r11.s64 + -26280;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3368:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26296
	ctx.r3.s64 = ctx.r11.s64 + -26296;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3374:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26312
	ctx.r3.s64 = ctx.r11.s64 + -26312;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3380:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26328
	ctx.r3.s64 = ctx.r11.s64 + -26328;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A338C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26344
	ctx.r3.s64 = ctx.r11.s64 + -26344;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A3398:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26360
	ctx.r3.s64 = ctx.r11.s64 + -26360;
	// b 0x826a33ac
	goto loc_826A33AC;
loc_826A33A4:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26372
	ctx.r3.s64 = ctx.r11.s64 + -26372;
loc_826A33AC:
	// bl 0x821fa230
	ctx.lr = 0x826A33B0;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,336(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 336);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A33C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,0
	ctx.r8.s64 = 0;
	// ori r7,r8,57668
	ctx.r7.u64 = ctx.r8.u64 | 57668;
	// stwx r3,r31,r7
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, ctx.r3.u32);
loc_826A33CC:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A33E0"))) PPC_WEAK_FUNC(sub_826A33E0);
PPC_FUNC_IMPL(__imp__sub_826A33E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A33E8;
	__savegprlr_28(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A3400;
	sub_822A3998(ctx, base);
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addi r10,r31,-2
	ctx.r10.s64 = ctx.r31.s64 + -2;
	// li r31,0
	ctx.r31.s64 = 0;
	// li r30,0
	ctx.r30.s64 = 0;
	// cmplwi cr6,r10,19
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 19, ctx.xer);
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// addi r11,r11,64
	ctx.r11.s64 = ctx.r11.s64 + 64;
	// bgt cr6,0x826a36d0
	if (ctx.cr6.gt) goto loc_826A36D0;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,13368
	ctx.r12.s64 = ctx.r12.s64 + 13368;
	// rlwinm r0,r10,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_826A34E0;
	case 1:
		goto loc_826A350C;
	case 2:
		goto loc_826A3538;
	case 3:
		goto loc_826A36D0;
	case 4:
		goto loc_826A36D0;
	case 5:
		goto loc_826A3564;
	case 6:
		goto loc_826A3590;
	case 7:
		goto loc_826A35BC;
	case 8:
		goto loc_826A35E8;
	case 9:
		goto loc_826A3614;
	case 10:
		goto loc_826A3640;
	case 11:
		goto loc_826A366C;
	case 12:
		goto loc_826A3698;
	case 13:
		goto loc_826A36D0;
	case 14:
		goto loc_826A36D0;
	case 15:
		goto loc_826A36D0;
	case 16:
		goto loc_826A36D0;
	case 17:
		goto loc_826A36D0;
	case 18:
		goto loc_826A3488;
	case 19:
		goto loc_826A34B4;
	default:
		__builtin_unreachable();
	}
	// lwz r19,13536(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13536);
	// lwz r19,13580(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13580);
	// lwz r19,13624(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13624);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,13668(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13668);
	// lwz r19,13712(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13712);
	// lwz r19,13756(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13756);
	// lwz r19,13800(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13800);
	// lwz r19,13844(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13844);
	// lwz r19,13888(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13888);
	// lwz r19,13932(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13932);
	// lwz r19,13976(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13976);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,14032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 14032);
	// lwz r19,13448(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13448);
	// lwz r19,13492(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 13492);
loc_826A3488:
	// li r10,16
	ctx.r10.s64 = 16;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25988
	ctx.r3.s64 = ctx.r8.s64 + -25988;
	// lvx128 v63,r11,r10
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A34A4;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26200
	ctx.r3.s64 = ctx.r7.s64 + -26200;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A34B4:
	// li r10,32
	ctx.r10.s64 = 32;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26004
	ctx.r3.s64 = ctx.r8.s64 + -26004;
	// lvx128 v62,r11,r10
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v62,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A34D0;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26216
	ctx.r3.s64 = ctx.r7.s64 + -26216;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A34E0:
	// li r10,80
	ctx.r10.s64 = 80;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26016
	ctx.r3.s64 = ctx.r8.s64 + -26016;
	// lvx128 v61,r11,r10
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v61,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v61.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A34FC;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26228
	ctx.r3.s64 = ctx.r7.s64 + -26228;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A350C:
	// li r10,96
	ctx.r10.s64 = 96;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26028
	ctx.r3.s64 = ctx.r8.s64 + -26028;
	// lvx128 v60,r11,r10
	_mm_store_si128((__m128i*)ctx.v60.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v60,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A3528;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26240
	ctx.r3.s64 = ctx.r7.s64 + -26240;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A3538:
	// li r10,112
	ctx.r10.s64 = 112;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26040
	ctx.r3.s64 = ctx.r8.s64 + -26040;
	// lvx128 v59,r11,r10
	_mm_store_si128((__m128i*)ctx.v59.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v59,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v59.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A3554;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26252
	ctx.r3.s64 = ctx.r7.s64 + -26252;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A3564:
	// li r10,48
	ctx.r10.s64 = 48;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26056
	ctx.r3.s64 = ctx.r8.s64 + -26056;
	// lvx128 v58,r11,r10
	_mm_store_si128((__m128i*)ctx.v58.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v58,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v58.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A3580;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26264
	ctx.r3.s64 = ctx.r7.s64 + -26264;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A3590:
	// li r10,64
	ctx.r10.s64 = 64;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26072
	ctx.r3.s64 = ctx.r8.s64 + -26072;
	// lvx128 v57,r11,r10
	_mm_store_si128((__m128i*)ctx.v57.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v57,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v57.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A35AC;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26280
	ctx.r3.s64 = ctx.r7.s64 + -26280;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A35BC:
	// li r10,1408
	ctx.r10.s64 = 1408;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26092
	ctx.r3.s64 = ctx.r8.s64 + -26092;
	// lvx128 v56,r11,r10
	_mm_store_si128((__m128i*)ctx.v56.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v56,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v56.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A35D8;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26296
	ctx.r3.s64 = ctx.r7.s64 + -26296;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A35E8:
	// li r10,1424
	ctx.r10.s64 = 1424;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26112
	ctx.r3.s64 = ctx.r8.s64 + -26112;
	// lvx128 v55,r11,r10
	_mm_store_si128((__m128i*)ctx.v55.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v55,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v55.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A3604;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26312
	ctx.r3.s64 = ctx.r7.s64 + -26312;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A3614:
	// li r10,1440
	ctx.r10.s64 = 1440;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26132
	ctx.r3.s64 = ctx.r8.s64 + -26132;
	// lvx128 v54,r11,r10
	_mm_store_si128((__m128i*)ctx.v54.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v54,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v54.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A3630;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26328
	ctx.r3.s64 = ctx.r7.s64 + -26328;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A3640:
	// li r10,1456
	ctx.r10.s64 = 1456;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26152
	ctx.r3.s64 = ctx.r8.s64 + -26152;
	// lvx128 v53,r11,r10
	_mm_store_si128((__m128i*)ctx.v53.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v53,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v53.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A365C;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26344
	ctx.r3.s64 = ctx.r7.s64 + -26344;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A366C:
	// li r10,1472
	ctx.r10.s64 = 1472;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26172
	ctx.r3.s64 = ctx.r8.s64 + -26172;
	// lvx128 v52,r11,r10
	_mm_store_si128((__m128i*)ctx.v52.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v52,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v52.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x821fa230
	ctx.lr = 0x826A3688;
	sub_821FA230(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r7,-26360
	ctx.r3.s64 = ctx.r7.s64 + -26360;
	// b 0x826a36c8
	goto loc_826A36C8;
loc_826A3698:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lfs f0,288(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 288);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,292(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 292);
	ctx.f13.f64 = double(temp.f32);
	// addi r3,r10,-26184
	ctx.r3.s64 = ctx.r10.s64 + -26184;
	// lfs f12,296(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 296);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f13,84(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f12,88(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x821fa230
	ctx.lr = 0x826A36BC;
	sub_821FA230(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r9,-26372
	ctx.r3.s64 = ctx.r9.s64 + -26372;
loc_826A36C8:
	// bl 0x821fa230
	ctx.lr = 0x826A36CC;
	sub_821FA230(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
loc_826A36D0:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f12.f64 = double(temp.f32);
	// lis r9,-1
	ctx.r9.s64 = -65536;
	// lfs f11,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f11.f64 = double(temp.f32);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r29,r11,-28660
	ctx.r29.s64 = ctx.r11.s64 + -28660;
	// lfs f0,15360(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// li r5,0
	ctx.r5.s64 = 0;
	// fmuls f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// fmuls f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// fmuls f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// fctiwz f7,f10
	ctx.f7.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f7.u64);
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f6,f9
	ctx.f6.s64 = (ctx.f9.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f9.f64));
	// stfd f6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f6.u64);
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f5,f8
	ctx.f5.s64 = (ctx.f8.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f8.f64));
	// stfd f5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f5.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwimi r9,r6,8,16,23
	ctx.r9.u64 = (__builtin_rotateleft32(ctx.r6.u32, 8) & 0xFF00) | (ctx.r9.u64 & 0xFFFFFFFFFFFF00FF);
	// or r11,r9,r8
	ctx.r11.u64 = ctx.r9.u64 | ctx.r8.u64;
	// rlwinm r10,r11,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r10,r7
	ctx.r31.u64 = ctx.r10.u64 | ctx.r7.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A3740;
	sub_8268DA78(ctx, base);
	// li r28,1
	ctx.r28.s64 = 1;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a3754
	if (ctx.cr6.eq) goto loc_826A3754;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
loc_826A3754:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A3764;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a3774
	if (ctx.cr6.eq) goto loc_826A3774;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
loc_826A3774:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A377C"))) PPC_WEAK_FUNC(sub_826A377C);
PPC_FUNC_IMPL(__imp__sub_826A377C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A3780"))) PPC_WEAK_FUNC(sub_826A3780);
PPC_FUNC_IMPL(__imp__sub_826A3780) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A3788;
	__savegprlr_28(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A37A4;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r10,r11,64
	ctx.r10.s64 = ctx.r11.s64 + 64;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r7,r11,39260
	ctx.r7.u64 = ctx.r11.u64 | 39260;
	// lwzx r11,r31,r7
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// bne cr6,0x826a37e8
	if (!ctx.cr6.eq) goto loc_826A37E8;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// li r8,1568
	ctx.r8.s64 = 1568;
	// add r5,r11,r9
	ctx.r5.u64 = ctx.r11.u64 + ctx.r9.u64;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// rlwinm r11,r5,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 4) & 0xFFFFFFF0;
	// add r4,r11,r10
	ctx.r4.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lvx128 v63,r4,r8
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// b 0x826a3804
	goto loc_826A3804;
loc_826A37E8:
	// addi r11,r11,33
	ctx.r11.s64 = ctx.r11.s64 + 33;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// rlwinm r9,r11,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// add r6,r11,r9
	ctx.r6.u64 = ctx.r11.u64 + ctx.r9.u64;
	// rlwinm r5,r6,4,0,27
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// lvx128 v62,r5,r10
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v62,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826A3804:
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f13,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lfs f11,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f11.f64 = double(temp.f32);
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// lfs f0,15360(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// fmuls f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// fmuls f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// fctiwz f7,f10
	ctx.f7.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f7.u64);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f6,f9
	ctx.f6.s64 = (ctx.f9.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f9.f64));
	// stfd f6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f6.u64);
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f5,f8
	ctx.f5.s64 = (ctx.f8.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f8.f64));
	// stfd f5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f5.u64);
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwimi r10,r7,8,16,23
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r7.u32, 8) & 0xFF00) | (ctx.r10.u64 & 0xFFFFFFFFFFFF00FF);
	// or r6,r10,r9
	ctx.r6.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r5,r6,8,0,23
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 8) & 0xFFFFFF00;
	// or r29,r5,r8
	ctx.r29.u64 = ctx.r5.u64 | ctx.r8.u64;
	// bne cr6,0x826a3870
	if (!ctx.cr6.eq) goto loc_826A3870;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25928
	ctx.r3.s64 = ctx.r11.s64 + -25928;
	// b 0x826a3878
	goto loc_826A3878;
loc_826A3870:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25940
	ctx.r3.s64 = ctx.r11.s64 + -25940;
loc_826A3878:
	// bl 0x821fa230
	ctx.lr = 0x826A387C;
	sub_821FA230(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r31,r11,-28660
	ctx.r31.s64 = ctx.r11.s64 + -28660;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A3890;
	sub_8268DA78(ctx, base);
	// li r30,1
	ctx.r30.s64 = 1;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a38a4
	if (ctx.cr6.eq) goto loc_826A38A4;
	// stw r29,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r29.u32);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r30.u32);
loc_826A38A4:
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// bne cr6,0x826a38b8
	if (!ctx.cr6.eq) goto loc_826A38B8;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25956
	ctx.r3.s64 = ctx.r11.s64 + -25956;
	// b 0x826a38c0
	goto loc_826A38C0;
loc_826A38B8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25972
	ctx.r3.s64 = ctx.r11.s64 + -25972;
loc_826A38C0:
	// bl 0x821fa230
	ctx.lr = 0x826A38C4;
	sub_821FA230(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826A38D0;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a38e0
	if (ctx.cr6.eq) goto loc_826A38E0;
	// stw r29,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r29.u32);
	// stw r30,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r30.u32);
loc_826A38E0:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A38E8"))) PPC_WEAK_FUNC(sub_826A38E8);
PPC_FUNC_IMPL(__imp__sub_826A38E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// bne cr6,0x826a3910
	if (!ctx.cr6.eq) goto loc_826A3910;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25928
	ctx.r3.s64 = ctx.r11.s64 + -25928;
	// b 0x826a3918
	goto loc_826A3918;
loc_826A3910:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25940
	ctx.r3.s64 = ctx.r11.s64 + -25940;
loc_826A3918:
	// bl 0x821fa230
	ctx.lr = 0x826A391C;
	sub_821FA230(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-28660
	ctx.r4.s64 = ctx.r11.s64 + -28660;
	// bl 0x8268da78
	ctx.lr = 0x826A392C;
	sub_8268DA78(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a3944
	if (ctx.cr6.eq) goto loc_826A3944;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82699600
	ctx.lr = 0x826A3944;
	sub_82699600(ctx, base);
loc_826A3944:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A3958"))) PPC_WEAK_FUNC(sub_826A3958);
PPC_FUNC_IMPL(__imp__sub_826A3958) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A3960;
	__savegprlr_29(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// beq cr6,0x826a3980
	if (ctx.cr6.eq) goto loc_826A3980;
	// cmpwi cr6,r4,2
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 2, ctx.xer);
	// beq cr6,0x826a3980
	if (ctx.cr6.eq) goto loc_826A3980;
	// cmpwi cr6,r4,1
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 1, ctx.xer);
	// bne cr6,0x826a3994
	if (!ctx.cr6.eq) goto loc_826A3994;
loc_826A3980:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r5,r11,-21664
	ctx.r5.s64 = ctx.r11.s64 + -21664;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82137a08
	ctx.lr = 0x826A3994;
	sub_82137A08(ctx, base);
loc_826A3994:
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A39A4;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r5,r1,88
	ctx.r5.s64 = ctx.r1.s64 + 88;
	// addi r4,r11,-26880
	ctx.r4.s64 = ctx.r11.s64 + -26880;
	// bl 0x825ee120
	ctx.lr = 0x826A39B8;
	sub_825EE120(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A39C4;
	sub_821F9FB8(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r5,r1,92
	ctx.r5.s64 = ctx.r1.s64 + 92;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r10,-26896
	ctx.r4.s64 = ctx.r10.s64 + -26896;
	// bl 0x825ee120
	ctx.lr = 0x826A39D8;
	sub_825EE120(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A39E4;
	sub_821F9FB8(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r9,-26912
	ctx.r4.s64 = ctx.r9.s64 + -26912;
	// bl 0x825ee120
	ctx.lr = 0x826A39F8;
	sub_825EE120(ctx, base);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r6,r1,112
	ctx.r6.s64 = ctx.r1.s64 + 112;
	// extsw r10,r4
	ctx.r10.s64 = ctx.r4.s32;
	// lwz r9,96(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// lfs f0,11360(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// extsw r8,r11
	ctx.r8.s64 = ctx.r11.s32;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// lvlx128 v63,r0,r7
	temp.u32 = ctx.r7.u32;
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// extsw r7,r9
	ctx.r7.s64 = ctx.r9.s32;
	// vspltw128 v62,v63,0
	_mm_store_si128((__m128i*)ctx.v62.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v63.u32), 0xFF));
	// lfd f0,80(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r8.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// std r7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r7.u64);
	// lfd f12,80(r1)
	ctx.f12.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f10,f13
	ctx.f10.f64 = double(ctx.f13.s64);
	// fcfid f11,f12
	ctx.f11.f64 = double(ctx.f12.s64);
	// fcfid f9,f0
	ctx.f9.f64 = double(ctx.f0.s64);
	// frsp f7,f10
	ctx.f7.f64 = double(float(ctx.f10.f64));
	// stfs f7,116(r1)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// frsp f8,f11
	ctx.f8.f64 = double(float(ctx.f11.f64));
	// stfs f8,120(r1)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// frsp f6,f9
	ctx.f6.f64 = double(float(ctx.f9.f64));
	// stfs f6,112(r1)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// lvx128 v61,r0,r6
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmulfp128 v60,v61,v62
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v60.f32, _mm_mul_ps(_mm_load_ps(ctx.v61.f32), _mm_load_ps(ctx.v62.f32)));
	// stvx128 v60,r0,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8261e2b8
	ctx.lr = 0x826A3A80;
	sub_8261E2B8(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8261e440
	ctx.lr = 0x826A3A88;
	sub_8261E440(ctx, base);
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lfs f0,3796(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	ctx.cr6.compare(ctx.f1.f64, ctx.f0.f64);
	// beq cr6,0x826a3aa0
	if (ctx.cr6.eq) goto loc_826A3AA0;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8261e4f8
	ctx.lr = 0x826A3AA0;
	sub_8261E4F8(ctx, base);
loc_826A3AA0:
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f13,116(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,120(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f12.f64 = double(temp.f32);
	// lis r10,-1
	ctx.r10.s64 = -65536;
	// lfs f11,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f11.f64 = double(temp.f32);
	// addis r30,r29,1
	ctx.r30.s64 = ctx.r29.s64 + 65536;
	// addi r30,r30,-7872
	ctx.r30.s64 = ctx.r30.s64 + -7872;
	// lfs f0,15360(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// fmuls f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 * ctx.f0.f64));
	// fmuls f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// lwz r3,0(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// fctiwz f7,f10
	ctx.f7.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f7,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f7.u64);
	// lwz r9,84(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f6,f9
	ctx.f6.s64 = (ctx.f9.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f9.f64));
	// stfd f6,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f6.u64);
	// lwz r8,84(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// fctiwz f5,f8
	ctx.f5.s64 = (ctx.f8.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f8.f64));
	// stfd f5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f5.u64);
	// lwz r7,84(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// rlwimi r10,r7,8,16,23
	ctx.r10.u64 = (__builtin_rotateleft32(ctx.r7.u32, 8) & 0xFF00) | (ctx.r10.u64 & 0xFFFFFFFFFFFF00FF);
	// or r6,r10,r9
	ctx.r6.u64 = ctx.r10.u64 | ctx.r9.u64;
	// rlwinm r5,r6,8,0,23
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r5,r8
	ctx.r31.u64 = ctx.r5.u64 | ctx.r8.u64;
	// beq cr6,0x826a3b38
	if (ctx.cr6.eq) goto loc_826A3B38;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-28660
	ctx.r4.s64 = ctx.r11.s64 + -28660;
	// bl 0x8268da78
	ctx.lr = 0x826A3B1C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a3b30
	if (ctx.cr6.eq) goto loc_826A3B30;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826A3B30:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
loc_826A3B38:
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,57668
	ctx.r10.u64 = ctx.r11.u64 | 57668;
	// lwzx r11,r29,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + ctx.r10.u32);
	// addi r9,r11,5424
	ctx.r9.s64 = ctx.r11.s64 + 5424;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// stwx r31,r8,r29
	PPC_STORE_U32(ctx.r8.u32 + ctx.r29.u32, ctx.r31.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A3B58"))) PPC_WEAK_FUNC(sub_826A3B58);
PPC_FUNC_IMPL(__imp__sub_826A3B58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lfs f0,7444(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 7444);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f0,84(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f0,88(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// bl 0x826a1f50
	ctx.lr = 0x826A3B88;
	sub_826A1F50(ctx, base);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A3B98;
	sub_822A3998(ctx, base);
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r7,0
	ctx.r7.s64 = 0;
	// lis r6,0
	ctx.r6.s64 = 0;
	// ori r5,r8,39260
	ctx.r5.u64 = ctx.r8.u64 | 39260;
	// ori r4,r7,39356
	ctx.r4.u64 = ctx.r7.u64 | 39356;
	// ori r10,r6,39256
	ctx.r10.u64 = ctx.r6.u64 | 39256;
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r6,r31,r5
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r5.u32);
	// lwzx r5,r31,r4
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r4.u32);
	// lbzx r4,r31,r10
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r31.u32 + ctx.r10.u32);
	// bl 0x82391ff8
	ctx.lr = 0x826A3BD0;
	sub_82391FF8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A3BE4"))) PPC_WEAK_FUNC(sub_826A3BE4);
PPC_FUNC_IMPL(__imp__sub_826A3BE4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A3BE8"))) PPC_WEAK_FUNC(sub_826A3BE8);
PPC_FUNC_IMPL(__imp__sub_826A3BE8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A3BF0;
	__savegprlr_27(ctx, base);
	// stfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, ctx.f31.u64);
	// stwu r1,-224(r1)
	ea = -224 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r5,r11,-21664
	ctx.r5.s64 = ctx.r11.s64 + -21664;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82137a08
	ctx.lr = 0x826A3C18;
	sub_82137A08(ctx, base);
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A3C28;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r30,r11,-26880
	ctx.r30.s64 = ctx.r11.s64 + -26880;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x825ee120
	ctx.lr = 0x826A3C40;
	sub_825EE120(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// li r9,101
	ctx.r9.s64 = 101;
	// add. r11,r11,r28
	ctx.r11.u64 = ctx.r11.u64 + ctx.r28.u64;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt 0x826a3c54
	if (ctx.cr0.lt) goto loc_826A3C54;
	// li r9,0
	ctx.r9.s64 = 0;
loc_826A3C54:
	// lis r10,10381
	ctx.r10.s64 = 680329216;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// mr r8,r11
	ctx.r8.u64 = ctx.r11.u64;
	// ori r7,r10,61643
	ctx.r7.u64 = ctx.r10.u64 | 61643;
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mulhw r6,r8,r7
	ctx.r6.s64 = (int64_t(ctx.r8.s32) * int64_t(ctx.r7.s32)) >> 32;
	// srawi r11,r6,4
	ctx.xer.ca = (ctx.r6.s32 < 0) & ((ctx.r6.u32 & 0xF) != 0);
	ctx.r11.s64 = ctx.r6.s32 >> 4;
	// rlwinm r10,r11,1,31,31
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0x1;
	// add r5,r11,r10
	ctx.r5.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mulli r11,r5,101
	ctx.r11.s64 = ctx.r5.s64 * 101;
	// subf r11,r11,r8
	ctx.r11.s64 = ctx.r8.s64 - ctx.r11.s64;
	// add r10,r11,r9
	ctx.r10.u64 = ctx.r11.u64 + ctx.r9.u64;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// bl 0x821f9fb8
	ctx.lr = 0x826A3C8C;
	sub_821F9FB8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// bl 0x825ee0e0
	ctx.lr = 0x826A3C9C;
	sub_825EE0E0(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r9,-25880
	ctx.r3.s64 = ctx.r9.s64 + -25880;
	// bl 0x82130000
	ctx.lr = 0x826A3CAC;
	sub_82130000(ctx, base);
	// lwz r6,80(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// extsw r5,r6
	ctx.r5.s64 = ctx.r6.s32;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// std r5,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r5.u64);
	// lfd f13,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// frsp f11,f12
	ctx.f11.f64 = double(float(ctx.f12.f64));
	// lfs f0,11360(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// lfs f31,7444(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 7444);
	ctx.f31.f64 = double(temp.f32);
	// stfs f31,116(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 116, temp.u32);
	// stfs f31,120(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 120, temp.u32);
	// fmuls f10,f11,f0
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// stfs f10,112(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 112, temp.u32);
	// bl 0x8261e2b8
	ctx.lr = 0x826A3CEC;
	sub_8261E2B8(ctx, base);
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// addi r11,r1,88
	ctx.r11.s64 = ctx.r1.s64 + 88;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// addi r10,r1,112
	ctx.r10.s64 = ctx.r1.s64 + 112;
	// addi r9,r1,112
	ctx.r9.s64 = ctx.r1.s64 + 112;
	// lis r8,-1
	ctx.r8.s64 = -65536;
	// lfs f0,15360(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 15360);
	ctx.f0.f64 = double(temp.f32);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// stfs f0,88(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lvlx128 v63,r0,r11
	temp.u32 = ctx.r11.u32;
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v62,v63,0
	_mm_store_si128((__m128i*)ctx.v62.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v63.u32), 0xFF));
	// lvx128 v61,r0,r10
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vmulfp128 v60,v61,v62
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v60.f32, _mm_mul_ps(_mm_load_ps(ctx.v61.f32), _mm_load_ps(ctx.v62.f32)));
	// stvx128 v60,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f9,120(r1)
	ctx.fpscr.disableFlushModeUnconditional();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f7.f64 = double(temp.f32);
	// fctidz f6,f7
	ctx.f6.s64 = (ctx.f7.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f7.f64));
	// stfd f6,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f6.u64);
	// lbz r7,95(r1)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// fctidz f5,f9
	ctx.f5.s64 = (ctx.f9.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f9.f64));
	// stfd f5,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f5.u64);
	// lbz r6,95(r1)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// fctidz f4,f8
	ctx.f4.s64 = (ctx.f8.f64 > double(LLONG_MAX)) ? LLONG_MAX : _mm_cvttsd_si64(_mm_load_sd(&ctx.f8.f64));
	// stfd f4,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f4.u64);
	// lbz r5,95(r1)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r1.u32 + 95);
	// rlwimi r8,r5,8,16,23
	ctx.r8.u64 = (__builtin_rotateleft32(ctx.r5.u32, 8) & 0xFF00) | (ctx.r8.u64 & 0xFFFFFFFFFFFF00FF);
	// or r11,r8,r7
	ctx.r11.u64 = ctx.r8.u64 | ctx.r7.u64;
	// rlwinm r10,r11,8,0,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 8) & 0xFFFFFF00;
	// or r31,r10,r6
	ctx.r31.u64 = ctx.r10.u64 | ctx.r6.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826A3D68;
	sub_821F9FB8(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r9,-26932
	ctx.r4.s64 = ctx.r9.s64 + -26932;
	// bl 0x825ee0e0
	ctx.lr = 0x826A3D7C;
	sub_825EE0E0(ctx, base);
	// lfs f3,120(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,116(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	ctx.f2.f64 = double(temp.f32);
	// stfd f3,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f3.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// stfd f2,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f2.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// lfs f1,112(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	ctx.f1.f64 = double(temp.f32);
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25916
	ctx.r3.s64 = ctx.r8.s64 + -25916;
	// bl 0x82130000
	ctx.lr = 0x826A3DAC;
	sub_82130000(ctx, base);
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// bne cr6,0x826a3dc8
	if (!ctx.cr6.eq) goto loc_826A3DC8;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x826a3b58
	ctx.lr = 0x826A3DBC;
	sub_826A3B58(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3DC8:
	// cmpwi cr6,r29,1
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 1, ctx.xer);
	// bne cr6,0x826a3de4
	if (!ctx.cr6.eq) goto loc_826A3DE4;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x826a2078
	ctx.lr = 0x826A3DD8;
	sub_826A2078(ctx, base);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3DE4:
	// cmpwi cr6,r29,2
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 2, ctx.xer);
	// bne cr6,0x826a4078
	if (!ctx.cr6.eq) goto loc_826A4078;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A3DFC;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r9,48(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// stfs f31,96(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f31,100(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f31,104(r1)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r31,r11,64
	ctx.r31.s64 = ctx.r11.s64 + 64;
	// bl 0x826a1f50
	ctx.lr = 0x826A3E24;
	sub_826A1F50(ctx, base);
	// lis r8,0
	ctx.r8.s64 = 0;
	// addi r11,r31,16
	ctx.r11.s64 = ctx.r31.s64 + 16;
	// ori r7,r8,39356
	ctx.r7.u64 = ctx.r8.u64 | 39356;
	// lwzx r10,r27,r7
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + ctx.r7.u32);
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// cmplwi cr6,r10,19
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 19, ctx.xer);
	// bgt cr6,0x826a4078
	if (ctx.cr6.gt) goto loc_826A4078;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,15960
	ctx.r12.s64 = ctx.r12.s64 + 15960;
	// rlwinm r0,r10,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_826A3EF0;
	case 1:
		goto loc_826A3F14;
	case 2:
		goto loc_826A3F38;
	case 3:
		goto loc_826A4078;
	case 4:
		goto loc_826A4078;
	case 5:
		goto loc_826A3F5C;
	case 6:
		goto loc_826A3F80;
	case 7:
		goto loc_826A3FA4;
	case 8:
		goto loc_826A3FC8;
	case 9:
		goto loc_826A3FEC;
	case 10:
		goto loc_826A4010;
	case 11:
		goto loc_826A4034;
	case 12:
		goto loc_826A4058;
	case 13:
		goto loc_826A4078;
	case 14:
		goto loc_826A4078;
	case 15:
		goto loc_826A4078;
	case 16:
		goto loc_826A4078;
	case 17:
		goto loc_826A4078;
	case 18:
		goto loc_826A3EA8;
	case 19:
		goto loc_826A3ECC;
	default:
		__builtin_unreachable();
	}
	// lwz r19,16112(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16112);
	// lwz r19,16148(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16148);
	// lwz r19,16184(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16184);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16220(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16220);
	// lwz r19,16256(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16256);
	// lwz r19,16292(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16292);
	// lwz r19,16328(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16328);
	// lwz r19,16364(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16364);
	// lwz r19,16400(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16400);
	// lwz r19,16436(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16436);
	// lwz r19,16472(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16472);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16504);
	// lwz r19,16040(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16040);
	// lwz r19,16076(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16076);
loc_826A3EA8:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// stfs f13,4(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4, temp.u32);
	// stfs f0,8(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 8, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3ECC:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,16(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 16, temp.u32);
	// stfs f13,20(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 20, temp.u32);
	// stfs f0,24(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 24, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3EF0:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,64(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 64, temp.u32);
	// stfs f13,68(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 68, temp.u32);
	// stfs f0,72(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 72, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3F14:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,80(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 80, temp.u32);
	// stfs f13,84(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 84, temp.u32);
	// stfs f0,88(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 88, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3F38:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,96(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 96, temp.u32);
	// stfs f13,100(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 100, temp.u32);
	// stfs f0,104(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 104, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3F5C:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,32(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 32, temp.u32);
	// stfs f13,36(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 36, temp.u32);
	// stfs f0,40(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 40, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3F80:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,48(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 48, temp.u32);
	// stfs f13,52(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 52, temp.u32);
	// stfs f0,56(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 56, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3FA4:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1408(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1408, temp.u32);
	// stfs f13,1412(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1412, temp.u32);
	// stfs f0,1416(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1416, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3FC8:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1424(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1424, temp.u32);
	// stfs f13,1428(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1428, temp.u32);
	// stfs f0,1432(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1432, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A3FEC:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1440(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1440, temp.u32);
	// stfs f13,1444(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1444, temp.u32);
	// stfs f0,1448(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1448, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4010:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1456(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1456, temp.u32);
	// stfs f13,1460(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1460, temp.u32);
	// stfs f0,1464(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1464, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4034:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1472(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1472, temp.u32);
	// stfs f13,1476(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1476, temp.u32);
	// stfs f0,1480(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1480, temp.u32);
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4058:
	// lfs f0,284(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// stfs f11,272(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r11.u32 + 272, temp.u32);
	// stfs f12,276(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 276, temp.u32);
	// stfs f13,280(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 280, temp.u32);
	// stfs f0,284(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 284, temp.u32);
loc_826A4078:
	// addi r1,r1,224
	ctx.r1.s64 = ctx.r1.s64 + 224;
	// lfd f31,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A4084"))) PPC_WEAK_FUNC(sub_826A4084);
PPC_FUNC_IMPL(__imp__sub_826A4084) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A4088"))) PPC_WEAK_FUNC(sub_826A4088);
PPC_FUNC_IMPL(__imp__sub_826A4088) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A4090;
	__savegprlr_27(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r5,r11,-21664
	ctx.r5.s64 = ctx.r11.s64 + -21664;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82137a08
	ctx.lr = 0x826A40B4;
	sub_82137A08(ctx, base);
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A40C4;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,-26896
	ctx.r31.s64 = ctx.r11.s64 + -26896;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x825ee120
	ctx.lr = 0x826A40DC;
	sub_825EE120(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add. r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bge 0x826a40f0
	if (!ctx.cr0.lt) goto loc_826A40F0;
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826a40fc
	goto loc_826A40FC;
loc_826A40F0:
	// cmpwi cr6,r11,100
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 100, ctx.xer);
	// ble cr6,0x826a40fc
	if (!ctx.cr6.gt) goto loc_826A40FC;
	// li r11,100
	ctx.r11.s64 = 100;
loc_826A40FC:
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A410C;
	sub_821F9FB8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// bl 0x825ee0e0
	ctx.lr = 0x826A411C;
	sub_825EE0E0(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r11,-25852
	ctx.r3.s64 = ctx.r11.s64 + -25852;
	// bl 0x82130000
	ctx.lr = 0x826A412C;
	sub_82130000(ctx, base);
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// bne cr6,0x826a4144
	if (!ctx.cr6.eq) goto loc_826A4144;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a3b58
	ctx.lr = 0x826A413C;
	sub_826A3B58(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4144:
	// cmpwi cr6,r27,1
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 1, ctx.xer);
	// bne cr6,0x826a415c
	if (!ctx.cr6.eq) goto loc_826A415C;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a2078
	ctx.lr = 0x826A4154;
	sub_826A2078(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A415C:
	// cmpwi cr6,r27,2
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 2, ctx.xer);
	// bne cr6,0x826a43c8
	if (!ctx.cr6.eq) goto loc_826A43C8;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A4174;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r8,48(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lfs f0,7444(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 7444);
	ctx.f0.f64 = double(temp.f32);
	// lwz r11,132(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 132);
	// stfs f0,96(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f0,100(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f0,104(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r31,r11,64
	ctx.r31.s64 = ctx.r11.s64 + 64;
	// bl 0x826a1f50
	ctx.lr = 0x826A41A4;
	sub_826A1F50(ctx, base);
	// lis r7,0
	ctx.r7.s64 = 0;
	// addi r11,r31,16
	ctx.r11.s64 = ctx.r31.s64 + 16;
	// ori r6,r7,39356
	ctx.r6.u64 = ctx.r7.u64 | 39356;
	// lwzx r10,r28,r6
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r6.u32);
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// cmplwi cr6,r10,19
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 19, ctx.xer);
	// bgt cr6,0x826a43c8
	if (ctx.cr6.gt) goto loc_826A43C8;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,16856
	ctx.r12.s64 = ctx.r12.s64 + 16856;
	// rlwinm r0,r10,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_826A4268;
	case 1:
		goto loc_826A4288;
	case 2:
		goto loc_826A42A8;
	case 3:
		goto loc_826A43C8;
	case 4:
		goto loc_826A43C8;
	case 5:
		goto loc_826A42C8;
	case 6:
		goto loc_826A42E8;
	case 7:
		goto loc_826A4308;
	case 8:
		goto loc_826A4328;
	case 9:
		goto loc_826A4348;
	case 10:
		goto loc_826A4368;
	case 11:
		goto loc_826A4388;
	case 12:
		goto loc_826A43A8;
	case 13:
		goto loc_826A43C8;
	case 14:
		goto loc_826A43C8;
	case 15:
		goto loc_826A43C8;
	case 16:
		goto loc_826A43C8;
	case 17:
		goto loc_826A43C8;
	case 18:
		goto loc_826A4228;
	case 19:
		goto loc_826A4248;
	default:
		__builtin_unreachable();
	}
	// lwz r19,17000(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17000);
	// lwz r19,17032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17032);
	// lwz r19,17064(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17064);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,17096(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17096);
	// lwz r19,17128(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17128);
	// lwz r19,17160(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17160);
	// lwz r19,17192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17192);
	// lwz r19,17224(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17224);
	// lwz r19,17256(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17256);
	// lwz r19,17288(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17288);
	// lwz r19,17320(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17320);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,17352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17352);
	// lwz r19,16936(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16936);
	// lwz r19,16968(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16968);
loc_826A4228:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// stfs f13,4(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4, temp.u32);
	// stfs f0,8(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 8, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4248:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,16(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 16, temp.u32);
	// stfs f13,20(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 20, temp.u32);
	// stfs f0,24(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 24, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4268:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,64(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 64, temp.u32);
	// stfs f13,68(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 68, temp.u32);
	// stfs f0,72(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 72, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4288:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,80(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 80, temp.u32);
	// stfs f13,84(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 84, temp.u32);
	// stfs f0,88(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 88, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A42A8:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,96(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 96, temp.u32);
	// stfs f13,100(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 100, temp.u32);
	// stfs f0,104(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 104, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A42C8:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,32(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 32, temp.u32);
	// stfs f13,36(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 36, temp.u32);
	// stfs f0,40(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 40, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A42E8:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,48(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 48, temp.u32);
	// stfs f13,52(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 52, temp.u32);
	// stfs f0,56(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 56, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4308:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1408(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1408, temp.u32);
	// stfs f13,1412(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1412, temp.u32);
	// stfs f0,1416(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1416, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4328:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1424(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1424, temp.u32);
	// stfs f13,1428(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1428, temp.u32);
	// stfs f0,1432(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1432, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4348:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1440(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1440, temp.u32);
	// stfs f13,1444(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1444, temp.u32);
	// stfs f0,1448(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1448, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4368:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1456(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1456, temp.u32);
	// stfs f13,1460(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1460, temp.u32);
	// stfs f0,1464(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1464, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4388:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1472(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1472, temp.u32);
	// stfs f13,1476(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1476, temp.u32);
	// stfs f0,1480(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1480, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A43A8:
	// lfs f0,284(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// stfs f11,272(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r11.u32 + 272, temp.u32);
	// stfs f12,276(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 276, temp.u32);
	// stfs f13,280(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 280, temp.u32);
	// stfs f0,284(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 284, temp.u32);
loc_826A43C8:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A43D0"))) PPC_WEAK_FUNC(sub_826A43D0);
PPC_FUNC_IMPL(__imp__sub_826A43D0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A43D8;
	__savegprlr_27(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// li r4,30
	ctx.r4.s64 = 30;
	// addi r5,r11,-21664
	ctx.r5.s64 = ctx.r11.s64 + -21664;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82137a08
	ctx.lr = 0x826A43FC;
	sub_82137A08(ctx, base);
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A440C;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,-26912
	ctx.r31.s64 = ctx.r11.s64 + -26912;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x825ee120
	ctx.lr = 0x826A4424;
	sub_825EE120(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add. r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bge 0x826a4438
	if (!ctx.cr0.lt) goto loc_826A4438;
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826a4444
	goto loc_826A4444;
loc_826A4438:
	// cmpwi cr6,r11,100
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 100, ctx.xer);
	// ble cr6,0x826a4444
	if (!ctx.cr6.gt) goto loc_826A4444;
	// li r11,100
	ctx.r11.s64 = 100;
loc_826A4444:
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A4454;
	sub_821F9FB8(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// bl 0x825ee0e0
	ctx.lr = 0x826A4464;
	sub_825EE0E0(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r3,r11,-25820
	ctx.r3.s64 = ctx.r11.s64 + -25820;
	// bl 0x82130000
	ctx.lr = 0x826A4474;
	sub_82130000(ctx, base);
	// cmpwi cr6,r27,0
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// bne cr6,0x826a448c
	if (!ctx.cr6.eq) goto loc_826A448C;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a3b58
	ctx.lr = 0x826A4484;
	sub_826A3B58(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A448C:
	// cmpwi cr6,r27,1
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 1, ctx.xer);
	// bne cr6,0x826a44a4
	if (!ctx.cr6.eq) goto loc_826A44A4;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a2078
	ctx.lr = 0x826A449C;
	sub_826A2078(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A44A4:
	// cmpwi cr6,r27,2
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 2, ctx.xer);
	// bne cr6,0x826a4710
	if (!ctx.cr6.eq) goto loc_826A4710;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A44BC;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r8,48(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lfs f0,7444(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 7444);
	ctx.f0.f64 = double(temp.f32);
	// lwz r11,132(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 132);
	// stfs f0,96(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 96, temp.u32);
	// stfs f0,100(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 100, temp.u32);
	// stfs f0,104(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 104, temp.u32);
	// addi r31,r11,64
	ctx.r31.s64 = ctx.r11.s64 + 64;
	// bl 0x826a1f50
	ctx.lr = 0x826A44EC;
	sub_826A1F50(ctx, base);
	// lis r7,0
	ctx.r7.s64 = 0;
	// addi r11,r31,16
	ctx.r11.s64 = ctx.r31.s64 + 16;
	// ori r6,r7,39356
	ctx.r6.u64 = ctx.r7.u64 | 39356;
	// lwzx r10,r28,r6
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r6.u32);
	// addi r10,r10,-2
	ctx.r10.s64 = ctx.r10.s64 + -2;
	// cmplwi cr6,r10,19
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 19, ctx.xer);
	// bgt cr6,0x826a4710
	if (ctx.cr6.gt) goto loc_826A4710;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,17696
	ctx.r12.s64 = ctx.r12.s64 + 17696;
	// rlwinm r0,r10,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r10.u64) {
	case 0:
		goto loc_826A45B0;
	case 1:
		goto loc_826A45D0;
	case 2:
		goto loc_826A45F0;
	case 3:
		goto loc_826A4710;
	case 4:
		goto loc_826A4710;
	case 5:
		goto loc_826A4610;
	case 6:
		goto loc_826A4630;
	case 7:
		goto loc_826A4650;
	case 8:
		goto loc_826A4670;
	case 9:
		goto loc_826A4690;
	case 10:
		goto loc_826A46B0;
	case 11:
		goto loc_826A46D0;
	case 12:
		goto loc_826A46F0;
	case 13:
		goto loc_826A4710;
	case 14:
		goto loc_826A4710;
	case 15:
		goto loc_826A4710;
	case 16:
		goto loc_826A4710;
	case 17:
		goto loc_826A4710;
	case 18:
		goto loc_826A4570;
	case 19:
		goto loc_826A4590;
	default:
		__builtin_unreachable();
	}
	// lwz r19,17840(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17840);
	// lwz r19,17872(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17872);
	// lwz r19,17904(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17904);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,17936(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17936);
	// lwz r19,17968(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17968);
	// lwz r19,18000(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18000);
	// lwz r19,18032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18032);
	// lwz r19,18064(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18064);
	// lwz r19,18096(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18096);
	// lwz r19,18128(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18128);
	// lwz r19,18160(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18160);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,18192(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18192);
	// lwz r19,17776(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17776);
	// lwz r19,17808(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17808);
loc_826A4570:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// stfs f13,4(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 4, temp.u32);
	// stfs f0,8(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 8, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4590:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,16(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 16, temp.u32);
	// stfs f13,20(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 20, temp.u32);
	// stfs f0,24(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 24, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A45B0:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,64(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 64, temp.u32);
	// stfs f13,68(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 68, temp.u32);
	// stfs f0,72(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 72, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A45D0:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,80(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 80, temp.u32);
	// stfs f13,84(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 84, temp.u32);
	// stfs f0,88(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 88, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A45F0:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,96(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 96, temp.u32);
	// stfs f13,100(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 100, temp.u32);
	// stfs f0,104(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 104, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4610:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,32(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 32, temp.u32);
	// stfs f13,36(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 36, temp.u32);
	// stfs f0,40(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 40, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4630:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,48(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 48, temp.u32);
	// stfs f13,52(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 52, temp.u32);
	// stfs f0,56(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 56, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4650:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1408(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1408, temp.u32);
	// stfs f13,1412(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1412, temp.u32);
	// stfs f0,1416(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1416, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4670:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1424(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1424, temp.u32);
	// stfs f13,1428(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1428, temp.u32);
	// stfs f0,1432(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1432, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A4690:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1440(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1440, temp.u32);
	// stfs f13,1444(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1444, temp.u32);
	// stfs f0,1448(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1448, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A46B0:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1456(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1456, temp.u32);
	// stfs f13,1460(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1460, temp.u32);
	// stfs f0,1464(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1464, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A46D0:
	// lfs f0,104(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,1472(r31)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1472, temp.u32);
	// stfs f13,1476(r31)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1476, temp.u32);
	// stfs f0,1480(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 1480, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A46F0:
	// lfs f0,284(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 284);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// stfs f11,272(r11)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r11.u32 + 272, temp.u32);
	// stfs f12,276(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 276, temp.u32);
	// stfs f13,280(r11)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r11.u32 + 280, temp.u32);
	// stfs f0,284(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 284, temp.u32);
loc_826A4710:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A4718"))) PPC_WEAK_FUNC(sub_826A4718);
PPC_FUNC_IMPL(__imp__sub_826A4718) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A4720;
	__savegprlr_26(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// bl 0x82387b90
	ctx.lr = 0x826A472C;
	sub_82387B90(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mulli r10,r29,8176
	ctx.r10.s64 = ctx.r29.s64 * 8176;
	// lwz r11,17268(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// addi r30,r10,1360
	ctx.r30.s64 = ctx.r10.s64 + 1360;
	// bl 0x822a3998
	ctx.lr = 0x826A474C;
	sub_822A3998(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// li r31,0
	ctx.r31.s64 = 0;
	// bl 0x82387a18
	ctx.lr = 0x826A4758;
	sub_82387A18(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r3,r9,-25744
	ctx.r3.s64 = ctx.r9.s64 + -25744;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// addi r4,r30,8109
	ctx.r4.s64 = ctx.r30.s64 + 8109;
	// bl 0x82130000
	ctx.lr = 0x826A4770;
	sub_82130000(ctx, base);
	// clrlwi r27,r27,24
	ctx.r27.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x826a4804
	if (ctx.cr6.eq) goto loc_826A4804;
	// lwz r11,48(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a47e8
	if (ctx.cr6.eq) goto loc_826A47E8;
	// lwz r11,8(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a47e8
	if (ctx.cr6.eq) goto loc_826A47E8;
	// lwz r3,12(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a47e8
	if (ctx.cr6.eq) goto loc_826A47E8;
	// bl 0x82562740
	ctx.lr = 0x826A47A4;
	sub_82562740(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a47e8
	if (ctx.cr6.eq) goto loc_826A47E8;
	// lis r11,-32122
	ctx.r11.s64 = -2105147392;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r5,r11,2272
	ctx.r5.s64 = ctx.r11.s64 + 2272;
	// li r7,0
	ctx.r7.s64 = 0;
	// mr r6,r5
	ctx.r6.u64 = ctx.r5.u64;
	// addi r4,r28,224
	ctx.r4.s64 = ctx.r28.s64 + 224;
	// lfs f2,30712(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 30712);
	ctx.f2.f64 = double(temp.f32);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lfs f1,7444(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 7444);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x822a9930
	ctx.lr = 0x826A47DC;
	sub_822A9930(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x822a87a8
	ctx.lr = 0x826A47E4;
	sub_822A87A8(ctx, base);
	// b 0x826a4800
	goto loc_826A4800;
loc_826A47E8:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x822a8170
	ctx.lr = 0x826A47F4;
	sub_822A8170(ctx, base);
	// li r11,192
	ctx.r11.s64 = 192;
	// lvx128 v63,r0,r3
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r28,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r28.u32 + ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826A4800:
	// li r31,1
	ctx.r31.s64 = 1;
loc_826A4804:
	// stw r29,20(r28)
	PPC_STORE_U32(ctx.r28.u32 + 20, ctx.r29.u32);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269a1e0
	ctx.lr = 0x826A4814;
	sub_8269A1E0(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826A4818;
	sub_82387B90(ctx, base);
	// lis r11,3
	ctx.r11.s64 = 196608;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r29,1344(r3)
	PPC_STORE_U32(ctx.r3.u32 + 1344, ctx.r29.u32);
	// ori r10,r11,57424
	ctx.r10.u64 = ctx.r11.u64 | 57424;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// stbx r9,r3,r10
	PPC_STORE_U8(ctx.r3.u32 + ctx.r10.u32, ctx.r9.u8);
	// beq cr6,0x826a498c
	if (ctx.cr6.eq) goto loc_826A498C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f998
	ctx.lr = 0x826A483C;
	sub_8238F998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// rlwinm r10,r11,0,16,23
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFF00;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826a4884
	if (ctx.cr6.eq) goto loc_826A4884;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f998
	ctx.lr = 0x826A4854;
	sub_8238F998(ctx, base);
	// lwz r3,12(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// bl 0x82396408
	ctx.lr = 0x826A485C;
	sub_82396408(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826A4868;
	sub_82388580(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r31,r11,-10240
	ctx.r31.s64 = ctx.r11.s64 + -10240;
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826A487C;
	sub_82270170(ctx, base);
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// b 0x826a48bc
	goto loc_826A48BC;
loc_826A4884:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826A488C;
	sub_82388580(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r31,r11,-10240
	ctx.r31.s64 = ctx.r11.s64 + -10240;
	// lwz r28,-10240(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// lwz r27,4(r10)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x8238f1e8
	ctx.lr = 0x826A48A8;
	sub_8238F1E8(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82270170
	ctx.lr = 0x826A48B8;
	sub_82270170(ctx, base);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
loc_826A48BC:
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x82274120
	ctx.lr = 0x826A48C4;
	sub_82274120(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f998
	ctx.lr = 0x826A48CC;
	sub_8238F998(ctx, base);
	// lwz r3,12(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// bl 0x82396408
	ctx.lr = 0x826A48D4;
	sub_82396408(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826A48E0;
	sub_82388580(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82270170
	ctx.lr = 0x826A48F0;
	sub_82270170(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x822051a0
	ctx.lr = 0x826A48F8;
	sub_822051A0(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r10,-25788
	ctx.r3.s64 = ctx.r10.s64 + -25788;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// bl 0x82130000
	ctx.lr = 0x826A490C;
	sub_82130000(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f998
	ctx.lr = 0x826A4914;
	sub_8238F998(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r28,4(r9)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// bl 0x82388580
	ctx.lr = 0x826A4924;
	sub_82388580(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lwz r3,0(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r4,4(r8)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// bl 0x82270170
	ctx.lr = 0x826A4934;
	sub_82270170(ctx, base);
	// li r4,21
	ctx.r4.s64 = 21;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// bl 0x82274120
	ctx.lr = 0x826A4940;
	sub_82274120(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826A4948;
	sub_82388580(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r28,4(r7)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// bl 0x8238f6b0
	ctx.lr = 0x826A495C;
	sub_8238F6B0(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82270170
	ctx.lr = 0x826A496C;
	sub_82270170(ctx, base);
	// li r4,18
	ctx.r4.s64 = 18;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// bl 0x82274128
	ctx.lr = 0x826A4978;
	sub_82274128(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,4296(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4296);
	// bl 0x822761d0
	ctx.lr = 0x826A498C;
	sub_822761D0(ctx, base);
loc_826A498C:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A4994"))) PPC_WEAK_FUNC(sub_826A4994);
PPC_FUNC_IMPL(__imp__sub_826A4994) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A4998"))) PPC_WEAK_FUNC(sub_826A4998);
PPC_FUNC_IMPL(__imp__sub_826A4998) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// li r10,1
	ctx.r10.s64 = 1;
	// stb r10,21669(r3)
	PPC_STORE_U8(ctx.r3.u32 + 21669, ctx.r10.u8);
	// lbz r9,-29347(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29347);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826a49e4
	if (ctx.cr6.eq) goto loc_826A49E4;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-12248
	ctx.r4.s64 = ctx.r10.s64 + -12248;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A49D0;
	sub_821F9FB8(ctx, base);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,21416
	ctx.r4.s64 = ctx.r9.s64 + 21416;
	// bl 0x825ee0e0
	ctx.lr = 0x826A49E4;
	sub_825EE0E0(ctx, base);
loc_826A49E4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A49F4"))) PPC_WEAK_FUNC(sub_826A49F4);
PPC_FUNC_IMPL(__imp__sub_826A49F4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A49F8"))) PPC_WEAK_FUNC(sub_826A49F8);
PPC_FUNC_IMPL(__imp__sub_826A49F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A4A20;
	sub_822A3998(ctx, base);
	// lis r10,-32115
	ctx.r10.s64 = -2104688640;
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r8,-32252
	ctx.r8.s64 = -2113667072;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r8,-18024
	ctx.r4.s64 = ctx.r8.s64 + -18024;
	// lwz r3,-12440(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12440);
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// addi r31,r11,64
	ctx.r31.s64 = ctx.r11.s64 + 64;
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,76(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 76);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A4A50;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r3,r11,-25628
	ctx.r3.s64 = ctx.r11.s64 + -25628;
	// bne cr6,0x826a4a70
	if (!ctx.cr6.eq) goto loc_826A4A70;
	// bl 0x821fa230
	ctx.lr = 0x826A4A64;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r9,r10,16
	ctx.r9.u64 = ctx.r10.u64 | 16;
	// b 0x826a4a7c
	goto loc_826A4A7C;
loc_826A4A70:
	// bl 0x821fa230
	ctx.lr = 0x826A4A74;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
loc_826A4A7C:
	// addis r11,r30,1
	ctx.r11.s64 = ctx.r30.s64 + 65536;
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// li r10,4
	ctx.r10.s64 = 4;
	// addi r11,r11,-18992
	ctx.r11.s64 = ctx.r11.s64 + -18992;
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a4aac
	if (!ctx.cr6.eq) goto loc_826A4AAC;
	// lbz r9,2052(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2052);
	// li r8,30
	ctx.r8.s64 = 30;
	// stw r10,140(r11)
	PPC_STORE_U32(ctx.r11.u32 + 140, ctx.r10.u32);
	// stw r8,144(r11)
	PPC_STORE_U32(ctx.r11.u32 + 144, ctx.r8.u32);
	// stw r9,148(r11)
	PPC_STORE_U32(ctx.r11.u32 + 148, ctx.r9.u32);
loc_826A4AAC:
	// addis r11,r30,1
	ctx.r11.s64 = ctx.r30.s64 + 65536;
	// addi r11,r11,-18840
	ctx.r11.s64 = ctx.r11.s64 + -18840;
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a4ad4
	if (!ctx.cr6.eq) goto loc_826A4AD4;
	// lbz r9,2053(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2053);
	// li r8,31
	ctx.r8.s64 = 31;
	// stw r10,140(r11)
	PPC_STORE_U32(ctx.r11.u32 + 140, ctx.r10.u32);
	// stw r8,144(r11)
	PPC_STORE_U32(ctx.r11.u32 + 144, ctx.r8.u32);
	// stw r9,148(r11)
	PPC_STORE_U32(ctx.r11.u32 + 148, ctx.r9.u32);
loc_826A4AD4:
	// addis r11,r30,1
	ctx.r11.s64 = ctx.r30.s64 + 65536;
	// addi r11,r11,-18688
	ctx.r11.s64 = ctx.r11.s64 + -18688;
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a4afc
	if (!ctx.cr6.eq) goto loc_826A4AFC;
	// lbz r9,2054(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2054);
	// li r8,32
	ctx.r8.s64 = 32;
	// stw r10,140(r11)
	PPC_STORE_U32(ctx.r11.u32 + 140, ctx.r10.u32);
	// stw r8,144(r11)
	PPC_STORE_U32(ctx.r11.u32 + 144, ctx.r8.u32);
	// stw r9,148(r11)
	PPC_STORE_U32(ctx.r11.u32 + 148, ctx.r9.u32);
loc_826A4AFC:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25644
	ctx.r3.s64 = ctx.r11.s64 + -25644;
	// bl 0x821fa230
	ctx.lr = 0x826A4B08;
	sub_821FA230(ctx, base);
	// lwz r11,312(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 312);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// blt cr6,0x826a4b18
	if (ctx.cr6.lt) goto loc_826A4B18;
	// li r11,2
	ctx.r11.s64 = 2;
loc_826A4B18:
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r11.u32);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25660
	ctx.r3.s64 = ctx.r11.s64 + -25660;
	// bl 0x821fa230
	ctx.lr = 0x826A4B28;
	sub_821FA230(ctx, base);
	// lwz r11,316(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 316);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// blt cr6,0x826a4b38
	if (ctx.cr6.lt) goto loc_826A4B38;
	// li r11,2
	ctx.r11.s64 = 2;
loc_826A4B38:
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r11.u32);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25676
	ctx.r3.s64 = ctx.r11.s64 + -25676;
	// bl 0x821fa230
	ctx.lr = 0x826A4B48;
	sub_821FA230(ctx, base);
	// lwz r11,320(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 320);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// blt cr6,0x826a4b58
	if (ctx.cr6.lt) goto loc_826A4B58;
	// li r11,2
	ctx.r11.s64 = 2;
loc_826A4B58:
	// stw r11,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r11.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A4B74"))) PPC_WEAK_FUNC(sub_826A4B74);
PPC_FUNC_IMPL(__imp__sub_826A4B74) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A4B78"))) PPC_WEAK_FUNC(sub_826A4B78);
PPC_FUNC_IMPL(__imp__sub_826A4B78) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e8
	ctx.lr = 0x826A4B80;
	__savegprlr_24(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A4B98;
	sub_822A3998(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// ori r8,r10,39264
	ctx.r8.u64 = ctx.r10.u64 | 39264;
	// lwz r10,132(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// lwzx r11,r31,r8
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	// addi r24,r10,64
	ctx.r24.s64 = ctx.r10.s64 + 64;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x826a4bc4
	if (ctx.cr6.lt) goto loc_826A4BC4;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// mr r25,r11
	ctx.r25.u64 = ctx.r11.u64;
	// ble cr6,0x826a4bc8
	if (!ctx.cr6.gt) goto loc_826A4BC8;
loc_826A4BC4:
	// li r25,0
	ctx.r25.s64 = 0;
loc_826A4BC8:
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// addi r3,r11,12140
	ctx.r3.s64 = ctx.r11.s64 + 12140;
	// bl 0x821fa230
	ctx.lr = 0x826A4BD4;
	sub_821FA230(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A4BE0;
	sub_8268DCB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x823922c0
	ctx.lr = 0x826A4BF0;
	sub_823922C0(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// addi r26,r11,-25616
	ctx.r26.s64 = ctx.r11.s64 + -25616;
	// addi r27,r10,-19624
	ctx.r27.s64 = ctx.r10.s64 + -19624;
	// beq cr6,0x826a4c84
	if (ctx.cr6.eq) goto loc_826A4C84;
loc_826A4C10:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// bl 0x8268da78
	ctx.lr = 0x826A4C24;
	sub_8268DA78(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82130000
	ctx.lr = 0x826A4C34;
	sub_82130000(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4C44;
	sub_8268DA78(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_826A4C4C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a4c70
	if (ctx.cr6.eq) goto loc_826A4C70;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4c4c
	if (ctx.cr6.eq) goto loc_826A4C4C;
loc_826A4C70:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4c84
	if (ctx.cr6.eq) goto loc_826A4C84;
	// lwz r31,36(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x826a4c10
	if (!ctx.cr6.eq) goto loc_826A4C10;
loc_826A4C84:
	// addi r11,r30,-1
	ctx.r11.s64 = ctx.r30.s64 + -1;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// stw r11,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r11.u32);
	// addi r3,r10,12128
	ctx.r3.s64 = ctx.r10.s64 + 12128;
	// bl 0x821fa230
	ctx.lr = 0x826A4C98;
	sub_821FA230(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A4CA4;
	sub_8268DCB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x823922a0
	ctx.lr = 0x826A4CB4;
	sub_823922A0(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a4d38
	if (ctx.cr6.eq) goto loc_826A4D38;
loc_826A4CC4:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// bl 0x8268da78
	ctx.lr = 0x826A4CD8;
	sub_8268DA78(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82130000
	ctx.lr = 0x826A4CE8;
	sub_82130000(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4CF8;
	sub_8268DA78(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_826A4D00:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a4d24
	if (ctx.cr6.eq) goto loc_826A4D24;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4d00
	if (ctx.cr6.eq) goto loc_826A4D00;
loc_826A4D24:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4d38
	if (ctx.cr6.eq) goto loc_826A4D38;
	// lwz r31,36(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x826a4cc4
	if (!ctx.cr6.eq) goto loc_826A4CC4;
loc_826A4D38:
	// addi r11,r30,-1
	ctx.r11.s64 = ctx.r30.s64 + -1;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// stw r11,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r11.u32);
	// addi r3,r10,12116
	ctx.r3.s64 = ctx.r10.s64 + 12116;
	// bl 0x821fa230
	ctx.lr = 0x826A4D4C;
	sub_821FA230(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A4D58;
	sub_8268DCB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82392280
	ctx.lr = 0x826A4D68;
	sub_82392280(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a4dec
	if (ctx.cr6.eq) goto loc_826A4DEC;
loc_826A4D78:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// bl 0x8268da78
	ctx.lr = 0x826A4D8C;
	sub_8268DA78(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82130000
	ctx.lr = 0x826A4D9C;
	sub_82130000(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4DAC;
	sub_8268DA78(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_826A4DB4:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a4dd8
	if (ctx.cr6.eq) goto loc_826A4DD8;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4db4
	if (ctx.cr6.eq) goto loc_826A4DB4;
loc_826A4DD8:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4dec
	if (ctx.cr6.eq) goto loc_826A4DEC;
	// lwz r31,36(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x826a4d78
	if (!ctx.cr6.eq) goto loc_826A4D78;
loc_826A4DEC:
	// addi r11,r30,-1
	ctx.r11.s64 = ctx.r30.s64 + -1;
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// stw r11,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r11.u32);
	// addi r3,r10,12068
	ctx.r3.s64 = ctx.r10.s64 + 12068;
	// bl 0x821fa230
	ctx.lr = 0x826A4E00;
	sub_821FA230(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A4E0C;
	sub_8268DCB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82392260
	ctx.lr = 0x826A4E1C;
	sub_82392260(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a4ea0
	if (ctx.cr6.eq) goto loc_826A4EA0;
loc_826A4E2C:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// bl 0x8268da78
	ctx.lr = 0x826A4E40;
	sub_8268DA78(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82130000
	ctx.lr = 0x826A4E50;
	sub_82130000(ctx, base);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4E60;
	sub_8268DA78(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_826A4E68:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a4e8c
	if (ctx.cr6.eq) goto loc_826A4E8C;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4e68
	if (ctx.cr6.eq) goto loc_826A4E68;
loc_826A4E8C:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a4ea0
	if (ctx.cr6.eq) goto loc_826A4EA0;
	// lwz r31,36(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x826a4e2c
	if (!ctx.cr6.eq) goto loc_826A4E2C;
loc_826A4EA0:
	// addi r11,r30,-1
	ctx.r11.s64 = ctx.r30.s64 + -1;
	// stw r11,12(r28)
	PPC_STORE_U32(ctx.r28.u32 + 12, ctx.r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9238
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A4EB0"))) PPC_WEAK_FUNC(sub_826A4EB0);
PPC_FUNC_IMPL(__imp__sub_826A4EB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e0
	ctx.lr = 0x826A4EB8;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r11,-25548
	ctx.r3.s64 = ctx.r11.s64 + -25548;
	// bl 0x821fa230
	ctx.lr = 0x826A4ECC;
	sub_821FA230(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A4ED4;
	sub_8268DAF8(ctx, base);
	// li r23,1
	ctx.r23.s64 = 1;
	// addis r30,r31,1
	ctx.r30.s64 = ctx.r31.s64 + 65536;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// li r28,0
	ctx.r28.s64 = 0;
	// mr r25,r23
	ctx.r25.u64 = ctx.r23.u64;
	// li r24,0
	ctx.r24.s64 = 0;
	// addi r30,r30,-23548
	ctx.r30.s64 = ctx.r30.s64 + -23548;
	// addi r22,r11,-27236
	ctx.r22.s64 = ctx.r11.s64 + -27236;
	// addi r26,r10,-19624
	ctx.r26.s64 = ctx.r10.s64 + -19624;
loc_826A4EFC:
	// lbz r11,-4(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + -4);
	// addi r29,r30,8
	ctx.r29.s64 = ctx.r30.s64 + 8;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a4f7c
	if (ctx.cr6.eq) goto loc_826A4F7C;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// li r25,0
	ctx.r25.s64 = 0;
	// bl 0x8268db80
	ctx.lr = 0x826A4F18;
	sub_8268DB80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A4F30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r28,r28,r11
	ctx.r28.u64 = ctx.r28.u64 + ctx.r11.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4F48;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a4f5c
	if (ctx.cr6.eq) goto loc_826A4F5C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// stw r23,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r23.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A4F5C:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4F6C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a4f7c
	if (ctx.cr6.eq) goto loc_826A4F7C;
	// stw r24,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r24.u32);
	// stw r23,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r23.u32);
loc_826A4F7C:
	// addi r24,r24,1
	ctx.r24.s64 = ctx.r24.s64 + 1;
	// addi r30,r30,152
	ctx.r30.s64 = ctx.r30.s64 + 152;
	// cmpwi cr6,r24,49
	ctx.cr6.compare<int32_t>(ctx.r24.s32, 49, ctx.xer);
	// blt cr6,0x826a4efc
	if (ctx.cr6.lt) goto loc_826A4EFC;
	// clrlwi r11,r25,24
	ctx.r11.u64 = ctx.r25.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a5004
	if (ctx.cr6.eq) goto loc_826A5004;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A4FA0;
	sub_8268DB80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-25568
	ctx.r4.s64 = ctx.r11.s64 + -25568;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r9,340(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 340);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A4FBC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4FCC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a4fe0
	if (ctx.cr6.eq) goto loc_826A4FE0;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r23,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r23.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A4FE0:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A4FF0;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a5004
	if (ctx.cr6.eq) goto loc_826A5004;
	// li r11,-1
	ctx.r11.s64 = -1;
	// stw r23,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r23.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A5004:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// addi r29,r11,-21664
	ctx.r29.s64 = ctx.r11.s64 + -21664;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r31,-10244(r10)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10244);
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A5024;
	sub_821F9FB8(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r8,-25580
	ctx.r4.s64 = ctx.r8.s64 + -25580;
	// lwz r31,56(r9)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + 56);
	// bl 0x82218310
	ctx.lr = 0x826A503C;
	sub_82218310(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r7,-25592
	ctx.r4.s64 = ctx.r7.s64 + -25592;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ee2d8
	ctx.lr = 0x826A5050;
	sub_825EE2D8(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A505C;
	sub_821F9FB8(ctx, base);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r6,-25604
	ctx.r4.s64 = ctx.r6.s64 + -25604;
	// bl 0x825ee0e0
	ctx.lr = 0x826A5070;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A5078"))) PPC_WEAK_FUNC(sub_826A5078);
PPC_FUNC_IMPL(__imp__sub_826A5078) {
	PPC_FUNC_PROLOGUE();
	// addis r10,r3,1
	ctx.r10.s64 = ctx.r3.s64 + 65536;
	// li r11,0
	ctx.r11.s64 = 0;
	// clrlwi r9,r4,24
	ctx.r9.u64 = ctx.r4.u32 & 0xFF;
	// addi r10,r10,-23552
	ctx.r10.s64 = ctx.r10.s64 + -23552;
loc_826A5088:
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a50b8
	if (!ctx.cr6.eq) goto loc_826A50B8;
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// bne cr6,0x826a50b8
	if (!ctx.cr6.eq) goto loc_826A50B8;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,152
	ctx.r10.s64 = ctx.r10.s64 + 152;
	// cmpwi cr6,r11,49
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 49, ctx.xer);
	// blt cr6,0x826a5088
	if (ctx.cr6.lt) goto loc_826A5088;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25528
	ctx.r3.s64 = ctx.r11.s64 + -25528;
	// b 0x821fa230
	sub_821FA230(ctx, base);
	return;
loc_826A50B8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25548
	ctx.r3.s64 = ctx.r11.s64 + -25548;
	// b 0x821fa230
	sub_821FA230(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A50C4"))) PPC_WEAK_FUNC(sub_826A50C4);
PPC_FUNC_IMPL(__imp__sub_826A50C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A50C8"))) PPC_WEAK_FUNC(sub_826A50C8);
PPC_FUNC_IMPL(__imp__sub_826A50C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// lwz r11,-10236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// addi r3,r11,4416
	ctx.r3.s64 = ctx.r11.s64 + 4416;
	// lwz r11,4416(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4416);
	// lwz r10,64(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A50FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,-10236(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r11,4640
	ctx.r3.s64 = ctx.r11.s64 + 4640;
	// lwz r9,4640(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4640);
	// lwz r8,64(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 64);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826A5118;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A5130"))) PPC_WEAK_FUNC(sub_826A5130);
PPC_FUNC_IMPL(__imp__sub_826A5130) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A5138;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// li r28,0
	ctx.r28.s64 = 0;
	// li r29,0
	ctx.r29.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,324(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 324);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5160;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a51dc
	if (ctx.cr6.eq) goto loc_826A51DC;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r26,r11,-25448
	ctx.r26.s64 = ctx.r11.s64 + -25448;
loc_826A5170:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A517C;
	sub_8268DCB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r10,72(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5190;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826a51bc
	if (ctx.cr6.eq) goto loc_826A51BC;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A51AC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a51bc
	if (ctx.cr6.eq) goto loc_826A51BC;
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// add r28,r11,r28
	ctx.r28.u64 = ctx.r11.u64 + ctx.r28.u64;
loc_826A51BC:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,324(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 324);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A51D4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplw cr6,r29,r3
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, ctx.r3.u32, ctx.xer);
	// blt cr6,0x826a5170
	if (ctx.cr6.lt) goto loc_826A5170;
loc_826A51DC:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// addi r31,r11,-21664
	ctx.r31.s64 = ctx.r11.s64 + -21664;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r29,-10244(r10)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10244);
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A51FC;
	sub_821F9FB8(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r4,r8,-25464
	ctx.r4.s64 = ctx.r8.s64 + -25464;
	// lwz r29,56(r9)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r9.u32 + 56);
	// bl 0x82218310
	ctx.lr = 0x826A5214;
	sub_82218310(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r7,-25476
	ctx.r4.s64 = ctx.r7.s64 + -25476;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x825ee2d8
	ctx.lr = 0x826A5228;
	sub_825EE2D8(ctx, base);
	// stw r28,21616(r27)
	PPC_STORE_U32(ctx.r27.u32 + 21616, ctx.r28.u32);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A5238;
	sub_821F9FB8(ctx, base);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// addi r4,r6,-25488
	ctx.r4.s64 = ctx.r6.s64 + -25488;
	// lwz r5,21616(r27)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r27.u32 + 21616);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// bl 0x825ee0e0
	ctx.lr = 0x826A524C;
	sub_825EE0E0(ctx, base);
	// lis r5,-32121
	ctx.r5.s64 = -2105081856;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r3,18508(r5)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r5.u32 + 18508);
	// bl 0x826b94e8
	ctx.lr = 0x826A525C;
	sub_826B94E8(ctx, base);
	// clrlwi r4,r3,24
	ctx.r4.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// bne cr6,0x826a5298
	if (!ctx.cr6.eq) goto loc_826A5298;
	// lbz r11,21670(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 21670);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a5298
	if (!ctx.cr6.eq) goto loc_826A5298;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lbz r10,-29346(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29346);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826a5298
	if (!ctx.cr6.eq) goto loc_826A5298;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A5290;
	sub_821F9FB8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x826a52a8
	goto loc_826A52A8;
loc_826A5298:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A52A4;
	sub_821F9FB8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_826A52A8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-25500
	ctx.r4.s64 = ctx.r11.s64 + -25500;
	// bl 0x825ee0e0
	ctx.lr = 0x826A52B8;
	sub_825EE0E0(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A52C0"))) PPC_WEAK_FUNC(sub_826A52C0);
PPC_FUNC_IMPL(__imp__sub_826A52C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A52C8;
	__savegprlr_27(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r31,0
	ctx.r31.s64 = 0;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
	// lis r28,-32121
	ctx.r28.s64 = -2105081856;
	// addi r27,r11,-21664
	ctx.r27.s64 = ctx.r11.s64 + -21664;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,-10236(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A52F4;
	sub_821F9FB8(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r10,-25488
	ctx.r4.s64 = ctx.r10.s64 + -25488;
	// bl 0x825ee120
	ctx.lr = 0x826A5308;
	sub_825EE120(ctx, base);
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// lwz r3,-10236(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A5318;
	sub_821F9FB8(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r5,r1,84
	ctx.r5.s64 = ctx.r1.s64 + 84;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r9,-25500
	ctx.r4.s64 = ctx.r9.s64 + -25500;
	// bl 0x825ee120
	ctx.lr = 0x826A532C;
	sub_825EE120(ctx, base);
	// lwz r8,80(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// bne cr6,0x826a5378
	if (!ctx.cr6.eq) goto loc_826A5378;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A5348;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addis r3,r30,1
	ctx.r3.s64 = ctx.r30.s64 + 65536;
	// addi r3,r3,-15944
	ctx.r3.s64 = ctx.r3.s64 + -15944;
	// lwz r9,48(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// addi r4,r11,20
	ctx.r4.s64 = ctx.r11.s64 + 20;
	// bl 0x82397e88
	ctx.lr = 0x826A5364;
	sub_82397E88(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25352
	ctx.r3.s64 = ctx.r8.s64 + -25352;
	// bl 0x821fa230
	ctx.lr = 0x826A5370;
	sub_821FA230(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A5378:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a5398
	if (ctx.cr6.eq) goto loc_826A5398;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25376
	ctx.r3.s64 = ctx.r11.s64 + -25376;
	// bl 0x821fa230
	ctx.lr = 0x826A5390;
	sub_821FA230(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A5398:
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq cr6,0x826a53b4
	if (ctx.cr6.eq) goto loc_826A53B4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25408
	ctx.r3.s64 = ctx.r11.s64 + -25408;
	// bl 0x821fa230
	ctx.lr = 0x826A53AC;
	sub_821FA230(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A53B4:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25436
	ctx.r3.s64 = ctx.r11.s64 + -25436;
	// bl 0x821fa230
	ctx.lr = 0x826A53C0;
	sub_821FA230(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A53C8"))) PPC_WEAK_FUNC(sub_826A53C8);
PPC_FUNC_IMPL(__imp__sub_826A53C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A53D0;
	__savegprlr_29(ctx, base);
	// addi r12,r1,-32
	ctx.r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823db9d8
	ctx.lr = 0x826A53D8;
	sub_823DB9D8(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A53F4;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r10,r11,-16
	ctx.r10.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826a540c
	if (!ctx.cr6.eq) goto loc_826A540C;
	// li r10,0
	ctx.r10.s64 = 0;
loc_826A540C:
	// lfs f31,4120(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4120);
	ctx.f31.f64 = double(temp.f32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r10,r11,-16
	ctx.r10.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826a5420
	if (!ctx.cr6.eq) goto loc_826A5420;
	// li r10,0
	ctx.r10.s64 = 0;
loc_826A5420:
	// lfs f30,4116(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4116);
	ctx.f30.f64 = double(temp.f32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r10,r11,-16
	ctx.r10.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826a5434
	if (!ctx.cr6.eq) goto loc_826A5434;
	// li r10,0
	ctx.r10.s64 = 0;
loc_826A5434:
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lfs f29,4124(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 4124);
	ctx.f29.f64 = double(temp.f32);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826a5448
	if (!ctx.cr6.eq) goto loc_826A5448;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5448:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// lfs f28,4112(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 4112);
	ctx.f28.f64 = double(temp.f32);
	// bl 0x822a3998
	ctx.lr = 0x826A5458;
	sub_822A3998(ctx, base);
	// lwz r3,48(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// bl 0x82332098
	ctx.lr = 0x826A5460;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// beq cr6,0x826a5488
	if (ctx.cr6.eq) goto loc_826A5488;
	// bl 0x821f9fb8
	ctx.lr = 0x826A5480;
	sub_821F9FB8(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x826a5490
	goto loc_826A5490;
loc_826A5488:
	// bl 0x821f9fb8
	ctx.lr = 0x826A548C;
	sub_821F9FB8(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
loc_826A5490:
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r9,-25340
	ctx.r4.s64 = ctx.r9.s64 + -25340;
	// bl 0x825ee0e0
	ctx.lr = 0x826A54A0;
	sub_825EE0E0(ctx, base);
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r3,r11,-15924
	ctx.r3.s64 = ctx.r11.s64 + -15924;
	// bl 0x821e6800
	ctx.lr = 0x826A54AC;
	sub_821E6800(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f0,14992(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14992);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	ctx.cr6.compare(ctx.f31.f64, ctx.f0.f64);
	// bgt cr6,0x826a5510
	if (ctx.cr6.gt) goto loc_826A5510;
	// fcmpu cr6,f30,f0
	ctx.cr6.compare(ctx.f30.f64, ctx.f0.f64);
	// bgt cr6,0x826a5510
	if (ctx.cr6.gt) goto loc_826A5510;
	// fcmpu cr6,f29,f0
	ctx.cr6.compare(ctx.f29.f64, ctx.f0.f64);
	// bgt cr6,0x826a5510
	if (ctx.cr6.gt) goto loc_826A5510;
	// fcmpu cr6,f28,f0
	ctx.cr6.compare(ctx.f28.f64, ctx.f0.f64);
	// bgt cr6,0x826a5510
	if (ctx.cr6.gt) goto loc_826A5510;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A54E0;
	sub_822A3998(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x822a7388
	ctx.lr = 0x826A54E8;
	sub_822A7388(ctx, base);
	// lwz r10,48(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 48);
	// li r11,0
	ctx.r11.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r9,8(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// lwz r8,16(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// sth r11,46(r8)
	PPC_STORE_U16(ctx.r8.u32 + 46, ctx.r11.u16);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	ctx.r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823dba24
	ctx.lr = 0x826A550C;
	__restfpr_28(ctx, base);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A5510:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-32
	ctx.r12.s64 = ctx.r1.s64 + -32;
	// bl 0x823dba24
	ctx.lr = 0x826A5520;
	__restfpr_28(ctx, base);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A5524"))) PPC_WEAK_FUNC(sub_826A5524);
PPC_FUNC_IMPL(__imp__sub_826A5524) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A5528"))) PPC_WEAK_FUNC(sub_826A5528);
PPC_FUNC_IMPL(__imp__sub_826A5528) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A5530;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A5548;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// ori r8,r9,39256
	ctx.r8.u64 = ctx.r9.u64 | 39256;
	// addi r3,r11,-25304
	ctx.r3.s64 = ctx.r11.s64 + -25304;
	// lwz r7,132(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// lbzx r6,r31,r8
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r31.u32 + ctx.r8.u32);
	// cmplwi cr6,r6,1
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 1, ctx.xer);
	// lwz r31,1664(r7)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1664);
	// lwz r30,1668(r7)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1668);
	// lbz r29,2200(r7)
	ctx.r29.u64 = PPC_LOAD_U8(ctx.r7.u32 + 2200);
	// bne cr6,0x826a5634
	if (!ctx.cr6.eq) goto loc_826A5634;
	// bl 0x821fa230
	ctx.lr = 0x826A557C;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A558C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25316
	ctx.r3.s64 = ctx.r8.s64 + -25316;
	// bl 0x821fa230
	ctx.lr = 0x826A5598;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,84(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 84);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A55A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmpwi cr6,r31,1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 1, ctx.xer);
	// addi r3,r11,-25328
	ctx.r3.s64 = ctx.r11.s64 + -25328;
	// bgt cr6,0x826a55e8
	if (ctx.cr6.gt) goto loc_826A55E8;
	// bl 0x821fa230
	ctx.lr = 0x826A55BC;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A55CC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25972
	ctx.r3.s64 = ctx.r8.s64 + -25972;
	// bl 0x821fa230
	ctx.lr = 0x826A55D8;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,80(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 80);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// b 0x826a5698
	goto loc_826A5698;
loc_826A55E8:
	// bl 0x821fa230
	ctx.lr = 0x826A55EC;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A55FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// addi r3,r11,-25972
	ctx.r3.s64 = ctx.r11.s64 + -25972;
	// bne cr6,0x826a5620
	if (!ctx.cr6.eq) goto loc_826A5620;
	// bl 0x821fa230
	ctx.lr = 0x826A5610;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// b 0x826a5698
	goto loc_826A5698;
loc_826A5620:
	// bl 0x821fa230
	ctx.lr = 0x826A5624;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// b 0x826a5698
	goto loc_826A5698;
loc_826A5634:
	// bl 0x821fa230
	ctx.lr = 0x826A5638;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A5648;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25316
	ctx.r3.s64 = ctx.r8.s64 + -25316;
	// bl 0x821fa230
	ctx.lr = 0x826A5654;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,84(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 84);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A5664;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// addi r3,r5,-25328
	ctx.r3.s64 = ctx.r5.s64 + -25328;
	// bl 0x821fa230
	ctx.lr = 0x826A5670;
	sub_821FA230(ctx, base);
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,80(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 80);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x826A5680;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-25972
	ctx.r3.s64 = ctx.r10.s64 + -25972;
	// bl 0x821fa230
	ctx.lr = 0x826A568C;
	sub_821FA230(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,80(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 80);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
loc_826A5698:
	// bctrl 
	ctx.lr = 0x826A569C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r11,r29,24
	ctx.r11.u64 = ctx.r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// addi r3,r11,-5160
	ctx.r3.s64 = ctx.r11.s64 + -5160;
	// beq cr6,0x826a56cc
	if (ctx.cr6.eq) goto loc_826A56CC;
	// bl 0x821fa230
	ctx.lr = 0x826A56B4;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A56C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A56CC:
	// bl 0x821fa230
	ctx.lr = 0x826A56D0;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A56E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A56E8"))) PPC_WEAK_FUNC(sub_826A56E8);
PPC_FUNC_IMPL(__imp__sub_826A56E8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e0
	ctx.lr = 0x826A56F0;
	__savegprlr_22(ctx, base);
	// stwu r1,-944(r1)
	ea = -944 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// li r11,1
	ctx.r11.s64 = 1;
	// lis r9,-32121
	ctx.r9.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// stb r11,-29341(r10)
	PPC_STORE_U8(ctx.r10.u32 + -29341, ctx.r11.u8);
	// lwz r3,17268(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A5714;
	sub_822A3998(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// li r4,128
	ctx.r4.s64 = 128;
	// addi r5,r7,-25244
	ctx.r5.s64 = ctx.r7.s64 + -25244;
	// addi r3,r1,720
	ctx.r3.s64 = ctx.r1.s64 + 720;
	// lwz r6,48(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 48);
	// lwz r11,132(r6)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 132);
	// addi r23,r11,64
	ctx.r23.s64 = ctx.r11.s64 + 64;
	// bl 0x82137a08
	ctx.lr = 0x826A5738;
	sub_82137A08(ctx, base);
	// lis r11,-32131
	ctx.r11.s64 = -2105737216;
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// addi r31,r11,30576
	ctx.r31.s64 = ctx.r11.s64 + 30576;
	// addi r4,r5,-27620
	ctx.r4.s64 = ctx.r5.s64 + -27620;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821ca540
	ctx.lr = 0x826A5750;
	sub_821CA540(ctx, base);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r5,r4,-25252
	ctx.r5.s64 = ctx.r4.s64 + -25252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,720
	ctx.r4.s64 = ctx.r1.s64 + 720;
	// bl 0x821ca6a8
	ctx.lr = 0x826A576C;
	sub_821CA6A8(ctx, base);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r22,0
	ctx.cr6.compare<uint32_t>(ctx.r22.u32, 0, ctx.xer);
	// bne cr6,0x826a5788
	if (!ctx.cr6.eq) goto loc_826A5788;
	// bl 0x821c9a90
	ctx.lr = 0x826A5780;
	sub_821C9A90(ctx, base);
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
loc_826A5788:
	// bl 0x821c9a90
	ctx.lr = 0x826A578C;
	sub_821C9A90(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r27,0
	ctx.r27.s64 = 0;
	// addi r10,r11,-29924
	ctx.r10.s64 = ctx.r11.s64 + -29924;
	// stw r27,704(r1)
	PPC_STORE_U32(ctx.r1.u32 + 704, ctx.r27.u32);
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// stw r10,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r10.u32);
	// mr r5,r22
	ctx.r5.u64 = ctx.r22.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// lwz r4,4416(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4416);
	// bl 0x821cf7b8
	ctx.lr = 0x826A57B4;
	sub_821CF7B8(ctx, base);
loc_826A57B4:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cffe8
	ctx.lr = 0x826A57CC;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a57b4
	if (ctx.cr6.eq) goto loc_826A57B4;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// addi r3,r11,12140
	ctx.r3.s64 = ctx.r11.s64 + 12140;
	// bl 0x821fa230
	ctx.lr = 0x826A57E0;
	sub_821FA230(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A57E8;
	sub_8268DAF8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821d0490
	ctx.lr = 0x826A57F4;
	sub_821D0490(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r24,5
	ctx.r24.s64 = 5;
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// addi r26,r11,-19624
	ctx.r26.s64 = ctx.r11.s64 + -19624;
	// ble cr6,0x826a589c
	if (!ctx.cr6.gt) goto loc_826A589C;
	// addi r31,r25,28
	ctx.r31.s64 = ctx.r25.s64 + 28;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
loc_826A5814:
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cfaa8
	ctx.lr = 0x826A5824;
	sub_821CFAA8(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A582C;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5844;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5854;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a5864
	if (ctx.cr6.eq) goto loc_826A5864;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A5864:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x82392340
	ctx.lr = 0x826A5870;
	sub_82392340(ctx, base);
	// lbz r11,2046(r23)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r23.u32 + 2046);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x826a5890
	if (!ctx.cr6.eq) goto loc_826A5890;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,108(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 108);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5890;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A5890:
	// addic. r28,r28,-1
	ctx.xer.ca = ctx.r28.u32 > 0;
	ctx.r28.s64 = ctx.r28.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// addi r31,r31,168
	ctx.r31.s64 = ctx.r31.s64 + 168;
	// bne 0x826a5814
	if (!ctx.cr0.eq) goto loc_826A5814;
loc_826A589C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r31,r11,-25268
	ctx.r31.s64 = ctx.r11.s64 + -25268;
loc_826A58A4:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cffe8
	ctx.lr = 0x826A58BC;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a58a4
	if (ctx.cr6.eq) goto loc_826A58A4;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823d90b0
	ctx.lr = 0x826A58D0;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a58a4
	if (ctx.cr6.eq) goto loc_826A58A4;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// addi r3,r11,12128
	ctx.r3.s64 = ctx.r11.s64 + 12128;
	// bl 0x821fa230
	ctx.lr = 0x826A58E4;
	sub_821FA230(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A58EC;
	sub_8268DAF8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821d0490
	ctx.lr = 0x826A58F8;
	sub_821D0490(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x826a599c
	if (!ctx.cr6.gt) goto loc_826A599C;
	// mulli r11,r27,168
	ctx.r11.s64 = ctx.r27.s64 * 168;
	// add r11,r11,r25
	ctx.r11.u64 = ctx.r11.u64 + ctx.r25.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r31,r11,28
	ctx.r31.s64 = ctx.r11.s64 + 28;
	// add r27,r3,r27
	ctx.r27.u64 = ctx.r3.u64 + ctx.r27.u64;
loc_826A5914:
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cfaa8
	ctx.lr = 0x826A5924;
	sub_821CFAA8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A592C;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5944;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5954;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a5964
	if (ctx.cr6.eq) goto loc_826A5964;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A5964:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x823922e0
	ctx.lr = 0x826A5970;
	sub_823922E0(ctx, base);
	// lbz r11,2048(r23)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r23.u32 + 2048);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x826a5990
	if (!ctx.cr6.eq) goto loc_826A5990;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,108(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 108);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5990;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A5990:
	// addic. r29,r29,-1
	ctx.xer.ca = ctx.r29.u32 > 0;
	ctx.r29.s64 = ctx.r29.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// addi r31,r31,168
	ctx.r31.s64 = ctx.r31.s64 + 168;
	// bne 0x826a5914
	if (!ctx.cr0.eq) goto loc_826A5914;
loc_826A599C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r31,r11,-25280
	ctx.r31.s64 = ctx.r11.s64 + -25280;
loc_826A59A4:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cffe8
	ctx.lr = 0x826A59BC;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a59a4
	if (ctx.cr6.eq) goto loc_826A59A4;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823d90b0
	ctx.lr = 0x826A59D0;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a59a4
	if (ctx.cr6.eq) goto loc_826A59A4;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// addi r3,r11,12116
	ctx.r3.s64 = ctx.r11.s64 + 12116;
	// bl 0x821fa230
	ctx.lr = 0x826A59E4;
	sub_821FA230(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A59EC;
	sub_8268DAF8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821d0490
	ctx.lr = 0x826A59F8;
	sub_821D0490(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x826a5a9c
	if (!ctx.cr6.gt) goto loc_826A5A9C;
	// mulli r11,r27,168
	ctx.r11.s64 = ctx.r27.s64 * 168;
	// add r11,r11,r25
	ctx.r11.u64 = ctx.r11.u64 + ctx.r25.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r31,r11,28
	ctx.r31.s64 = ctx.r11.s64 + 28;
	// add r27,r3,r27
	ctx.r27.u64 = ctx.r3.u64 + ctx.r27.u64;
loc_826A5A14:
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cfaa8
	ctx.lr = 0x826A5A24;
	sub_821CFAA8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A5A2C;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5A44;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5A54;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a5a64
	if (ctx.cr6.eq) goto loc_826A5A64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A5A64:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x823923a0
	ctx.lr = 0x826A5A70;
	sub_823923A0(ctx, base);
	// lbz r11,2044(r23)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r23.u32 + 2044);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x826a5a90
	if (!ctx.cr6.eq) goto loc_826A5A90;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,108(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 108);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5A90;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A5A90:
	// addic. r29,r29,-1
	ctx.xer.ca = ctx.r29.u32 > 0;
	ctx.r29.s64 = ctx.r29.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// addi r31,r31,168
	ctx.r31.s64 = ctx.r31.s64 + 168;
	// bne 0x826a5a14
	if (!ctx.cr0.eq) goto loc_826A5A14;
loc_826A5A9C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r31,r11,-25292
	ctx.r31.s64 = ctx.r11.s64 + -25292;
loc_826A5AA4:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cffe8
	ctx.lr = 0x826A5ABC;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a5aa4
	if (ctx.cr6.eq) goto loc_826A5AA4;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823d90b0
	ctx.lr = 0x826A5AD0;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a5aa4
	if (ctx.cr6.eq) goto loc_826A5AA4;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// addi r3,r11,12068
	ctx.r3.s64 = ctx.r11.s64 + 12068;
	// bl 0x821fa230
	ctx.lr = 0x826A5AE4;
	sub_821FA230(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A5AEC;
	sub_8268DAF8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821d0490
	ctx.lr = 0x826A5AF8;
	sub_821D0490(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x826a5b98
	if (!ctx.cr6.gt) goto loc_826A5B98;
	// mulli r11,r27,168
	ctx.r11.s64 = ctx.r27.s64 * 168;
	// add r11,r11,r25
	ctx.r11.u64 = ctx.r11.u64 + ctx.r25.u64;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r31,r11,28
	ctx.r31.s64 = ctx.r11.s64 + 28;
loc_826A5B10:
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x821cfaa8
	ctx.lr = 0x826A5B20;
	sub_821CFAA8(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A5B28;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5B40;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5B50;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a5b60
	if (ctx.cr6.eq) goto loc_826A5B60;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A5B60:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x82392400
	ctx.lr = 0x826A5B6C;
	sub_82392400(ctx, base);
	// lbz r11,2042(r23)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r23.u32 + 2042);
	// cmpw cr6,r3,r11
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x826a5b8c
	if (!ctx.cr6.eq) goto loc_826A5B8C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,108(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 108);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5B8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A5B8C:
	// addic. r29,r29,-1
	ctx.xer.ca = ctx.r29.u32 > 0;
	ctx.r29.s64 = ctx.r29.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// addi r31,r31,168
	ctx.r31.s64 = ctx.r31.s64 + 168;
	// bne 0x826a5b10
	if (!ctx.cr0.eq) goto loc_826A5B10;
loc_826A5B98:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x821be610
	ctx.lr = 0x826A5BA0;
	sub_821BE610(ctx, base);
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A5BA8"))) PPC_WEAK_FUNC(sub_826A5BA8);
PPC_FUNC_IMPL(__imp__sub_826A5BA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e0
	ctx.lr = 0x826A5BB0;
	__savegprlr_22(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// mr r28,r5
	ctx.r28.u64 = ctx.r5.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A5BD0;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25228
	ctx.r3.s64 = ctx.r8.s64 + -25228;
	// lwz r7,48(r10)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lfs f0,3796(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// lwz r6,8(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 8);
	// lwz r11,132(r7)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + 132);
	// addi r24,r11,64
	ctx.r24.s64 = ctx.r11.s64 + 64;
	// stfs f0,588(r6)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r6.u32 + 588, temp.u32);
	// bl 0x821fa230
	ctx.lr = 0x826A5BFC;
	sub_821FA230(ctx, base);
	// lwz r5,0(r3)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r4,336(r5)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r5.u32 + 336);
	// mtctr r4
	ctx.ctr.u64 = ctx.r4.u64;
	// bctrl 
	ctx.lr = 0x826A5C0C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addis r29,r22,1
	ctx.r29.s64 = ctx.r22.s64 + 65536;
	// lis r31,-32111
	ctx.r31.s64 = -2104426496;
	// addi r29,r29,-26272
	ctx.r29.s64 = ctx.r29.s64 + -26272;
	// stw r3,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r3.u32);
	// lbz r11,-29341(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + -29341);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a5c40
	if (ctx.cr6.eq) goto loc_826A5C40;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x826a4b78
	ctx.lr = 0x826A5C30;
	sub_826A4B78(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,-29341(r31)
	PPC_STORE_U8(ctx.r31.u32 + -29341, ctx.r11.u8);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
loc_826A5C40:
	// addi r31,r24,2032
	ctx.r31.s64 = ctx.r24.s64 + 2032;
	// cmpwi cr6,r3,2
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 2, ctx.xer);
	// bne cr6,0x826a5c60
	if (!ctx.cr6.eq) goto loc_826A5C60;
	// lbz r27,14(r31)
	ctx.r27.u64 = PPC_LOAD_U8(ctx.r31.u32 + 14);
	// lbz r26,12(r31)
	ctx.r26.u64 = PPC_LOAD_U8(ctx.r31.u32 + 12);
	// lbz r25,16(r31)
	ctx.r25.u64 = PPC_LOAD_U8(ctx.r31.u32 + 16);
	// lbz r23,10(r31)
	ctx.r23.u64 = PPC_LOAD_U8(ctx.r31.u32 + 10);
	// b 0x826a5c74
	goto loc_826A5C74;
loc_826A5C60:
	// add r11,r3,r31
	ctx.r11.u64 = ctx.r3.u64 + ctx.r31.u64;
	// lbz r27,14(r11)
	ctx.r27.u64 = PPC_LOAD_U8(ctx.r11.u32 + 14);
	// lbz r26,12(r11)
	ctx.r26.u64 = PPC_LOAD_U8(ctx.r11.u32 + 12);
	// lbz r25,16(r11)
	ctx.r25.u64 = PPC_LOAD_U8(ctx.r11.u32 + 16);
	// lbz r23,10(r11)
	ctx.r23.u64 = PPC_LOAD_U8(ctx.r11.u32 + 10);
loc_826A5C74:
	// cmplwi cr6,r28,4
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 4, ctx.xer);
	// bgt cr6,0x826a60dc
	if (ctx.cr6.gt) goto loc_826A60DC;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,23700
	ctx.r12.s64 = ctx.r12.s64 + 23700;
	// rlwinm r0,r28,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r28.u64) {
	case 0:
		goto loc_826A5CA8;
	case 1:
		goto loc_826A5D0C;
	case 2:
		goto loc_826A5DE8;
	case 3:
		goto loc_826A5EBC;
	case 4:
		goto loc_826A5F90;
	default:
		__builtin_unreachable();
	}
	// lwz r19,23720(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 23720);
	// lwz r19,23820(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 23820);
	// lwz r19,24040(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24040);
	// lwz r19,24252(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24252);
	// lwz r19,24464(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 24464);
loc_826A5CA8:
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r5,0
	ctx.r5.s64 = 0;
	// bne cr6,0x826a5cd0
	if (!ctx.cr6.eq) goto loc_826A5CD0;
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x826b34f8
	ctx.lr = 0x826A5CC0;
	sub_826B34F8(ctx, base);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x826a4b78
	ctx.lr = 0x826A5CC8;
	sub_826A4B78(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
loc_826A5CD0:
	// cmpwi cr6,r3,1
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 1, ctx.xer);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bne cr6,0x826a5cf4
	if (!ctx.cr6.eq) goto loc_826A5CF4;
	// li r4,14
	ctx.r4.s64 = 14;
	// bl 0x826b34f8
	ctx.lr = 0x826A5CE4;
	sub_826B34F8(ctx, base);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x826a4b78
	ctx.lr = 0x826A5CEC;
	sub_826A4B78(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
loc_826A5CF4:
	// li r4,8
	ctx.r4.s64 = 8;
	// bl 0x826b34f8
	ctx.lr = 0x826A5CFC;
	sub_826B34F8(ctx, base);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x826a4b78
	ctx.lr = 0x826A5D04;
	sub_826A4B78(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
loc_826A5D0C:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-19624
	ctx.r4.s64 = ctx.r11.s64 + -19624;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5D20;
	sub_8268DA78(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x82392340
	ctx.lr = 0x826A5D30;
	sub_82392340(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5d50
	if (!ctx.cr6.eq) goto loc_826A5D50;
	// addi r11,r3,12
	ctx.r11.s64 = ctx.r3.s64 + 12;
	// clrlwi r10,r11,24
	ctx.r10.u64 = ctx.r11.u32 & 0xFF;
	// stb r10,14(r31)
	PPC_STORE_U8(ctx.r31.u32 + 14, ctx.r10.u8);
	// stb r10,15(r31)
	PPC_STORE_U8(ctx.r31.u32 + 15, ctx.r10.u8);
	// b 0x826a5d5c
	goto loc_826A5D5C;
loc_826A5D50:
	// add r9,r11,r31
	ctx.r9.u64 = ctx.r11.u64 + ctx.r31.u64;
	// addi r10,r3,12
	ctx.r10.s64 = ctx.r3.s64 + 12;
	// stb r10,14(r9)
	PPC_STORE_U8(ctx.r9.u32 + 14, ctx.r10.u8);
loc_826A5D5C:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8269efe0
	ctx.lr = 0x826A5D70;
	sub_8269EFE0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a5ddc
	if (!ctx.cr6.eq) goto loc_826A5DDC;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5d8c
	if (!ctx.cr6.eq) goto loc_826A5D8C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5D8C:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r27,14(r11)
	PPC_STORE_U8(ctx.r11.u32 + 14, ctx.r27.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5da4
	if (!ctx.cr6.eq) goto loc_826A5DA4;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5DA4:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r26,12(r11)
	PPC_STORE_U8(ctx.r11.u32 + 12, ctx.r26.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5dbc
	if (!ctx.cr6.eq) goto loc_826A5DBC;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5DBC:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r25,16(r11)
	PPC_STORE_U8(ctx.r11.u32 + 16, ctx.r25.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5dd4
	if (!ctx.cr6.eq) goto loc_826A5DD4;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5DD4:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r23,10(r11)
	PPC_STORE_U8(ctx.r11.u32 + 10, ctx.r23.u8);
loc_826A5DDC:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// b 0x826a60ac
	goto loc_826A60AC;
loc_826A5DE8:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-19624
	ctx.r4.s64 = ctx.r11.s64 + -19624;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5DFC;
	sub_8268DA78(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x823922e0
	ctx.lr = 0x826A5E0C;
	sub_823922E0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5e28
	if (!ctx.cr6.eq) goto loc_826A5E28;
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// stb r11,16(r31)
	PPC_STORE_U8(ctx.r31.u32 + 16, ctx.r11.u8);
	// stb r11,17(r31)
	PPC_STORE_U8(ctx.r31.u32 + 17, ctx.r11.u8);
	// b 0x826a5e30
	goto loc_826A5E30;
loc_826A5E28:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r3,16(r11)
	PPC_STORE_U8(ctx.r11.u32 + 16, ctx.r3.u8);
loc_826A5E30:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,2
	ctx.r5.s64 = 2;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8269efe0
	ctx.lr = 0x826A5E44;
	sub_8269EFE0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a5ddc
	if (!ctx.cr6.eq) goto loc_826A5DDC;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5e60
	if (!ctx.cr6.eq) goto loc_826A5E60;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5E60:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r27,14(r11)
	PPC_STORE_U8(ctx.r11.u32 + 14, ctx.r27.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5e78
	if (!ctx.cr6.eq) goto loc_826A5E78;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5E78:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r26,12(r11)
	PPC_STORE_U8(ctx.r11.u32 + 12, ctx.r26.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5e90
	if (!ctx.cr6.eq) goto loc_826A5E90;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5E90:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r25,16(r11)
	PPC_STORE_U8(ctx.r11.u32 + 16, ctx.r25.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5dd4
	if (!ctx.cr6.eq) goto loc_826A5DD4;
	// li r11,0
	ctx.r11.s64 = 0;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r23,10(r11)
	PPC_STORE_U8(ctx.r11.u32 + 10, ctx.r23.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// b 0x826a60ac
	goto loc_826A60AC;
loc_826A5EBC:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-19624
	ctx.r4.s64 = ctx.r11.s64 + -19624;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5ED0;
	sub_8268DA78(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x823923a0
	ctx.lr = 0x826A5EE0;
	sub_823923A0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5efc
	if (!ctx.cr6.eq) goto loc_826A5EFC;
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// stb r11,12(r31)
	PPC_STORE_U8(ctx.r31.u32 + 12, ctx.r11.u8);
	// stb r11,13(r31)
	PPC_STORE_U8(ctx.r31.u32 + 13, ctx.r11.u8);
	// b 0x826a5f04
	goto loc_826A5F04;
loc_826A5EFC:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r3,12(r11)
	PPC_STORE_U8(ctx.r11.u32 + 12, ctx.r3.u8);
loc_826A5F04:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8269efe0
	ctx.lr = 0x826A5F18;
	sub_8269EFE0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a5ddc
	if (!ctx.cr6.eq) goto loc_826A5DDC;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5f34
	if (!ctx.cr6.eq) goto loc_826A5F34;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5F34:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r27,14(r11)
	PPC_STORE_U8(ctx.r11.u32 + 14, ctx.r27.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5f4c
	if (!ctx.cr6.eq) goto loc_826A5F4C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5F4C:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r26,12(r11)
	PPC_STORE_U8(ctx.r11.u32 + 12, ctx.r26.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5f64
	if (!ctx.cr6.eq) goto loc_826A5F64;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A5F64:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r25,16(r11)
	PPC_STORE_U8(ctx.r11.u32 + 16, ctx.r25.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a5dd4
	if (!ctx.cr6.eq) goto loc_826A5DD4;
	// li r11,0
	ctx.r11.s64 = 0;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r23,10(r11)
	PPC_STORE_U8(ctx.r11.u32 + 10, ctx.r23.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// b 0x826a60ac
	goto loc_826A60AC;
loc_826A5F90:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A5FA4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addi r4,r9,-19624
	ctx.r4.s64 = ctx.r9.s64 + -19624;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A5FBC;
	sub_8268DA78(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// li r4,15
	ctx.r4.s64 = 15;
	// addi r5,r7,9572
	ctx.r5.s64 = ctx.r7.s64 + 9572;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r6,4(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// bl 0x82137a08
	ctx.lr = 0x826A5FD8;
	sub_82137A08(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82392400
	ctx.lr = 0x826A5FE4;
	sub_82392400(ctx, base);
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r5,r6,32684
	ctx.r5.s64 = ctx.r6.s64 + 32684;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// li r4,15
	ctx.r4.s64 = 15;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82137a08
	ctx.lr = 0x826A6000;
	sub_82137A08(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a601c
	if (!ctx.cr6.eq) goto loc_826A601C;
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// stb r11,10(r31)
	PPC_STORE_U8(ctx.r31.u32 + 10, ctx.r11.u8);
	// stb r11,11(r31)
	PPC_STORE_U8(ctx.r31.u32 + 11, ctx.r11.u8);
	// b 0x826a6024
	goto loc_826A6024;
loc_826A601C:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r30,10(r11)
	PPC_STORE_U8(ctx.r11.u32 + 10, ctx.r30.u8);
loc_826A6024:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// lwz r4,0(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r5,4
	ctx.r5.s64 = 4;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8269efe0
	ctx.lr = 0x826A6038;
	sub_8269EFE0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a60d0
	if (!ctx.cr6.eq) goto loc_826A60D0;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a6054
	if (!ctx.cr6.eq) goto loc_826A6054;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A6054:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r27,14(r11)
	PPC_STORE_U8(ctx.r11.u32 + 14, ctx.r27.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a606c
	if (!ctx.cr6.eq) goto loc_826A606C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A606C:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r26,12(r11)
	PPC_STORE_U8(ctx.r11.u32 + 12, ctx.r26.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a6084
	if (!ctx.cr6.eq) goto loc_826A6084;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A6084:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r25,16(r11)
	PPC_STORE_U8(ctx.r11.u32 + 16, ctx.r25.u8);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826a609c
	if (!ctx.cr6.eq) goto loc_826A609C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826A609C:
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stb r23,10(r11)
	PPC_STORE_U8(ctx.r11.u32 + 10, ctx.r23.u8);
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r10,2
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 2, ctx.xer);
loc_826A60AC:
	// bne cr6,0x826a60d0
	if (!ctx.cr6.eq) goto loc_826A60D0;
	// lbz r11,14(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 14);
	// lbz r8,10(r31)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r31.u32 + 10);
	// lbz r9,16(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 16);
	// lbz r10,12(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + 12);
	// stb r11,15(r31)
	PPC_STORE_U8(ctx.r31.u32 + 15, ctx.r11.u8);
	// stb r8,11(r31)
	PPC_STORE_U8(ctx.r31.u32 + 11, ctx.r8.u8);
	// stb r9,17(r31)
	PPC_STORE_U8(ctx.r31.u32 + 17, ctx.r9.u8);
	// stb r10,13(r31)
	PPC_STORE_U8(ctx.r31.u32 + 13, ctx.r10.u8);
loc_826A60D0:
	// lwz r11,2064(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 2064);
	// ori r10,r11,129
	ctx.r10.u64 = ctx.r11.u64 | 129;
	// stw r10,2064(r24)
	PPC_STORE_U32(ctx.r24.u32 + 2064, ctx.r10.u32);
loc_826A60DC:
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x826a4b78
	ctx.lr = 0x826A60E4;
	sub_826A4B78(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A60EC"))) PPC_WEAK_FUNC(sub_826A60EC);
PPC_FUNC_IMPL(__imp__sub_826A60EC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A60F0"))) PPC_WEAK_FUNC(sub_826A60F0);
PPC_FUNC_IMPL(__imp__sub_826A60F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,0
	ctx.r10.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// ori r10,r10,39260
	ctx.r10.u64 = ctx.r10.u64 | 39260;
	// mr r11,r4
	ctx.r11.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// stwx r11,r31,r10
	PPC_STORE_U32(ctx.r31.u32 + ctx.r10.u32, ctx.r11.u32);
	// bl 0x826a3780
	ctx.lr = 0x826A611C;
	sub_826A3780(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a3780
	ctx.lr = 0x826A6128;
	sub_826A3780(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A613C"))) PPC_WEAK_FUNC(sub_826A613C);
PPC_FUNC_IMPL(__imp__sub_826A613C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A6140"))) PPC_WEAK_FUNC(sub_826A6140);
PPC_FUNC_IMPL(__imp__sub_826A6140) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r30,r6
	ctx.r30.u64 = ctx.r6.u64;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A6168;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6194
	if (ctx.cr6.eq) goto loc_826A6194;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a6194
	if (ctx.cr6.eq) goto loc_826A6194;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6194
	if (ctx.cr6.eq) goto loc_826A6194;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A6194;
	sub_825EE0E0(ctx, base);
loc_826A6194:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A61AC"))) PPC_WEAK_FUNC(sub_826A61AC);
PPC_FUNC_IMPL(__imp__sub_826A61AC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A61B0"))) PPC_WEAK_FUNC(sub_826A61B0);
PPC_FUNC_IMPL(__imp__sub_826A61B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A61D8;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6204
	if (ctx.cr6.eq) goto loc_826A6204;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a6204
	if (ctx.cr6.eq) goto loc_826A6204;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6204
	if (ctx.cr6.eq) goto loc_826A6204;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x825ee188
	ctx.lr = 0x826A6204;
	sub_825EE188(ctx, base);
loc_826A6204:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A621C"))) PPC_WEAK_FUNC(sub_826A621C);
PPC_FUNC_IMPL(__imp__sub_826A621C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A6220"))) PPC_WEAK_FUNC(sub_826A6220);
PPC_FUNC_IMPL(__imp__sub_826A6220) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A6228;
	__savegprlr_29(ctx, base);
	// stfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -40, ctx.f31.u64);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// mr r29,r6
	ctx.r29.u64 = ctx.r6.u64;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A6248;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a62c4
	if (ctx.cr6.eq) goto loc_826A62C4;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a62c4
	if (ctx.cr6.eq) goto loc_826A62C4;
	// lwz r31,56(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,7
	ctx.r10.s64 = 7;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// beq cr6,0x826a62c4
	if (ctx.cr6.eq) goto loc_826A62C4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82203008
	ctx.lr = 0x826A6284;
	sub_82203008(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// beq cr6,0x826a62b8
	if (ctx.cr6.eq) goto loc_826A62B8;
	// li r11,4
	ctx.r11.s64 = 4;
	// stfs f31,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// stw r11,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r11.u32);
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82203058
	ctx.lr = 0x826A62AC;
	sub_82203058(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A62B8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25216
	ctx.r3.s64 = ctx.r11.s64 + -25216;
	// bl 0x82130000
	ctx.lr = 0x826A62C4;
	sub_82130000(ctx, base);
loc_826A62C4:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// lfd f31,-40(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A62D0"))) PPC_WEAK_FUNC(sub_826A62D0);
PPC_FUNC_IMPL(__imp__sub_826A62D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r11,-29340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// lwz r3,21680(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 21680);
	// bl 0x826b15b8
	ctx.lr = 0x826A62EC;
	sub_826B15B8(ctx, base);
	// bl 0x8269fcc8
	ctx.lr = 0x826A62F0;
	sub_8269FCC8(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A6300"))) PPC_WEAK_FUNC(sub_826A6300);
PPC_FUNC_IMPL(__imp__sub_826A6300) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x8269fb18
	ctx.lr = 0x826A6310;
	sub_8269FB18(ctx, base);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r11,-29340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// lwz r3,21680(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 21680);
	// bl 0x826aff20
	ctx.lr = 0x826A6320;
	sub_826AFF20(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A6330"))) PPC_WEAK_FUNC(sub_826A6330);
PPC_FUNC_IMPL(__imp__sub_826A6330) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A6338;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32115
	ctx.r31.s64 = -2104688640;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r11,-25180
	ctx.r4.s64 = ctx.r11.s64 + -25180;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,-12440(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -12440);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,48(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A6364;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-27224
	ctx.r3.s64 = ctx.r8.s64 + -27224;
	// bl 0x821fa230
	ctx.lr = 0x826A6370;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,328(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 328);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A6380;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r4,-28272
	ctx.r4.s64 = ctx.r4.s64 + -28272;
	// bl 0x8268da78
	ctx.lr = 0x826A6390;
	sub_8268DA78(ctx, base);
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x82396fb8
	ctx.lr = 0x826A6398;
	sub_82396FB8(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r31,-12440(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + -12440);
	// lwz r3,48(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 48);
	// cmplwi cr6,r3,4
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 4, ctx.xer);
	// blt cr6,0x826a63f8
	if (ctx.cr6.lt) goto loc_826A63F8;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r30,r11,-25188
	ctx.r30.s64 = ctx.r11.s64 + -25188;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r9,76(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A63D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r3,1
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 1, ctx.xer);
	// beq cr6,0x826a63f8
	if (ctx.cr6.eq) goto loc_826A63F8;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// li r5,4
	ctx.r5.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,48(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A63F8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A63F8:
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,100(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 100);
	// bl 0x8269a1e0
	ctx.lr = 0x826A6404;
	sub_8269A1E0(ctx, base);
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// lbz r10,-6745(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -6745);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// stb r10,-29342(r9)
	PPC_STORE_U8(ctx.r9.u32 + -29342, ctx.r10.u8);
	// li r10,1
	ctx.r10.s64 = 1;
	// bne cr6,0x826a6444
	if (!ctx.cr6.eq) goto loc_826A6444;
	// lis r7,-32111
	ctx.r7.s64 = -2104426496;
	// stb r10,-6745(r11)
	PPC_STORE_U8(ctx.r11.u32 + -6745, ctx.r10.u8);
	// lis r6,-32111
	ctx.r6.s64 = -2104426496;
	// li r9,1
	ctx.r9.s64 = 1;
	// li r8,1
	ctx.r8.s64 = 1;
	// stb r9,-29345(r7)
	PPC_STORE_U8(ctx.r7.u32 + -29345, ctx.r9.u8);
	// stb r8,-29344(r6)
	PPC_STORE_U8(ctx.r6.u32 + -29344, ctx.r8.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A6444:
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// lis r8,-32111
	ctx.r8.s64 = -2104426496;
	// li r11,1
	ctx.r11.s64 = 1;
	// stb r11,-29345(r9)
	PPC_STORE_U8(ctx.r9.u32 + -29345, ctx.r11.u8);
	// stb r10,-29344(r8)
	PPC_STORE_U8(ctx.r8.u32 + -29344, ctx.r10.u8);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A6460"))) PPC_WEAK_FUNC(sub_826A6460);
PPC_FUNC_IMPL(__imp__sub_826A6460) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d0
	ctx.lr = 0x826A6468;
	__savegprlr_18(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r21,r4
	ctx.r21.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A6480;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-25156
	ctx.r3.s64 = ctx.r9.s64 + -25156;
	// lwz r8,48(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lwz r7,132(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 132);
	// lbz r20,8108(r7)
	ctx.r20.u64 = PPC_LOAD_U8(ctx.r7.u32 + 8108);
	// extsb r24,r20
	ctx.r24.s64 = ctx.r20.s8;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// bl 0x82130000
	ctx.lr = 0x826A64A4;
	sub_82130000(ctx, base);
	// lis r11,-32129
	ctx.r11.s64 = -2105606144;
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// addi r25,r11,-28116
	ctx.r25.s64 = ctx.r11.s64 + -28116;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r19,0
	ctx.r19.s64 = 0;
	// li r29,0
	ctx.r29.s64 = 0;
	// mr r28,r25
	ctx.r28.u64 = ctx.r25.u64;
	// li r26,1
	ctx.r26.s64 = 1;
	// lis r27,-32121
	ctx.r27.s64 = -2105081856;
	// addi r23,r11,-19612
	ctx.r23.s64 = ctx.r11.s64 + -19612;
	// addi r22,r10,2824
	ctx.r22.s64 = ctx.r10.s64 + 2824;
loc_826A64D0:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A64DC;
	sub_8268DCB0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826a65b4
	if (ctx.cr6.eq) goto loc_826A65B4;
	// cmpw cr6,r29,r24
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r24.s32, ctx.xer);
	// bne cr6,0x826a64f4
	if (!ctx.cr6.eq) goto loc_826A64F4;
	// mr r19,r30
	ctx.r19.u64 = ctx.r30.u64;
loc_826A64F4:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A6504;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a6534
	if (ctx.cr6.eq) goto loc_826A6534;
	// addi r18,r1,80
	ctx.r18.s64 = ctx.r1.s64 + 80;
	// bl 0x82387b90
	ctx.lr = 0x826A6518;
	sub_82387B90(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r5,r18
	ctx.r5.u64 = ctx.r18.u64;
	// bl 0x8238ae58
	ctx.lr = 0x826A6524;
	sub_8238AE58(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// stw r26,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r26.u32);
	// addi r10,r11,1
	ctx.r10.s64 = ctx.r11.s64 + 1;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
loc_826A6534:
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A6544;
	sub_8268DA78(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826a65b4
	if (ctx.cr6.eq) goto loc_826A65B4;
	// lwz r3,18508(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 18508);
	// li r31,0
	ctx.r31.s64 = 0;
	// lwz r4,0(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x826b9928
	ctx.lr = 0x826A6560;
	sub_826B9928(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a65ac
	if (ctx.cr6.eq) goto loc_826A65AC;
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lwz r10,12(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// ble cr6,0x826a657c
	if (!ctx.cr6.gt) goto loc_826A657C;
	// mr r11,r10
	ctx.r11.u64 = ctx.r10.u64;
loc_826A657C:
	// cmpwi cr6,r11,20
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 20, ctx.xer);
	// bge cr6,0x826a6590
	if (!ctx.cr6.lt) goto loc_826A6590;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r11,r10
	ctx.r31.u64 = ctx.r11.u64 + ctx.r10.u64;
	// b 0x826a65ac
	goto loc_826A65AC;
loc_826A6590:
	// cmpwi cr6,r11,40
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 40, ctx.xer);
	// bge cr6,0x826a65a8
	if (!ctx.cr6.lt) goto loc_826A65A8;
	// addi r11,r11,-20
	ctx.r11.s64 = ctx.r11.s64 + -20;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// add r31,r11,r10
	ctx.r31.u64 = ctx.r11.u64 + ctx.r10.u64;
	// b 0x826a65ac
	goto loc_826A65AC;
loc_826A65A8:
	// li r31,100
	ctx.r31.s64 = 100;
loc_826A65AC:
	// stw r31,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r31.u32);
	// stw r26,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r26.u32);
loc_826A65B4:
	// addi r28,r28,4
	ctx.r28.s64 = ctx.r28.s64 + 4;
	// addi r11,r25,20
	ctx.r11.s64 = ctx.r25.s64 + 20;
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r28,r11
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x826a64d0
	if (ctx.cr6.lt) goto loc_826A64D0;
	// cmpwi cr6,r24,0
	ctx.cr6.compare<int32_t>(ctx.r24.s32, 0, ctx.xer);
	// blt cr6,0x826a65d8
	if (ctx.cr6.lt) goto loc_826A65D8;
	// cmpwi cr6,r24,5
	ctx.cr6.compare<int32_t>(ctx.r24.s32, 5, ctx.xer);
	// blt cr6,0x826a65dc
	if (ctx.cr6.lt) goto loc_826A65DC;
loc_826A65D8:
	// li r20,-1
	ctx.r20.s64 = -1;
loc_826A65DC:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A65F0;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6620
	if (ctx.cr6.eq) goto loc_826A6620;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a6620
	if (ctx.cr6.eq) goto loc_826A6620;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6620
	if (ctx.cr6.eq) goto loc_826A6620;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// extsb r5,r20
	ctx.r5.s64 = ctx.r20.s8;
	// addi r4,r11,-25172
	ctx.r4.s64 = ctx.r11.s64 + -25172;
	// bl 0x825ee0e0
	ctx.lr = 0x826A6620;
	sub_825EE0E0(ctx, base);
loc_826A6620:
	// mr r3,r19
	ctx.r3.u64 = ctx.r19.u64;
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823d9220
	__restgprlr_18(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A662C"))) PPC_WEAK_FUNC(sub_826A662C);
PPC_FUNC_IMPL(__imp__sub_826A662C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A6630"))) PPC_WEAK_FUNC(sub_826A6630);
PPC_FUNC_IMPL(__imp__sub_826A6630) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,0
	ctx.r11.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// ori r10,r11,57708
	ctx.r10.u64 = ctx.r11.u64 | 57708;
	// cmpwi cr6,r5,5
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 5, ctx.xer);
	// stwx r5,r31,r10
	PPC_STORE_U32(ctx.r31.u32 + ctx.r10.u32, ctx.r5.u32);
	// bne cr6,0x826a6664
	if (!ctx.cr6.eq) goto loc_826A6664;
	// bl 0x82699cd8
	ctx.lr = 0x826A665C;
	sub_82699CD8(ctx, base);
	// li r3,27
	ctx.r3.s64 = 27;
	// bl 0x82216138
	ctx.lr = 0x826A6664;
	sub_82216138(ctx, base);
loc_826A6664:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a2a98
	ctx.lr = 0x826A666C;
	sub_826A2A98(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A6680"))) PPC_WEAK_FUNC(sub_826A6680);
PPC_FUNC_IMPL(__imp__sub_826A6680) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// addi r12,r1,-24
	ctx.r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823db9d8
	ctx.lr = 0x826A6698;
	sub_823DB9D8(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,-8256(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// lbz r10,248(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 248);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826a67f4
	if (!ctx.cr6.eq) goto loc_826A67F4;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388598
	ctx.lr = 0x826A66BC;
	sub_82388598(ctx, base);
	// lis r11,-32112
	ctx.r11.s64 = -2104492032;
	// rlwinm r10,r3,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r11,r11,21384
	ctx.r11.s64 = ctx.r11.s64 + 21384;
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lfs f13,-28876(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -28876);
	ctx.f13.f64 = double(temp.f32);
	// lbz r4,16(r11)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r11.u32 + 16);
	// lfs f11,1068(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 1068);
	ctx.f11.f64 = double(temp.f32);
	// lfs f12,14192(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 14192);
	ctx.f12.f64 = double(temp.f32);
	// lfs f29,7444(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 7444);
	ctx.f29.f64 = double(temp.f32);
	// std r4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r4.u64);
	// lfd f0,80(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f10,f0
	ctx.f10.f64 = double(ctx.f0.s64);
	// frsp f9,f10
	ctx.f9.f64 = double(float(ctx.f10.f64));
	// fsubs f8,f9,f13
	ctx.f8.f64 = double(float(ctx.f9.f64 - ctx.f13.f64));
	// fmuls f0,f8,f11
	ctx.f0.f64 = double(float(ctx.f8.f64 * ctx.f11.f64));
	// fcmpu cr6,f0,f12
	ctx.cr6.compare(ctx.f0.f64, ctx.f12.f64);
	// bge cr6,0x826a6718
	if (!ctx.cr6.lt) goto loc_826A6718;
	// fmr f0,f12
	ctx.f0.f64 = ctx.f12.f64;
	// b 0x826a6724
	goto loc_826A6724;
loc_826A6718:
	// fcmpu cr6,f0,f29
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f0.f64, ctx.f29.f64);
	// ble cr6,0x826a6724
	if (!ctx.cr6.gt) goto loc_826A6724;
	// fmr f0,f29
	ctx.f0.f64 = ctx.f29.f64;
loc_826A6724:
	// lbz r10,17(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 17);
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f10,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f10.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f9,f10
	ctx.f9.f64 = double(ctx.f10.s64);
	// frsp f8,f9
	ctx.f8.f64 = double(float(ctx.f9.f64));
	// fsubs f7,f8,f13
	ctx.f7.f64 = double(float(ctx.f8.f64 - ctx.f13.f64));
	// fmuls f13,f7,f11
	ctx.f13.f64 = double(float(ctx.f7.f64 * ctx.f11.f64));
	// fcmpu cr6,f13,f12
	ctx.cr6.compare(ctx.f13.f64, ctx.f12.f64);
	// bge cr6,0x826a6750
	if (!ctx.cr6.lt) goto loc_826A6750;
	// fmr f29,f12
	ctx.f29.f64 = ctx.f12.f64;
	// b 0x826a675c
	goto loc_826A675C;
loc_826A6750:
	// fcmpu cr6,f13,f29
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f13.f64, ctx.f29.f64);
	// bgt cr6,0x826a675c
	if (ctx.cr6.gt) goto loc_826A675C;
	// fmr f29,f13
	ctx.f29.f64 = ctx.f13.f64;
loc_826A675C:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// fmr f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f0.f64;
	// lfs f31,-29232(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -29232);
	ctx.f31.f64 = double(temp.f32);
	// fmr f2,f31
	ctx.f2.f64 = ctx.f31.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826A6770;
	sub_8260C5C8(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = ctx.f1.f64;
	// fmr f2,f31
	ctx.f2.f64 = ctx.f31.f64;
	// fmr f1,f29
	ctx.f1.f64 = ctx.f29.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826A6780;
	sub_8260C5C8(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	ctx.f29.f64 = ctx.f1.f64;
	// lis r9,-32252
	ctx.r9.s64 = -2113667072;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// addi r31,r11,-968
	ctx.r31.s64 = ctx.r11.s64 + -968;
	// lfs f31,11360(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 11360);
	ctx.f31.f64 = double(temp.f32);
	// lfs f28,24576(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 24576);
	ctx.f28.f64 = double(temp.f32);
	// fcmpu cr6,f30,f31
	ctx.cr6.compare(ctx.f30.f64, ctx.f31.f64);
	// bgt cr6,0x826a67ac
	if (ctx.cr6.gt) goto loc_826A67AC;
	// fcmpu cr6,f30,f28
	ctx.cr6.compare(ctx.f30.f64, ctx.f28.f64);
	// bge cr6,0x826a67c4
	if (!ctx.cr6.lt) goto loc_826A67C4;
loc_826A67AC:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821e6800
	ctx.lr = 0x826A67B4;
	sub_821E6800(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f30.f64;
	// bl 0x8269d198
	ctx.lr = 0x826A67C4;
	sub_8269D198(ctx, base);
loc_826A67C4:
	// fcmpu cr6,f29,f31
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f29.f64, ctx.f31.f64);
	// bgt cr6,0x826a67d4
	if (ctx.cr6.gt) goto loc_826A67D4;
	// fcmpu cr6,f29,f28
	ctx.cr6.compare(ctx.f29.f64, ctx.f28.f64);
	// bge cr6,0x826a67ec
	if (!ctx.cr6.lt) goto loc_826A67EC;
loc_826A67D4:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821e6800
	ctx.lr = 0x826A67DC;
	sub_821E6800(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// fneg f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.u64 = ctx.f29.u64 ^ 0x8000000000000000;
	// bl 0x8269d198
	ctx.lr = 0x826A67EC;
	sub_8269D198(ctx, base);
loc_826A67EC:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a2a98
	ctx.lr = 0x826A67F4;
	sub_826A2A98(ctx, base);
loc_826A67F4:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// addi r12,r1,-24
	ctx.r12.s64 = ctx.r1.s64 + -24;
	// bl 0x823dba24
	ctx.lr = 0x826A6800;
	__restfpr_28(ctx, base);
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A6814"))) PPC_WEAK_FUNC(sub_826A6814);
PPC_FUNC_IMPL(__imp__sub_826A6814) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A6818"))) PPC_WEAK_FUNC(sub_826A6818);
PPC_FUNC_IMPL(__imp__sub_826A6818) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91ec
	ctx.lr = 0x826A6820;
	__savegprlr_25(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A683C;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addis r31,r30,1
	ctx.r31.s64 = ctx.r30.s64 + 65536;
	// addi r31,r31,-7840
	ctx.r31.s64 = ctx.r31.s64 + -7840;
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r27,r11,64
	ctx.r27.s64 = ctx.r11.s64 + 64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x823931c0
	ctx.lr = 0x826A685C;
	sub_823931C0(ctx, base);
	// lis r28,-32119
	ctx.r28.s64 = -2104950784;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// bl 0x8236da50
	ctx.lr = 0x826A6870;
	sub_8236DA50(ctx, base);
	// clrlwi r9,r29,24
	ctx.r9.u64 = ctx.r29.u32 & 0xFF;
	// lis r8,0
	ctx.r8.s64 = 0;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// ori r29,r8,57692
	ctx.r29.u64 = ctx.r8.u64 | 57692;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826a68cc
	if (ctx.cr6.eq) goto loc_826A68CC;
	// cmpwi cr6,r26,1
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 1, ctx.xer);
	// ble cr6,0x826a68bc
	if (!ctx.cr6.gt) goto loc_826A68BC;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r30,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r29.u32);
	// bl 0x8236daa0
	ctx.lr = 0x826A68A0;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a68bc
	if (ctx.cr6.eq) goto loc_826A68BC;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8236efd8
	ctx.lr = 0x826A68B8;
	sub_8236EFD8(ctx, base);
	// b 0x826a68cc
	goto loc_826A68CC;
loc_826A68BC:
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r30,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r29.u32);
	// bl 0x8236f098
	ctx.lr = 0x826A68CC;
	sub_8236F098(ctx, base);
loc_826A68CC:
	// cmpwi cr6,r26,1
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 1, ctx.xer);
	// ble cr6,0x826a6950
	if (!ctx.cr6.gt) goto loc_826A6950;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r30,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r29.u32);
	// bl 0x8236daa0
	ctx.lr = 0x826A68E4;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a6950
	if (ctx.cr6.eq) goto loc_826A6950;
	// li r29,0
	ctx.r29.s64 = 0;
	// cmpwi cr6,r25,0
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 0, ctx.xer);
	// ble cr6,0x826a6984
	if (!ctx.cr6.gt) goto loc_826A6984;
loc_826A68FC:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// bl 0x8236daa0
	ctx.lr = 0x826A690C;
	sub_8236DAA0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a6940
	if (ctx.cr6.eq) goto loc_826A6940;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82393118
	ctx.lr = 0x826A6928;
	sub_82393118(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a1ca0
	ctx.lr = 0x826A6938;
	sub_826A1CA0(ctx, base);
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8236e2e8
	ctx.lr = 0x826A6940;
	sub_8236E2E8(ctx, base);
loc_826A6940:
	// addi r29,r29,1
	ctx.r29.s64 = ctx.r29.s64 + 1;
	// cmpw cr6,r29,r25
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r25.s32, ctx.xer);
	// blt cr6,0x826a68fc
	if (ctx.cr6.lt) goto loc_826A68FC;
	// b 0x826a6984
	goto loc_826A6984;
loc_826A6950:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwzx r5,r30,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r29.u32);
	// bl 0x82393118
	ctx.lr = 0x826A6960;
	sub_82393118(ctx, base);
	// lwz r11,-8256(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwzx r5,r30,r29
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + ctx.r29.u32);
	// li r6,0
	ctx.r6.s64 = 0;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x8236da38
	ctx.lr = 0x826A697C;
	sub_8236DA38(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8236e2e8
	ctx.lr = 0x826A6984;
	sub_8236E2E8(ctx, base);
loc_826A6984:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,0(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82393220
	ctx.lr = 0x826A6994;
	sub_82393220(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826A69A0;
	sub_821FA230(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a1b28
	ctx.lr = 0x826A69B0;
	sub_826A1B28(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a2f68
	ctx.lr = 0x826A69B8;
	sub_826A2F68(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a1838
	ctx.lr = 0x826A69C0;
	sub_826A1838(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a1478
	ctx.lr = 0x826A69C8;
	sub_826A1478(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d923c
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A69D0"))) PPC_WEAK_FUNC(sub_826A69D0);
PPC_FUNC_IMPL(__imp__sub_826A69D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A69D8;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A69F0;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r27,-32119
	ctx.r27.s64 = -2104950784;
	// addis r30,r31,1
	ctx.r30.s64 = ctx.r31.s64 + 65536;
	// addi r30,r30,-7840
	ctx.r30.s64 = ctx.r30.s64 + -7840;
	// lwz r10,132(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// lwz r11,-8256(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -8256);
	// addi r28,r10,64
	ctx.r28.s64 = ctx.r10.s64 + 64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r29,1660(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1660);
	// bl 0x823931c0
	ctx.lr = 0x826A6A1C;
	sub_823931C0(ctx, base);
	// cmpwi cr6,r29,1
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 1, ctx.xer);
	// bge cr6,0x826a6a38
	if (!ctx.cr6.lt) goto loc_826A6A38;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25112
	ctx.r3.s64 = ctx.r11.s64 + -25112;
	// bl 0x821fa230
	ctx.lr = 0x826A6A30;
	sub_821FA230(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A6A38:
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmpwi cr6,r4,3
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 3, ctx.xer);
	// beq cr6,0x826a6a50
	if (ctx.cr6.eq) goto loc_826A6A50;
	// cmpwi cr6,r4,4
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 4, ctx.xer);
	// li r11,64
	ctx.r11.s64 = 64;
	// bne cr6,0x826a6a54
	if (!ctx.cr6.eq) goto loc_826A6A54;
loc_826A6A50:
	// li r11,16
	ctx.r11.s64 = 16;
loc_826A6A54:
	// add r10,r3,r29
	ctx.r10.u64 = ctx.r3.u64 + ctx.r29.u64;
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x826a6a74
	if (!ctx.cr6.gt) goto loc_826A6A74;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25128
	ctx.r3.s64 = ctx.r11.s64 + -25128;
	// bl 0x821fa230
	ctx.lr = 0x826A6A6C;
	sub_821FA230(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826A6A74:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82393220
	ctx.lr = 0x826A6A80;
	sub_82393220(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lwz r3,-8256(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + -8256);
	// ori r10,r11,57692
	ctx.r10.u64 = ctx.r11.u64 | 57692;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwzx r5,r31,r10
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	// bl 0x8236f120
	ctx.lr = 0x826A6A98;
	sub_8236F120(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-26864
	ctx.r3.s64 = ctx.r9.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826A6AA4;
	sub_821FA230(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a1b28
	ctx.lr = 0x826A6AB4;
	sub_826A1B28(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a2f68
	ctx.lr = 0x826A6ABC;
	sub_826A2F68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a1478
	ctx.lr = 0x826A6AC4;
	sub_826A1478(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A6ACC"))) PPC_WEAK_FUNC(sub_826A6ACC);
PPC_FUNC_IMPL(__imp__sub_826A6ACC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A6AD0"))) PPC_WEAK_FUNC(sub_826A6AD0);
PPC_FUNC_IMPL(__imp__sub_826A6AD0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A6AD8;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A6AF0;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r28,-32119
	ctx.r28.s64 = -2104950784;
	// addis r30,r31,1
	ctx.r30.s64 = ctx.r31.s64 + 65536;
	// addi r30,r30,-7840
	ctx.r30.s64 = ctx.r30.s64 + -7840;
	// lwz r10,132(r10)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// lwz r11,-8256(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// addi r29,r10,64
	ctx.r29.s64 = ctx.r10.s64 + 64;
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r27,1660(r11)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1660);
	// bl 0x823931c0
	ctx.lr = 0x826A6B1C;
	sub_823931C0(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// cmpwi cr6,r27,1
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 1, ctx.xer);
	// bge cr6,0x826a6b3c
	if (!ctx.cr6.lt) goto loc_826A6B3C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25112
	ctx.r3.s64 = ctx.r11.s64 + -25112;
	// bl 0x821fa230
	ctx.lr = 0x826A6B34;
	sub_821FA230(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A6B3C:
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmpwi cr6,r4,3
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 3, ctx.xer);
	// beq cr6,0x826a6b54
	if (ctx.cr6.eq) goto loc_826A6B54;
	// cmpwi cr6,r4,4
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 4, ctx.xer);
	// li r11,64
	ctx.r11.s64 = 64;
	// bne cr6,0x826a6b58
	if (!ctx.cr6.eq) goto loc_826A6B58;
loc_826A6B54:
	// li r11,16
	ctx.r11.s64 = 16;
loc_826A6B58:
	// add r10,r26,r27
	ctx.r10.u64 = ctx.r26.u64 + ctx.r27.u64;
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// ble cr6,0x826a6b78
	if (!ctx.cr6.gt) goto loc_826A6B78;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25128
	ctx.r3.s64 = ctx.r11.s64 + -25128;
	// bl 0x821fa230
	ctx.lr = 0x826A6B70;
	sub_821FA230(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826A6B78:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82393220
	ctx.lr = 0x826A6B84;
	sub_82393220(ctx, base);
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// lwz r3,-8256(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + -8256);
	// lwz r4,0(r30)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// bl 0x8236f120
	ctx.lr = 0x826A6B94;
	sub_8236F120(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a2f68
	ctx.lr = 0x826A6B9C;
	sub_826A2F68(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a1478
	ctx.lr = 0x826A6BA4;
	sub_826A1478(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A6BAC"))) PPC_WEAK_FUNC(sub_826A6BAC);
PPC_FUNC_IMPL(__imp__sub_826A6BAC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A6BB0"))) PPC_WEAK_FUNC(sub_826A6BB0);
PPC_FUNC_IMPL(__imp__sub_826A6BB0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e4
	ctx.lr = 0x826A6BB8;
	__savegprlr_23(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,0
	ctx.r11.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// ori r10,r11,57696
	ctx.r10.u64 = ctx.r11.u64 | 57696;
	// lwzx r4,r31,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	// bl 0x8269d8c0
	ctx.lr = 0x826A6BD0;
	sub_8269D8C0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// beq cr6,0x826a6da0
	if (ctx.cr6.eq) goto loc_826A6DA0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25068
	ctx.r3.s64 = ctx.r11.s64 + -25068;
	// bl 0x821fa230
	ctx.lr = 0x826A6BE8;
	sub_821FA230(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A6BF0;
	sub_8268DAF8(ctx, base);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A6C00;
	sub_822A3998(ctx, base);
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r30,132(r9)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826A6C10;
	sub_8238F1E8(ctx, base);
	// lis r8,-32115
	ctx.r8.s64 = -2104688640;
	// mulli r10,r3,104
	ctx.r10.s64 = ctx.r3.s64 * 104;
	// lwz r11,-12120(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -12120);
	// add r7,r10,r11
	ctx.r7.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lis r4,-32254
	ctx.r4.s64 = -2113798144;
	// addi r5,r6,-25080
	ctx.r5.s64 = ctx.r6.s64 + -25080;
	// addi r4,r4,-21664
	ctx.r4.s64 = ctx.r4.s64 + -21664;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r6,4(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// bl 0x826a6140
	ctx.lr = 0x826A6C3C;
	sub_826A6140(ctx, base);
	// addi r4,r30,8109
	ctx.r4.s64 = ctx.r30.s64 + 8109;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// bl 0x82699f38
	ctx.lr = 0x826A6C4C;
	sub_82699F38(ctx, base);
	// clrlwi r3,r3,24
	ctx.r3.u64 = ctx.r3.u32 & 0xFF;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r25,-1
	ctx.r25.s64 = -1;
	// li r24,1
	ctx.r24.s64 = 1;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// addi r26,r11,-26504
	ctx.r26.s64 = ctx.r11.s64 + -26504;
	// beq cr6,0x826a6ca4
	if (ctx.cr6.eq) goto loc_826A6CA4;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A6C70;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r4,r31,28
	ctx.r4.s64 = ctx.r31.s64 + 28;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A6C88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A6C98;
	sub_8268DA78(ctx, base);
	// mr r29,r24
	ctx.r29.u64 = ctx.r24.u64;
	// stw r25,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r25.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A6CA4:
	// cmpw cr6,r29,r28
	ctx.cr6.compare<int32_t>(ctx.r29.s32, ctx.r28.s32, ctx.xer);
	// bge cr6,0x826a6d0c
	if (!ctx.cr6.lt) goto loc_826A6D0C;
	// mulli r11,r29,168
	ctx.r11.s64 = ctx.r29.s64 * 168;
	// subf r27,r29,r28
	ctx.r27.s64 = ctx.r28.s64 - ctx.r29.s64;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// add r29,r27,r29
	ctx.r29.u64 = ctx.r27.u64 + ctx.r29.u64;
	// addi r28,r11,28
	ctx.r28.s64 = ctx.r11.s64 + 28;
loc_826A6CC0:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A6CC8;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826a6d00
	if (ctx.cr6.eq) goto loc_826A6D00;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A6CE8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A6CF8;
	sub_8268DA78(ctx, base);
	// stw r25,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r25.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A6D00:
	// addic. r27,r27,-1
	ctx.xer.ca = ctx.r27.u32 > 0;
	ctx.r27.s64 = ctx.r27.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// addi r28,r28,168
	ctx.r28.s64 = ctx.r28.s64 + 168;
	// bne 0x826a6cc0
	if (!ctx.cr0.eq) goto loc_826A6CC0;
loc_826A6D0C:
	// mulli r11,r29,168
	ctx.r11.s64 = ctx.r29.s64 * 168;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// addi r29,r11,28
	ctx.r29.s64 = ctx.r11.s64 + 28;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r28,r31,21856
	ctx.r28.s64 = ctx.r31.s64 + 21856;
	// addi r27,r11,-25092
	ctx.r27.s64 = ctx.r11.s64 + -25092;
loc_826A6D28:
	// lbz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r28.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a6d8c
	if (ctx.cr6.eq) goto loc_826A6D8C;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A6D3C;
	sub_8268DB80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a6d8c
	if (ctx.cr6.eq) goto loc_826A6D8C;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// addi r6,r30,1
	ctx.r6.s64 = ctx.r30.s64 + 1;
	// li r4,80
	ctx.r4.s64 = 80;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82137a08
	ctx.lr = 0x826A6D5C;
	sub_82137A08(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A6D74;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A6D84;
	sub_8268DA78(ctx, base);
	// stw r30,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r30.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826A6D8C:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r28,r28,5764
	ctx.r28.s64 = ctx.r28.s64 + 5764;
	// addi r29,r29,168
	ctx.r29.s64 = ctx.r29.s64 + 168;
	// cmpwi cr6,r30,3
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 3, ctx.xer);
	// blt cr6,0x826a6d28
	if (ctx.cr6.lt) goto loc_826A6D28;
loc_826A6DA0:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A6DA8"))) PPC_WEAK_FUNC(sub_826A6DA8);
PPC_FUNC_IMPL(__imp__sub_826A6DA8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e8
	ctx.lr = 0x826A6DB0;
	__savegprlr_24(ctx, base);
	// stfd f29,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, ctx.f29.u64);
	// stfd f30,-88(r1)
	PPC_STORE_U64(ctx.r1.u32 + -88, ctx.f30.u64);
	// stfd f31,-80(r1)
	PPC_STORE_U64(ctx.r1.u32 + -80, ctx.f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x826a30d0
	ctx.lr = 0x826A6DCC;
	sub_826A30D0(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A6DDC;
	sub_822A3998(ctx, base);
	// clrlwi r24,r30,24
	ctx.r24.u64 = ctx.r30.u32 & 0xFF;
	// lwz r25,48(r3)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x826a6f40
	if (ctx.cr6.eq) goto loc_826A6F40;
	// lwz r30,132(r25)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r25.u32 + 132);
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// addi r3,r3,-15944
	ctx.r3.s64 = ctx.r3.s64 + -15944;
	// addi r4,r30,20
	ctx.r4.s64 = ctx.r30.s64 + 20;
	// bl 0x82397e88
	ctx.lr = 0x826A6E00;
	sub_82397E88(ctx, base);
	// addi r3,r30,8109
	ctx.r3.s64 = ctx.r30.s64 + 8109;
	// bl 0x82396408
	ctx.lr = 0x826A6E08;
	sub_82396408(ctx, base);
	// lis r29,-32115
	ctx.r29.s64 = -2104688640;
	// mulli r30,r3,104
	ctx.r30.s64 = ctx.r3.s64 * 104;
	// lwz r11,-12120(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -12120);
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lfs f0,72(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	ctx.f0.f64 = double(temp.f32);
	// addi r28,r8,-21664
	ctx.r28.s64 = ctx.r8.s64 + -21664;
	// lfs f31,31016(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 31016);
	ctx.f31.f64 = double(temp.f32);
	// addi r5,r7,-24932
	ctx.r5.s64 = ctx.r7.s64 + -24932;
	// fsubs f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f0.f64 - ctx.f31.f64));
	// lfs f30,-27304(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -27304);
	ctx.f30.f64 = double(temp.f32);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lfs f29,76(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	ctx.f29.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fmuls f12,f13,f30
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f30.f64));
	// fctiwz f11,f12
	ctx.f11.s64 = (ctx.f12.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f12.f64));
	// stfd f11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f11.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826a6140
	ctx.lr = 0x826A6E60;
	sub_826A6140(ctx, base);
	// fsubs f10,f29,f31
	ctx.fpscr.disableFlushMode();
	ctx.f10.f64 = double(float(ctx.f29.f64 - ctx.f31.f64));
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r5,r6,-24944
	ctx.r5.s64 = ctx.r6.s64 + -24944;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fmuls f9,f10,f30
	ctx.f9.f64 = double(float(ctx.f10.f64 * ctx.f30.f64));
	// fctiwz f8,f9
	ctx.f8.s64 = (ctx.f9.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f9.f64));
	// stfd f8,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f8.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826a6140
	ctx.lr = 0x826A6E88;
	sub_826A6140(ctx, base);
	// lwz r11,-12120(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -12120);
	// lis r3,-32252
	ctx.r3.s64 = -2113667072;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r5,r10,-24964
	ctx.r5.s64 = ctx.r10.s64 + -24964;
	// lfs f30,-8080(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + -8080);
	ctx.f30.f64 = double(temp.f32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lfs f7,64(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	ctx.f7.f64 = double(temp.f32);
	// fmuls f6,f7,f30
	ctx.f6.f64 = double(float(ctx.f7.f64 * ctx.f30.f64));
	// lfs f29,68(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	ctx.f29.f64 = double(temp.f32);
	// fctiwz f5,f6
	ctx.f5.s64 = (ctx.f6.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f6.f64));
	// stfd f5,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f5.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826a6140
	ctx.lr = 0x826A6EC4;
	sub_826A6140(ctx, base);
	// fmuls f4,f29,f30
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = double(float(ctx.f29.f64 * ctx.f30.f64));
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r5,r9,-24984
	ctx.r5.s64 = ctx.r9.s64 + -24984;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fctiwz f3,f4
	ctx.f3.s64 = (ctx.f4.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f4.f64));
	// stfd f3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f3.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826a6140
	ctx.lr = 0x826A6EE8;
	sub_826A6140(ctx, base);
	// lwz r11,-12120(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -12120);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// addi r5,r8,-25000
	ctx.r5.s64 = ctx.r8.s64 + -25000;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lfs f2,80(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	ctx.f2.f64 = double(temp.f32);
	// fmuls f1,f2,f31
	ctx.f1.f64 = double(float(ctx.f2.f64 * ctx.f31.f64));
	// lfs f30,84(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	ctx.f30.f64 = double(temp.f32);
	// fctiwz f0,f1
	ctx.f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826a6140
	ctx.lr = 0x826A6F1C;
	sub_826A6140(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// fmuls f13,f30,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f30.f64 * ctx.f31.f64));
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r5,r7,-25016
	ctx.r5.s64 = ctx.r7.s64 + -25016;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fctiwz f12,f13
	ctx.f12.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f12,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f12.u64);
	// lwz r6,84(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826a6140
	ctx.lr = 0x826A6F40;
	sub_826A6140(ctx, base);
loc_826A6F40:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25028
	ctx.r3.s64 = ctx.r11.s64 + -25028;
	// bl 0x821fa230
	ctx.lr = 0x826A6F4C;
	sub_821FA230(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// li r27,0
	ctx.r27.s64 = 0;
	// addi r28,r11,-25044
	ctx.r28.s64 = ctx.r11.s64 + -25044;
loc_826A6F5C:
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A6F68;
	sub_8268DCB0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,72(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A6F7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826a6fbc
	if (ctx.cr6.eq) goto loc_826A6FBC;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r29,0
	ctx.r29.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826A6F9C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a6fa8
	if (ctx.cr6.eq) goto loc_826A6FA8;
	// lwz r29,4(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_826A6FA8:
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8269b1f0
	ctx.lr = 0x826A6FBC;
	sub_8269B1F0(ctx, base);
loc_826A6FBC:
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// cmpwi cr6,r27,13
	ctx.cr6.compare<int32_t>(ctx.r27.s32, 13, ctx.xer);
	// blt cr6,0x826a6f5c
	if (ctx.cr6.lt) goto loc_826A6F5C;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// bne cr6,0x826a6fdc
	if (!ctx.cr6.eq) goto loc_826A6FDC;
	// lwz r11,8(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 8);
	// lwz r3,664(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 664);
	// bl 0x823457d8
	ctx.lr = 0x826A6FDC;
	sub_823457D8(ctx, base);
loc_826A6FDC:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f29,-96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// lfd f30,-88(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f31,-80(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x823d9238
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A6FF0"))) PPC_WEAK_FUNC(sub_826A6FF0);
PPC_FUNC_IMPL(__imp__sub_826A6FF0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A6FF8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A7010;
	sub_822A3998(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r8,336(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 336);
	// lwz r30,52(r9)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r9.u32 + 52);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826A702C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r4,16512
	ctx.r4.s64 = 16512;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238ef30
	ctx.lr = 0x826A703C;
	sub_8238EF30(ctx, base);
	// stb r29,8108(r30)
	PPC_STORE_U8(ctx.r30.u32 + 8108, ctx.r29.u8);
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r6,336(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 336);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A7054;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// addi r30,r11,-21664
	ctx.r30.s64 = ctx.r11.s64 + -21664;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7070;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a70a0
	if (ctx.cr6.eq) goto loc_826A70A0;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a70a0
	if (ctx.cr6.eq) goto loc_826A70A0;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a70a0
	if (ctx.cr6.eq) goto loc_826A70A0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// addi r4,r11,-25172
	ctx.r4.s64 = ctx.r11.s64 + -25172;
	// bl 0x825ee0e0
	ctx.lr = 0x826A70A0;
	sub_825EE0E0(ctx, base);
loc_826A70A0:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A70AC;
	sub_821F9FB8(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,1072
	ctx.r4.s64 = ctx.r11.s64 + 1072;
	// bl 0x825ee0e0
	ctx.lr = 0x826A70C0;
	sub_825EE0E0(ctx, base);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r5,r9,-24792
	ctx.r5.s64 = ctx.r9.s64 + -24792;
	// addi r4,r8,-24808
	ctx.r4.s64 = ctx.r8.s64 + -24808;
	// lwz r3,-10224(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10224);
	// bl 0x8268b770
	ctx.lr = 0x826A70DC;
	sub_8268B770(ctx, base);
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r6,336(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 336);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A70F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,3
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 3, ctx.xer);
	// bgt cr6,0x826a7168
	if (ctx.cr6.gt) goto loc_826A7168;
	// lis r12,-32150
	ctx.r12.s64 = -2106982400;
	// addi r12,r12,28944
	ctx.r12.s64 = ctx.r12.s64 + 28944;
	// rlwinm r0,r3,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_826A7120;
	case 1:
		goto loc_826A7134;
	case 2:
		goto loc_826A7148;
	case 3:
		goto loc_826A715C;
	default:
		__builtin_unreachable();
	}
	// lwz r19,28960(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28960);
	// lwz r19,28980(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 28980);
	// lwz r19,29000(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 29000);
	// lwz r19,29020(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + 29020);
loc_826A7120:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24836
	ctx.r3.s64 = ctx.r11.s64 + -24836;
	// bl 0x821e6800
	ctx.lr = 0x826A712C;
	sub_821E6800(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826A7134:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24864
	ctx.r3.s64 = ctx.r11.s64 + -24864;
	// bl 0x821e6800
	ctx.lr = 0x826A7140;
	sub_821E6800(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826A7148:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24892
	ctx.r3.s64 = ctx.r11.s64 + -24892;
	// bl 0x821e6800
	ctx.lr = 0x826A7154;
	sub_821E6800(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826A715C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24920
	ctx.r3.s64 = ctx.r11.s64 + -24920;
	// bl 0x821e6800
	ctx.lr = 0x826A7168;
	sub_821E6800(ctx, base);
loc_826A7168:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A7170"))) PPC_WEAK_FUNC(sub_826A7170);
PPC_FUNC_IMPL(__imp__sub_826A7170) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c0
	ctx.lr = 0x826A7178;
	__savegprlr_14(ctx, base);
	// stfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -168, ctx.f30.u64);
	// stfd f31,-160(r1)
	PPC_STORE_U64(ctx.r1.u32 + -160, ctx.f31.u64);
	// stwu r1,-336(r1)
	ea = -336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// stw r28,356(r1)
	PPC_STORE_U32(ctx.r1.u32 + 356, ctx.r28.u32);
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// stw r27,364(r1)
	PPC_STORE_U32(ctx.r1.u32 + 364, ctx.r27.u32);
	// bl 0x82387a18
	ctx.lr = 0x826A719C;
	sub_82387A18(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a71e0
	if (ctx.cr6.eq) goto loc_826A71E0;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826A71B0;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826A71C4;
	sub_82270170(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x82272a30
	ctx.lr = 0x826A71CC;
	sub_82272A30(ctx, base);
	// bl 0x824817c0
	ctx.lr = 0x826A71D0;
	sub_824817C0(ctx, base);
	// addi r9,r3,12
	ctx.r9.s64 = ctx.r3.s64 + 12;
	// li r15,0
	ctx.r15.s64 = 0;
	// stw r9,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r9.u32);
	// b 0x826a71e8
	goto loc_826A71E8;
loc_826A71E0:
	// li r15,0
	ctx.r15.s64 = 0;
	// stw r15,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r15.u32);
loc_826A71E8:
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A71F8;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a7270
	if (ctx.cr6.eq) goto loc_826A7270;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A7210;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r30,132(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// lwz r10,8100(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8100);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x826a7270
	if (ctx.cr6.eq) goto loc_826A7270;
	// clrlwi r11,r29,24
	ctx.r11.u64 = ctx.r29.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7270
	if (ctx.cr6.eq) goto loc_826A7270;
	// bl 0x82387b90
	ctx.lr = 0x826A7234;
	sub_82387B90(ctx, base);
	// lwz r29,1344(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// bl 0x82387b90
	ctx.lr = 0x826A723C;
	sub_82387B90(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mulli r11,r29,8176
	ctx.r11.s64 = ctx.r29.s64 * 8176;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238ee58
	ctx.lr = 0x826A7254;
	sub_8238EE58(ctx, base);
	// lis r11,3
	ctx.r11.s64 = 196608;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// ori r9,r11,57424
	ctx.r9.u64 = ctx.r11.u64 | 57424;
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r3,r10,-24724
	ctx.r3.s64 = ctx.r10.s64 + -24724;
	// stbx r8,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r8.u8);
	// bl 0x82130000
	ctx.lr = 0x826A7270;
	sub_82130000(ctx, base);
loc_826A7270:
	// lis r11,0
	ctx.r11.s64 = 0;
	// mr r30,r15
	ctx.r30.u64 = ctx.r15.u64;
	// ori r10,r11,39228
	ctx.r10.u64 = ctx.r11.u64 | 39228;
	// stw r30,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r30.u32);
	// stbx r15,r28,r10
	PPC_STORE_U8(ctx.r28.u32 + ctx.r10.u32, ctx.r15.u8);
	// bl 0x82387b90
	ctx.lr = 0x826A7288;
	sub_82387B90(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r31,1340(r9)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + 1340);
	// stw r31,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r31.u32);
	// bl 0x8268daf8
	ctx.lr = 0x826A729C;
	sub_8268DAF8(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// ble cr6,0x826a76f4
	if (!ctx.cr6.gt) goto loc_826A76F4;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// stw r15,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r15.u32);
	// lis r8,-32255
	ctx.r8.s64 = -2113863680;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r11,r11,-21664
	ctx.r11.s64 = ctx.r11.s64 + -21664;
	// addi r10,r10,-25172
	ctx.r10.s64 = ctx.r10.s64 + -25172;
	// lfs f30,3796(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 3796);
	ctx.f30.f64 = double(temp.f32);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lfs f31,-32032(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -32032);
	ctx.f31.f64 = double(temp.f32);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// stw r11,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r11.u32);
	// lis r3,-32129
	ctx.r3.s64 = -2105606144;
	// stw r10,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r10.u32);
	// lis r31,-32253
	ctx.r31.s64 = -2113732608;
	// lis r30,-32254
	ctx.r30.s64 = -2113798144;
	// lis r26,3
	ctx.r26.s64 = 196608;
	// addi r21,r28,108
	ctx.r21.s64 = ctx.r28.s64 + 108;
	// lis r9,-32247
	ctx.r9.s64 = -2113339392;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lis r29,-32244
	ctx.r29.s64 = -2113142784;
	// lis r28,-32244
	ctx.r28.s64 = -2113142784;
	// lis r27,-32256
	ctx.r27.s64 = -2113929216;
	// addi r5,r5,-28272
	ctx.r5.s64 = ctx.r5.s64 + -28272;
	// addi r4,r4,-25448
	ctx.r4.s64 = ctx.r4.s64 + -25448;
	// addi r3,r3,-25924
	ctx.r3.s64 = ctx.r3.s64 + -25924;
	// stw r5,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r5.u32);
	// addi r11,r31,2824
	ctx.r11.s64 = ctx.r31.s64 + 2824;
	// stw r4,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r4.u32);
	// addi r10,r30,-19624
	ctx.r10.s64 = ctx.r30.s64 + -19624;
	// stw r3,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r3.u32);
	// ori r22,r26,50114
	ctx.r22.u64 = ctx.r26.u64 | 50114;
	// stw r11,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r11.u32);
	// li r14,7
	ctx.r14.s64 = 7;
	// stw r10,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r10.u32);
	// lis r24,-32121
	ctx.r24.s64 = -2105081856;
	// lis r23,-32111
	ctx.r23.s64 = -2104426496;
	// lis r26,-32115
	ctx.r26.s64 = -2104688640;
	// addi r20,r9,-10952
	ctx.r20.s64 = ctx.r9.s64 + -10952;
	// addi r19,r8,-12116
	ctx.r19.s64 = ctx.r8.s64 + -12116;
	// addi r25,r7,2612
	ctx.r25.s64 = ctx.r7.s64 + 2612;
	// addi r18,r6,-24748
	ctx.r18.s64 = ctx.r6.s64 + -24748;
	// addi r17,r29,-27360
	ctx.r17.s64 = ctx.r29.s64 + -27360;
	// addi r16,r28,-24772
	ctx.r16.s64 = ctx.r28.s64 + -24772;
	// addi r27,r27,9572
	ctx.r27.s64 = ctx.r27.s64 + 9572;
loc_826A7360:
	// bl 0x82387b90
	ctx.lr = 0x826A7364;
	sub_82387B90(ctx, base);
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// add r11,r3,r11
	ctx.r11.u64 = ctx.r3.u64 + ctx.r11.u64;
	// addi r30,r11,1360
	ctx.r30.s64 = ctx.r11.s64 + 1360;
	// addic. r29,r30,8141
	ctx.xer.ca = ctx.r30.u32 > 4294959154;
	ctx.r29.s64 = ctx.r30.s64 + 8141;
	ctx.cr0.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// beq 0x826a76e0
	if (ctx.cr0.eq) goto loc_826A76E0;
	// lwz r3,364(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// bl 0x8268db80
	ctx.lr = 0x826A7380;
	sub_8268DB80(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x826a76e0
	if (ctx.cr6.eq) goto loc_826A76E0;
	// lwz r4,88(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x826a73c8
	if (ctx.cr6.eq) goto loc_826A73C8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x823906d8
	ctx.lr = 0x826A73A0;
	sub_823906D8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a73bc
	if (ctx.cr6.eq) goto loc_826A73BC;
	// bl 0x82387b90
	ctx.lr = 0x826A73B0;
	sub_82387B90(ctx, base);
	// lwz r11,1344(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// cmpw cr6,r15,r11
	ctx.cr6.compare<int32_t>(ctx.r15.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x826a73c8
	if (!ctx.cr6.eq) goto loc_826A73C8;
loc_826A73BC:
	// lwz r11,16(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 16);
	// ori r10,r11,16
	ctx.r10.u64 = ctx.r11.u64 | 16;
	// b 0x826a73d0
	goto loc_826A73D0;
loc_826A73C8:
	// lwz r11,16(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 16);
	// rlwinm r10,r11,0,28,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
loc_826A73D0:
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// stw r10,16(r28)
	PPC_STORE_U32(ctx.r28.u32 + 16, ctx.r10.u32);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r10,344(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 344);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A73EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r31,r21,-80
	ctx.r31.s64 = ctx.r21.s64 + -80;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// li r4,80
	ctx.r4.s64 = 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82137a08
	ctx.lr = 0x826A7404;
	sub_82137A08(ctx, base);
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
	// li r4,80
	ctx.r4.s64 = 80;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x82137a08
	ctx.lr = 0x826A7414;
	sub_82137A08(ctx, base);
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A7424;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7438
	if (ctx.cr6.eq) goto loc_826A7438;
	// li r11,6
	ctx.r11.s64 = 6;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826A7438:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,92(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A7448;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a7470
	if (ctx.cr6.eq) goto loc_826A7470;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// lwz r3,356(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 356);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x8269dab8
	ctx.lr = 0x826A7464;
	sub_8269DAB8(ctx, base);
	// li r11,6
	ctx.r11.s64 = 6;
	// stw r21,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r21.u32);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
loc_826A7470:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,96(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A7480;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a74bc
	if (ctx.cr6.eq) goto loc_826A74BC;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826A7494;
	sub_8238F1E8(ctx, base);
	// lwz r11,-12120(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + -12120);
	// mulli r10,r3,104
	ctx.r10.s64 = ctx.r3.s64 * 104;
	// lwz r9,100(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// add r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 + ctx.r11.u64;
	// li r7,5
	ctx.r7.s64 = 5;
	// lwz r6,24(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 24);
	// rlwinm r5,r6,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r5,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r9.u32);
	// stw r7,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r7.u32);
	// stw r4,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r4.u32);
loc_826A74BC:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,104(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A74CC;
	sub_8268DA78(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x826a754c
	if (ctx.cr6.eq) goto loc_826A754C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826A74E0;
	sub_8238F1E8(ctx, base);
	// mr r14,r3
	ctx.r14.u64 = ctx.r3.u64;
	// lwz r11,-12120(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + -12120);
	// mulli r10,r14,104
	ctx.r10.s64 = ctx.r14.s64 * 104;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r31,44(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// bl 0x82387b90
	ctx.lr = 0x826A74F8;
	sub_82387B90(ctx, base);
	// mulli r10,r14,84
	ctx.r10.s64 = ctx.r14.s64 * 84;
	// lbz r9,-29346(r23)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r23.u32 + -29346);
	// add r10,r10,r3
	ctx.r10.u64 = ctx.r10.u64 + ctx.r3.u64;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// lhzx r11,r10,r22
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r10.u32 + ctx.r22.u32);
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// addi r8,r11,-1
	ctx.r8.s64 = ctx.r11.s64 + -1;
	// extsw r7,r8
	ctx.r7.s64 = ctx.r8.s32;
	// std r7,128(r1)
	PPC_STORE_U64(ctx.r1.u32 + 128, ctx.r7.u64);
	// lfd f0,128(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 128);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// frsp f12,f13
	ctx.f12.f64 = double(float(ctx.f13.f64));
	// fmuls f0,f12,f31
	ctx.f0.f64 = double(float(ctx.f12.f64 * ctx.f31.f64));
	// beq cr6,0x826a7534
	if (ctx.cr6.eq) goto loc_826A7534;
	// fmr f0,f30
	ctx.f0.f64 = ctx.f30.f64;
loc_826A7534:
	// li r11,4
	ctx.r11.s64 = 4;
	// fctiwz f0,f0
	ctx.fpscr.disableFlushMode();
	ctx.f0.s64 = (ctx.f0.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f0.f64));
	// li r10,1
	ctx.r10.s64 = 1;
	// li r14,7
	ctx.r14.s64 = 7;
	// stw r10,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r10.u32);
	// stfiwx f0,r29,r11
	PPC_STORE_U32(ctx.r29.u32 + ctx.r11.u32, ctx.f0.u32);
loc_826A754C:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,108(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A755C;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a766c
	if (ctx.cr6.eq) goto loc_826A766C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826A7570;
	sub_8238F1E8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r18
	ctx.r3.u64 = ctx.r18.u64;
	// bl 0x82130000
	ctx.lr = 0x826A757C;
	sub_82130000(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826A7584;
	sub_8238F1E8(ctx, base);
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r3,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r3.u32);
	// lis r10,4
	ctx.r10.s64 = 262144;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// lwz r11,-10236(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + -10236);
	// ori r9,r10,1808
	ctx.r9.u64 = ctx.r10.u64 | 1808;
	// lwz r8,52(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// lwzx r11,r8,r9
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a75b4
	if (ctx.cr6.eq) goto loc_826A75B4;
	// lwz r31,56(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// b 0x826a75b8
	goto loc_826A75B8;
loc_826A75B4:
	// li r31,0
	ctx.r31.s64 = 0;
loc_826A75B8:
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a766c
	if (ctx.cr6.eq) goto loc_826A766C;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x821c9790
	ctx.lr = 0x826A75CC;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r25
	ctx.r5.u64 = ctx.r25.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A75DC;
	sub_825ED480(ctx, base);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r14,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r14.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stw r11,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r11.u32);
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// stw r11,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r11.u32);
	// addi r3,r1,136
	ctx.r3.s64 = ctx.r1.s64 + 136;
	// stw r14,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r14.u32);
	// bl 0x825ef9a8
	ctx.lr = 0x826A7600;
	sub_825EF9A8(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ef9f0
	ctx.lr = 0x826A7608;
	sub_825EF9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r5,r1,152
	ctx.r5.s64 = ctx.r1.s64 + 152;
	// addi r4,r1,136
	ctx.r4.s64 = ctx.r1.s64 + 136;
	// lwz r10,36(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 36);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A7620;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x825ef9f0
	ctx.lr = 0x826A7628;
	sub_825EF9F0(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
	// lwz r8,80(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 80);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826A763C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826A7648;
	sub_8238F1E8(ctx, base);
	// stw r3,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ef9f0
	ctx.lr = 0x826A7654;
	sub_825EF9F0(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// addi r5,r1,112
	ctx.r5.s64 = ctx.r1.s64 + 112;
	// lwz r6,44(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 44);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A766C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826A766C:
	// bl 0x82387b90
	ctx.lr = 0x826A7670;
	sub_82387B90(ctx, base);
	// lwz r11,1344(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// cmpw cr6,r15,r11
	ctx.cr6.compare<int32_t>(ctx.r15.s32, ctx.r11.s32, ctx.xer);
	// bne cr6,0x826a76c0
	if (!ctx.cr6.eq) goto loc_826A76C0;
	// lwz r3,-10236(r24)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r24.u32 + -10236);
	// lwz r4,116(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7688;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a76b4
	if (ctx.cr6.eq) goto loc_826A76B4;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a76b4
	if (ctx.cr6.eq) goto loc_826A76B4;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a76b4
	if (ctx.cr6.eq) goto loc_826A76B4;
	// mr r5,r15
	ctx.r5.u64 = ctx.r15.u64;
	// lwz r4,120(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// bl 0x825ee0e0
	ctx.lr = 0x826A76B4;
	sub_825EE0E0(ctx, base);
loc_826A76B4:
	// lwz r11,364(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 364);
	// stw r28,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r28.u32);
	// stw r15,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r15.u32);
loc_826A76C0:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r15,r15,1
	ctx.r15.s64 = ctx.r15.s64 + 1;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// addi r21,r21,168
	ctx.r21.s64 = ctx.r21.s64 + 168;
	// addi r9,r11,8176
	ctx.r9.s64 = ctx.r11.s64 + 8176;
	// cmpw cr6,r15,r10
	ctx.cr6.compare<int32_t>(ctx.r15.s32, ctx.r10.s32, ctx.xer);
	// stw r9,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r9.u32);
	// blt cr6,0x826a7360
	if (ctx.cr6.lt) goto loc_826A7360;
loc_826A76E0:
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -168);
	// lfd f31,-160(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A76F4:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,336
	ctx.r1.s64 = ctx.r1.s64 + 336;
	// lfd f30,-168(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -168);
	// lfd f31,-160(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -160);
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A7708"))) PPC_WEAK_FUNC(sub_826A7708);
PPC_FUNC_IMPL(__imp__sub_826A7708) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A7710;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A772C;
	sub_822A3998(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x82387a18
	ctx.lr = 0x826A7734;
	sub_82387A18(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826a7758
	if (ctx.cr6.eq) goto loc_826A7758;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x822a8170
	ctx.lr = 0x826A774C;
	sub_822A8170(ctx, base);
	// li r11,192
	ctx.r11.s64 = 192;
	// lvx128 v63,r0,r3
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r30,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r30.u32 + ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826A7758:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A776C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r9,-24668
	ctx.r3.s64 = ctx.r9.s64 + -24668;
	// bl 0x821fa230
	ctx.lr = 0x826A777C;
	sub_821FA230(ctx, base);
	// cmplw cr6,r3,r31
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, ctx.r31.u32, ctx.xer);
	// bne cr6,0x826a77c0
	if (!ctx.cr6.eq) goto loc_826A77C0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r5,r11,-25172
	ctx.r5.s64 = ctx.r11.s64 + -25172;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A77A0;
	sub_826A6140(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826A77A4;
	sub_82387B90(ctx, base);
	// lwz r9,1344(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// cmpw cr6,r9,r30
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r30.s32, ctx.xer);
	// bne cr6,0x826a77c0
	if (!ctx.cr6.eq) goto loc_826A77C0;
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x82216138
	ctx.lr = 0x826A77B8;
	sub_82216138(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A77C0:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8269dfe0
	ctx.lr = 0x826A77CC;
	sub_8269DFE0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A77D4"))) PPC_WEAK_FUNC(sub_826A77D4);
PPC_FUNC_IMPL(__imp__sub_826A77D4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A77D8"))) PPC_WEAK_FUNC(sub_826A77D8);
PPC_FUNC_IMPL(__imp__sub_826A77D8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A77FC;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r4,128
	ctx.r4.s64 = 128;
	// addi r5,r9,-24648
	ctx.r5.s64 = ctx.r9.s64 + -24648;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r8,48(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lwz r31,132(r8)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r8.u32 + 132);
	// addi r6,r31,8109
	ctx.r6.s64 = ctx.r31.s64 + 8109;
	// bl 0x82137a08
	ctx.lr = 0x826A7820;
	sub_82137A08(ctx, base);
	// lis r7,-32121
	ctx.r7.s64 = -2105081856;
	// lis r6,1
	ctx.r6.s64 = 65536;
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// ori r5,r6,3600
	ctx.r5.u64 = ctx.r6.u64 | 3600;
	// lwz r11,-10028(r7)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r7.u32 + -10028);
	// lwzx r3,r11,r5
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r5.u32);
	// bl 0x82695c78
	ctx.lr = 0x826A783C;
	sub_82695C78(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lbz r31,2116(r31)
	ctx.r31.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2116);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7858;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7898
	if (ctx.cr6.eq) goto loc_826A7898;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7898
	if (ctx.cr6.eq) goto loc_826A7898;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7898
	if (ctx.cr6.eq) goto loc_826A7898;
	// extsw r11,r31
	ctx.r11.s64 = ctx.r31.s32;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// addi r4,r10,-25172
	ctx.r4.s64 = ctx.r10.s64 + -25172;
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x825ee188
	ctx.lr = 0x826A7898;
	sub_825EE188(ctx, base);
loc_826A7898:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A78B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A78C8"))) PPC_WEAK_FUNC(sub_826A78C8);
PPC_FUNC_IMPL(__imp__sub_826A78C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// ori r9,r10,3600
	ctx.r9.u64 = ctx.r10.u64 | 3600;
	// lwz r11,-10028(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// lwzx r11,r11,r9
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r9.u32);
	// addi r11,r11,20
	ctx.r11.s64 = ctx.r11.s64 + 20;
	// lwz r8,64(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// rlwinm r10,r8,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// add r7,r10,r11
	ctx.r7.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r3,-4(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + -4);
	// bl 0x826947e0
	ctx.lr = 0x826A7904;
	sub_826947E0(ctx, base);
	// lis r6,-32121
	ctx.r6.s64 = -2105081856;
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r5,-21664
	ctx.r4.s64 = ctx.r5.s64 + -21664;
	// lwz r3,-10236(r6)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r6.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A791C;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a795c
	if (ctx.cr6.eq) goto loc_826A795C;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a795c
	if (ctx.cr6.eq) goto loc_826A795C;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a795c
	if (ctx.cr6.eq) goto loc_826A795C;
	// extsw r11,r31
	ctx.r11.s64 = ctx.r31.s32;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// addi r4,r10,-25172
	ctx.r4.s64 = ctx.r10.s64 + -25172;
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x825ee188
	ctx.lr = 0x826A795C;
	sub_825EE188(ctx, base);
loc_826A795C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A7970"))) PPC_WEAK_FUNC(sub_826A7970);
PPC_FUNC_IMPL(__imp__sub_826A7970) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A7978;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x8269e408
	ctx.lr = 0x826A7988;
	sub_8269E408(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// ble cr6,0x826a7a08
	if (!ctx.cr6.gt) goto loc_826A7A08;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r31,r11,-10256
	ctx.r31.s64 = ctx.r11.s64 + -10256;
	// addi r5,r10,-24608
	ctx.r5.s64 = ctx.r10.s64 + -24608;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// bl 0x826a6140
	ctx.lr = 0x826A79B4;
	sub_826A6140(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r9,-24616
	ctx.r5.s64 = ctx.r9.s64 + -24616;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A79CC;
	sub_826A6140(ctx, base);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,18508(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 18508);
	// bl 0x826b94e8
	ctx.lr = 0x826A79DC;
	sub_826B94E8(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r5,r11,-24632
	ctx.r5.s64 = ctx.r11.s64 + -24632;
	// bne cr6,0x826a7a18
	if (!ctx.cr6.eq) goto loc_826A7A18;
	// li r6,1
	ctx.r6.s64 = 1;
	// bl 0x826a6140
	ctx.lr = 0x826A7A00;
	sub_826A6140(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826A7A08:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r5,r11,-24608
	ctx.r5.s64 = ctx.r11.s64 + -24608;
	// addi r4,r10,-10256
	ctx.r4.s64 = ctx.r10.s64 + -10256;
loc_826A7A18:
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x826a6140
	ctx.lr = 0x826A7A20;
	sub_826A6140(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A7A28"))) PPC_WEAK_FUNC(sub_826A7A28);
PPC_FUNC_IMPL(__imp__sub_826A7A28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A7A30;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// lis r30,-32119
	ctx.r30.s64 = -2104950784;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// addi r4,r11,-21664
	ctx.r4.s64 = ctx.r11.s64 + -21664;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// lwz r29,-6752(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + -6752);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7A50;
	sub_821F9FB8(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// addi r28,r11,-21520
	ctx.r28.s64 = ctx.r11.s64 + -21520;
	// beq cr6,0x826a7a84
	if (ctx.cr6.eq) goto loc_826A7A84;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7a84
	if (ctx.cr6.eq) goto loc_826A7A84;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7a84
	if (ctx.cr6.eq) goto loc_826A7A84;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A7A84;
	sub_825EE0E0(ctx, base);
loc_826A7A84:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lwz r29,-6752(r30)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r30.u32 + -6752);
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// addi r30,r11,-10256
	ctx.r30.s64 = ctx.r11.s64 + -10256;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826A7A9C;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7ac8
	if (ctx.cr6.eq) goto loc_826A7AC8;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7ac8
	if (ctx.cr6.eq) goto loc_826A7AC8;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7ac8
	if (ctx.cr6.eq) goto loc_826A7AC8;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A7AC8;
	sub_825EE0E0(ctx, base);
loc_826A7AC8:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-24588
	ctx.r3.s64 = ctx.r10.s64 + -24588;
	// lwz r11,18508(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// lwz r29,508(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x82130000
	ctx.lr = 0x826A7AE4;
	sub_82130000(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7AF0;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7b20
	if (ctx.cr6.eq) goto loc_826A7B20;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7b20
	if (ctx.cr6.eq) goto loc_826A7B20;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7b20
	if (ctx.cr6.eq) goto loc_826A7B20;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-10268
	ctx.r4.s64 = ctx.r11.s64 + -10268;
	// bl 0x825ee0e0
	ctx.lr = 0x826A7B20;
	sub_825EE0E0(ctx, base);
loc_826A7B20:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7B2C;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7b5c
	if (ctx.cr6.eq) goto loc_826A7B5C;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7b5c
	if (ctx.cr6.eq) goto loc_826A7B5C;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7b5c
	if (ctx.cr6.eq) goto loc_826A7B5C;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-10300
	ctx.r4.s64 = ctx.r11.s64 + -10300;
	// bl 0x825ee0e0
	ctx.lr = 0x826A7B5C;
	sub_825EE0E0(ctx, base);
loc_826A7B5C:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7B68;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7b98
	if (ctx.cr6.eq) goto loc_826A7B98;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7b98
	if (ctx.cr6.eq) goto loc_826A7B98;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7b98
	if (ctx.cr6.eq) goto loc_826A7B98;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// addi r4,r11,-24596
	ctx.r4.s64 = ctx.r11.s64 + -24596;
	// bl 0x825ee0e0
	ctx.lr = 0x826A7B98;
	sub_825EE0E0(ctx, base);
loc_826A7B98:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A7BA0"))) PPC_WEAK_FUNC(sub_826A7BA0);
PPC_FUNC_IMPL(__imp__sub_826A7BA0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mulli r11,r4,152
	ctx.r11.s64 = ctx.r4.s64 * 152;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// addis r31,r11,1
	ctx.r31.s64 = ctx.r11.s64 + 65536;
	// addi r31,r31,-23552
	ctx.r31.s64 = ctx.r31.s64 + -23552;
	// lwz r11,140(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 140);
	// cmplwi cr6,r11,1
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 1, ctx.xer);
	// blt cr6,0x826a7c20
	if (ctx.cr6.lt) goto loc_826A7C20;
	// beq cr6,0x826a7bec
	if (ctx.cr6.eq) goto loc_826A7BEC;
	// cmplwi cr6,r11,4
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 4, ctx.xer);
	// bne cr6,0x826a7c34
	if (!ctx.cr6.eq) goto loc_826A7C34;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// bl 0x8269acd0
	ctx.lr = 0x826A7BE8;
	sub_8269ACD0(ctx, base);
	// b 0x826a7c2c
	goto loc_826A7C2C;
loc_826A7BEC:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A7BFC;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r5,148(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 148);
	// lwz r4,144(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 144);
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// bl 0x82391ee0
	ctx.lr = 0x826A7C14;
	sub_82391EE0(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// stb r9,0(r31)
	PPC_STORE_U8(ctx.r31.u32 + 0, ctx.r9.u8);
	// b 0x826a7c34
	goto loc_826A7C34;
loc_826A7C20:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269ab78
	ctx.lr = 0x826A7C2C;
	sub_8269AB78(ctx, base);
loc_826A7C2C:
	// li r11,0
	ctx.r11.s64 = 0;
	// stb r11,0(r31)
	PPC_STORE_U8(ctx.r31.u32 + 0, ctx.r11.u8);
loc_826A7C34:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a7970
	ctx.lr = 0x826A7C3C;
	sub_826A7970(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A7C54"))) PPC_WEAK_FUNC(sub_826A7C54);
PPC_FUNC_IMPL(__imp__sub_826A7C54) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A7C58"))) PPC_WEAK_FUNC(sub_826A7C58);
PPC_FUNC_IMPL(__imp__sub_826A7C58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A7C60;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,1
	ctx.r10.s64 = 65536;
	// lis r9,-32121
	ctx.r9.s64 = -2105081856;
	// ori r8,r10,3600
	ctx.r8.u64 = ctx.r10.u64 | 3600;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,-10028(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + 17268);
	// lwzx r11,r11,r8
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r8.u32);
	// addi r11,r11,20
	ctx.r11.s64 = ctx.r11.s64 + 20;
	// lwz r7,64(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	// rlwinm r10,r7,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// add r6,r10,r11
	ctx.r6.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r29,-4(r6)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r6.u32 + -4);
	// bl 0x822a3998
	ctx.lr = 0x826A7CA0;
	sub_822A3998(ctx, base);
	// lis r5,0
	ctx.r5.s64 = 0;
	// lwz r4,48(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// ori r3,r5,39524
	ctx.r3.u64 = ctx.r5.u64 | 39524;
	// lwz r11,132(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 132);
	// lwzx r4,r31,r3
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r3.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r10,r11,64
	ctx.r10.s64 = ctx.r11.s64 + 64;
	// bl 0x8269a400
	ctx.lr = 0x826A7CC0;
	sub_8269A400(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r10
	ctx.r3.u64 = ctx.r10.u64;
	// bl 0x82391f48
	ctx.lr = 0x826A7CCC;
	sub_82391F48(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,1
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1, ctx.xer);
	// ble cr6,0x826a7cdc
	if (!ctx.cr6.gt) goto loc_826A7CDC;
	// li r30,1
	ctx.r30.s64 = 1;
loc_826A7CDC:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A7CF0;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7d30
	if (ctx.cr6.eq) goto loc_826A7D30;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a7d30
	if (ctx.cr6.eq) goto loc_826A7D30;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a7d30
	if (ctx.cr6.eq) goto loc_826A7D30;
	// extsw r11,r30
	ctx.r11.s64 = ctx.r30.s32;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// std r11,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r11.u64);
	// lfd f0,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f13,f0
	ctx.f13.f64 = double(ctx.f0.s64);
	// addi r4,r10,-25172
	ctx.r4.s64 = ctx.r10.s64 + -25172;
	// frsp f1,f13
	ctx.f1.f64 = double(float(ctx.f13.f64));
	// bl 0x825ee188
	ctx.lr = 0x826A7D30;
	sub_825EE188(ctx, base);
loc_826A7D30:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A7D48;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b48f0
	ctx.lr = 0x826A7D50;
	sub_826B48F0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A7D58"))) PPC_WEAK_FUNC(sub_826A7D58);
PPC_FUNC_IMPL(__imp__sub_826A7D58) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91dc
	ctx.lr = 0x826A7D60;
	__savegprlr_21(ctx, base);
	// addi r12,r1,-96
	ctx.r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823db9d8
	ctx.lr = 0x826A7D68;
	sub_823DB9D8(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r23,r4
	ctx.r23.u64 = ctx.r4.u64;
	// li r21,0
	ctx.r21.s64 = 0;
	// lbz r10,-29347(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29347);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826a8168
	if (ctx.cr6.eq) goto loc_826A8168;
	// cmpwi cr6,r23,0
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 0, ctx.xer);
	// beq cr6,0x826a7dd0
	if (ctx.cr6.eq) goto loc_826A7DD0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-27224
	ctx.r3.s64 = ctx.r11.s64 + -27224;
	// bl 0x821fa230
	ctx.lr = 0x826A7D9C;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,328(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 328);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A7DAC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r8,-28272
	ctx.r4.s64 = ctx.r8.s64 + -28272;
	// bl 0x8268da78
	ctx.lr = 0x826A7DBC;
	sub_8268DA78(ctx, base);
	// lwz r22,4(r3)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x82396fb8
	ctx.lr = 0x826A7DC8;
	sub_82396FB8(ctx, base);
	// lwz r24,100(r3)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// b 0x826a7e1c
	goto loc_826A7E1C;
loc_826A7DD0:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24668
	ctx.r3.s64 = ctx.r11.s64 + -24668;
	// bl 0x821fa230
	ctx.lr = 0x826A7DDC;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,336(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 336);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826A7DEC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826A7DF4;
	sub_82387B90(ctx, base);
	// mulli r8,r22,8176
	ctx.r8.s64 = ctx.r22.s64 * 8176;
	// add r11,r3,r8
	ctx.r11.u64 = ctx.r3.u64 + ctx.r8.u64;
	// addi r24,r11,1360
	ctx.r24.s64 = ctx.r11.s64 + 1360;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8238f1f0
	ctx.lr = 0x826A7E08;
	sub_8238F1F0(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826A7E0C;
	sub_82387B90(ctx, base);
	// lwz r7,1344(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// cmpw cr6,r22,r7
	ctx.cr6.compare<int32_t>(ctx.r22.s32, ctx.r7.s32, ctx.xer);
	// bne cr6,0x826a7e1c
	if (!ctx.cr6.eq) goto loc_826A7E1C;
	// li r21,1
	ctx.r21.s64 = 1;
loc_826A7E1C:
	// addi r3,r24,8109
	ctx.r3.s64 = ctx.r24.s64 + 8109;
	// bl 0x82396408
	ctx.lr = 0x826A7E24;
	sub_82396408(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8238f6b0
	ctx.lr = 0x826A7E30;
	sub_8238F6B0(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r31,r11,-21664
	ctx.r31.s64 = ctx.r11.s64 + -21664;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r10,-24368
	ctx.r5.s64 = ctx.r10.s64 + -24368;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A7E50;
	sub_826A6140(ctx, base);
	// lis r28,-32115
	ctx.r28.s64 = -2104688640;
	// mulli r29,r29,104
	ctx.r29.s64 = ctx.r29.s64 * 104;
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lfs f0,72(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	ctx.f0.f64 = double(temp.f32);
	// addi r5,r7,-24932
	ctx.r5.s64 = ctx.r7.s64 + -24932;
	// lfs f31,31016(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 31016);
	ctx.f31.f64 = double(temp.f32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// fsubs f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f0.f64 - ctx.f31.f64));
	// lfs f30,-27304(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -27304);
	ctx.f30.f64 = double(temp.f32);
	// lfs f12,76(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f11,f12,f31
	ctx.f11.f64 = double(float(ctx.f12.f64 - ctx.f31.f64));
	// fmuls f10,f13,f30
	ctx.f10.f64 = double(float(ctx.f13.f64 * ctx.f30.f64));
	// fmuls f29,f11,f30
	ctx.f29.f64 = double(float(ctx.f11.f64 * ctx.f30.f64));
	// fctiwz f9,f10
	ctx.f9.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f9,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f9.u64);
	// lwz r27,100(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A7EAC;
	sub_826A6140(ctx, base);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// fctiwz f8,f29
	ctx.fpscr.disableFlushMode();
	ctx.f8.s64 = (ctx.f29.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f29.f64));
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r6,-24944
	ctx.r5.s64 = ctx.r6.s64 + -24944;
	// stfd f8,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f8.u64);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// bl 0x826a6140
	ctx.lr = 0x826A7ECC;
	sub_826A6140(ctx, base);
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// stw r27,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r27.u32);
	// lis r3,-32252
	ctx.r3.s64 = -2113667072;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r10,-24964
	ctx.r5.s64 = ctx.r10.s64 + -24964;
	// lfs f7,64(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 64);
	ctx.f7.f64 = double(temp.f32);
	// lfs f29,-8080(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + -8080);
	ctx.f29.f64 = double(temp.f32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// fmuls f6,f7,f29
	ctx.f6.f64 = double(float(ctx.f7.f64 * ctx.f29.f64));
	// lfs f28,68(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 68);
	ctx.f28.f64 = double(temp.f32);
	// fctiwz f5,f6
	ctx.f5.s64 = (ctx.f6.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f6.f64));
	// stfd f5,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f5.u64);
	// lwz r26,100(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A7F10;
	sub_826A6140(ctx, base);
	// fmuls f4,f28,f29
	ctx.fpscr.disableFlushMode();
	ctx.f4.f64 = double(float(ctx.f28.f64 * ctx.f29.f64));
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r9,-24984
	ctx.r5.s64 = ctx.r9.s64 + -24984;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// fctiwz f3,f4
	ctx.f3.s64 = (ctx.f4.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f4.f64));
	// stfd f3,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f3.u64);
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// bl 0x826a6140
	ctx.lr = 0x826A7F34;
	sub_826A6140(ctx, base);
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// stw r26,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r26.u32);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// addi r5,r8,-25000
	ctx.r5.s64 = ctx.r8.s64 + -25000;
	// lfs f2,80(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	ctx.f2.f64 = double(temp.f32);
	// fmuls f1,f2,f31
	ctx.f1.f64 = double(float(ctx.f2.f64 * ctx.f31.f64));
	// fctiwz f0,f1
	ctx.f0.s64 = (ctx.f1.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f1.f64));
	// stfd f0,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f0.u64);
	// lwz r25,100(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// lfs f28,84(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	ctx.f28.f64 = double(temp.f32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A7F70;
	sub_826A6140(ctx, base);
	// fmuls f13,f28,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f28.f64 * ctx.f31.f64));
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r7,-25016
	ctx.r5.s64 = ctx.r7.s64 + -25016;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// fctiwz f12,f13
	ctx.f12.s64 = (ctx.f13.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f13.f64));
	// stfd f12,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f12.u64);
	// lwz r6,100(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// bl 0x826a6140
	ctx.lr = 0x826A7F94;
	sub_826A6140(ctx, base);
	// cmpwi cr6,r23,0
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 0, ctx.xer);
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r25.u32);
	// bne cr6,0x826a8030
	if (!ctx.cr6.eq) goto loc_826A8030;
	// bl 0x82387b90
	ctx.lr = 0x826A7FA4;
	sub_82387B90(ctx, base);
	// rlwinm r11,r22,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r22.u32 | (ctx.r22.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r10,3
	ctx.r10.s64 = 196608;
	// add r11,r22,r11
	ctx.r11.u64 = ctx.r22.u64 + ctx.r11.u64;
	// ori r9,r10,56500
	ctx.r9.u64 = ctx.r10.u64 | 56500;
	// rlwinm r11,r11,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFFFFF8;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// add r8,r11,r3
	ctx.r8.u64 = ctx.r11.u64 + ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r7,-24380
	ctx.r5.s64 = ctx.r7.s64 + -24380;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lfsx f0,r8,r9
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	ctx.f0.f64 = double(temp.f32);
	// fmuls f1,f0,f31
	ctx.f1.f64 = double(float(ctx.f0.f64 * ctx.f31.f64));
	// bl 0x826a61b0
	ctx.lr = 0x826A7FD8;
	sub_826A61B0(ctx, base);
	// clrlwi r6,r21,24
	ctx.r6.u64 = ctx.r21.u32 & 0xFF;
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// beq cr6,0x826a8078
	if (ctx.cr6.eq) goto loc_826A8078;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269e4e0
	ctx.lr = 0x826A7FF8;
	sub_8269E4E0(ctx, base);
	// addi r6,r1,88
	ctx.r6.s64 = ctx.r1.s64 + 88;
	// li r5,2
	ctx.r5.s64 = 2;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269e4e0
	ctx.lr = 0x826A800C;
	sub_8269E4E0(ctx, base);
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269e4e0
	ctx.lr = 0x826A8020;
	sub_8269E4E0(ctx, base);
	// lwz r27,80(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r26,88(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r25,96(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// b 0x826a8078
	goto loc_826A8078;
loc_826A8030:
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// add r11,r29,r11
	ctx.r11.u64 = ctx.r29.u64 + ctx.r11.u64;
	// lfs f0,92(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 92);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f13,f0,f31
	ctx.f13.f64 = double(float(ctx.f0.f64 - ctx.f31.f64));
	// lfs f12,88(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 88);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,96(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 96);
	ctx.f11.f64 = double(temp.f32);
	// fmuls f10,f12,f29
	ctx.f10.f64 = double(float(ctx.f12.f64 * ctx.f29.f64));
	// fmuls f9,f11,f31
	ctx.f9.f64 = double(float(ctx.f11.f64 * ctx.f31.f64));
	// fmuls f8,f13,f30
	ctx.f8.f64 = double(float(ctx.f13.f64 * ctx.f30.f64));
	// fctiwz f7,f10
	ctx.f7.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f7,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f7.u64);
	// lwz r26,100(r1)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// fctiwz f6,f9
	ctx.f6.s64 = (ctx.f9.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f9.f64));
	// stfd f6,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.f6.u64);
	// lwz r25,92(r1)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// fctiwz f5,f8
	ctx.f5.s64 = (ctx.f8.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f8.f64));
	// stfd f5,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.f5.u64);
	// lwz r27,100(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
loc_826A8078:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r11,-24392
	ctx.r5.s64 = ctx.r11.s64 + -24392;
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A8090;
	sub_826A6140(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r10,-24412
	ctx.r5.s64 = ctx.r10.s64 + -24412;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A80A8;
	sub_826A6140(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r5,r9,-24428
	ctx.r5.s64 = ctx.r9.s64 + -24428;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a6140
	ctx.lr = 0x826A80C0;
	sub_826A6140(ctx, base);
	// clrlwi r8,r21,24
	ctx.r8.u64 = ctx.r21.u32 & 0xFF;
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826a8168
	if (ctx.cr6.eq) goto loc_826A8168;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r6,r25
	ctx.r6.u64 = ctx.r25.u64;
	// addi r3,r11,-24488
	ctx.r3.s64 = ctx.r11.s64 + -24488;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x82130000
	ctx.lr = 0x826A80E4;
	sub_82130000(ctx, base);
	// extsw r10,r27
	ctx.r10.s64 = ctx.r27.s32;
	// extsw r9,r25
	ctx.r9.s64 = ctx.r25.s32;
	// std r10,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r10.u64);
	// extsw r8,r26
	ctx.r8.s64 = ctx.r26.s32;
	// std r9,88(r1)
	PPC_STORE_U64(ctx.r1.u32 + 88, ctx.r9.u64);
	// lfd f11,88(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f11.u64 = PPC_LOAD_U64(ctx.r1.u32 + 88);
	// fcfid f9,f11
	ctx.f9.f64 = double(ctx.f11.s64);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lfd f0,96(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// std r8,96(r1)
	PPC_STORE_U64(ctx.r1.u32 + 96, ctx.r8.u64);
	// lfd f13,96(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 96);
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// fcfid f10,f0
	ctx.f10.f64 = double(ctx.f0.s64);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// frsp f8,f12
	ctx.f8.f64 = double(float(ctx.f12.f64));
	// lis r5,-32253
	ctx.r5.s64 = -2113732608;
	// frsp f6,f9
	ctx.f6.f64 = double(float(ctx.f9.f64));
	// lfs f0,11360(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lfs f13,-24492(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -24492);
	ctx.f13.f64 = double(temp.f32);
	// addi r3,r4,-24560
	ctx.r3.s64 = ctx.r4.s64 + -24560;
	// lfs f12,-15752(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + -15752);
	ctx.f12.f64 = double(temp.f32);
	// frsp f7,f10
	ctx.f7.f64 = double(float(ctx.f10.f64));
	// fmuls f2,f8,f13
	ctx.f2.f64 = double(float(ctx.f8.f64 * ctx.f13.f64));
	// stfd f2,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f2.u64);
	// fmuls f3,f6,f0
	ctx.f3.f64 = double(float(ctx.f6.f64 * ctx.f0.f64));
	// stfd f3,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f3.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// fmadds f1,f7,f12,f31
	ctx.f1.f64 = double(float(ctx.f7.f64 * ctx.f12.f64 + ctx.f31.f64));
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// bl 0x82130000
	ctx.lr = 0x826A8168;
	sub_82130000(ctx, base);
loc_826A8168:
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// addi r12,r1,-96
	ctx.r12.s64 = ctx.r1.s64 + -96;
	// bl 0x823dba24
	ctx.lr = 0x826A8174;
	__restfpr_28(ctx, base);
	// b 0x823d922c
	__restgprlr_21(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A8178"))) PPC_WEAK_FUNC(sub_826A8178);
PPC_FUNC_IMPL(__imp__sub_826A8178) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826A8180;
	__savegprlr_27(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A8198;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r31,132(r10)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8238f1f0
	ctx.lr = 0x826A81A8;
	sub_8238F1F0(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8238f6b0
	ctx.lr = 0x826A81B0;
	sub_8238F6B0(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// addi r30,r11,-21664
	ctx.r30.s64 = ctx.r11.s64 + -21664;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A81CC;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a81fc
	if (ctx.cr6.eq) goto loc_826A81FC;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a81fc
	if (ctx.cr6.eq) goto loc_826A81FC;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a81fc
	if (ctx.cr6.eq) goto loc_826A81FC;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// addi r4,r11,-24368
	ctx.r4.s64 = ctx.r11.s64 + -24368;
	// bl 0x825ee0e0
	ctx.lr = 0x826A81FC;
	sub_825EE0E0(ctx, base);
loc_826A81FC:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269e4e0
	ctx.lr = 0x826A8210;
	sub_8269E4E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A821C;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a824c
	if (ctx.cr6.eq) goto loc_826A824C;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a824c
	if (ctx.cr6.eq) goto loc_826A824C;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a824c
	if (ctx.cr6.eq) goto loc_826A824C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r11,-24392
	ctx.r4.s64 = ctx.r11.s64 + -24392;
	// bl 0x825ee0e0
	ctx.lr = 0x826A824C;
	sub_825EE0E0(ctx, base);
loc_826A824C:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,2
	ctx.r5.s64 = 2;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269e4e0
	ctx.lr = 0x826A8260;
	sub_8269E4E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A826C;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a829c
	if (ctx.cr6.eq) goto loc_826A829C;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a829c
	if (ctx.cr6.eq) goto loc_826A829C;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a829c
	if (ctx.cr6.eq) goto loc_826A829C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r11,-24412
	ctx.r4.s64 = ctx.r11.s64 + -24412;
	// bl 0x825ee0e0
	ctx.lr = 0x826A829C;
	sub_825EE0E0(ctx, base);
loc_826A829C:
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269e4e0
	ctx.lr = 0x826A82B0;
	sub_8269E4E0(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A82BC;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a82ec
	if (ctx.cr6.eq) goto loc_826A82EC;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a82ec
	if (ctx.cr6.eq) goto loc_826A82EC;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a82ec
	if (ctx.cr6.eq) goto loc_826A82EC;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r5,80(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r4,r11,-24428
	ctx.r4.s64 = ctx.r11.s64 + -24428;
	// bl 0x825ee0e0
	ctx.lr = 0x826A82EC;
	sub_825EE0E0(ctx, base);
loc_826A82EC:
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A82F4"))) PPC_WEAK_FUNC(sub_826A82F4);
PPC_FUNC_IMPL(__imp__sub_826A82F4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A82F8"))) PPC_WEAK_FUNC(sub_826A82F8);
PPC_FUNC_IMPL(__imp__sub_826A82F8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e4
	ctx.lr = 0x826A8300;
	__savegprlr_23(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268f078
	ctx.lr = 0x826A8314;
	sub_8268F078(ctx, base);
	// lwz r11,32(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x8268f078
	ctx.lr = 0x826A8324;
	sub_8268F078(ctx, base);
	// lis r27,-32121
	ctx.r27.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r24,32(r29)
	ctx.r24.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A833C;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-25044
	ctx.r4.s64 = ctx.r9.s64 + -25044;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r8,48(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// li r26,-1
	ctx.r26.s64 = -1;
	// lwz r23,132(r8)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r8.u32 + 132);
	// addi r29,r23,20
	ctx.r29.s64 = ctx.r23.s64 + 20;
	// bl 0x8268da78
	ctx.lr = 0x826A8364;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8370
	if (ctx.cr6.eq) goto loc_826A8370;
	// lwz r26,4(r3)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_826A8370:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-24356
	ctx.r4.s64 = ctx.r11.s64 + -24356;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8384;
	sub_8268DA78(ctx, base);
	// li r28,1
	ctx.r28.s64 = 1;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8398
	if (ctx.cr6.eq) goto loc_826A8398;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
loc_826A8398:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-25448
	ctx.r4.s64 = ctx.r11.s64 + -25448;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A83AC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a83d8
	if (ctx.cr6.eq) goto loc_826A83D8;
	// rlwinm r11,r30,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 1) & 0xFFFFFFFE;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// rlwinm r11,r11,3,0,28
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 3) & 0xFFFFFFF8;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// addi r10,r11,5068
	ctx.r10.s64 = ctx.r11.s64 + 5068;
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r8,r9,r25
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r25.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
	// stw r8,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r8.u32);
loc_826A83D8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r3,r11,-28264
	ctx.r3.s64 = ctx.r11.s64 + -28264;
	// bl 0x82130000
	ctx.lr = 0x826A83E8;
	sub_82130000(ctx, base);
	// cmplwi cr6,r26,12
	ctx.cr6.compare<uint32_t>(ctx.r26.u32, 12, ctx.xer);
	// bgt cr6,0x826a84d0
	if (ctx.cr6.gt) goto loc_826A84D0;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,-31736
	ctx.r12.s64 = ctx.r12.s64 + -31736;
	// rlwinm r0,r26,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r26.u32 | (ctx.r26.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r26.u64) {
	case 0:
		goto loc_826A843C;
	case 1:
		goto loc_826A8444;
	case 2:
		goto loc_826A8450;
	case 3:
		goto loc_826A845C;
	case 4:
		goto loc_826A8468;
	case 5:
		goto loc_826A8474;
	case 6:
		goto loc_826A8480;
	case 7:
		goto loc_826A848C;
	case 8:
		goto loc_826A8494;
	case 9:
		goto loc_826A84A0;
	case 10:
		goto loc_826A84A8;
	case 11:
		goto loc_826A84B4;
	case 12:
		goto loc_826A84BC;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-31684(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31684);
	// lwz r19,-31676(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31676);
	// lwz r19,-31664(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31664);
	// lwz r19,-31652(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31652);
	// lwz r19,-31640(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31640);
	// lwz r19,-31628(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31628);
	// lwz r19,-31616(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31616);
	// lwz r19,-31604(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31604);
	// lwz r19,-31596(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31596);
	// lwz r19,-31584(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31584);
	// lwz r19,-31576(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31576);
	// lwz r19,-31564(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31564);
	// lwz r19,-31556(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -31556);
loc_826A843C:
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c0
	goto loc_826A84C0;
loc_826A8444:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A8450:
	// li r5,2
	ctx.r5.s64 = 2;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A845C:
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A8468:
	// li r5,4
	ctx.r5.s64 = 4;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A8474:
	// li r5,5
	ctx.r5.s64 = 5;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A8480:
	// li r5,6
	ctx.r5.s64 = 6;
	// li r4,0
	ctx.r4.s64 = 0;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A848C:
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x826a84c0
	goto loc_826A84C0;
loc_826A8494:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A84A0:
	// li r4,2
	ctx.r4.s64 = 2;
	// b 0x826a84c0
	goto loc_826A84C0;
loc_826A84A8:
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,2
	ctx.r4.s64 = 2;
	// b 0x826a84c4
	goto loc_826A84C4;
loc_826A84B4:
	// li r4,3
	ctx.r4.s64 = 3;
	// b 0x826a84c0
	goto loc_826A84C0;
loc_826A84BC:
	// li r4,4
	ctx.r4.s64 = 4;
loc_826A84C0:
	// li r5,0
	ctx.r5.s64 = 0;
loc_826A84C4:
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82397f60
	ctx.lr = 0x826A84D0;
	sub_82397F60(ctx, base);
loc_826A84D0:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A84DC;
	sub_822A3998(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// lwz r31,48(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// bl 0x822a3998
	ctx.lr = 0x826A84F0;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,76(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 76);
	// bl 0x82361988
	ctx.lr = 0x826A8504;
	sub_82361988(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A8510;
	sub_822A3998(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// lwz r31,48(r9)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// bl 0x822a3998
	ctx.lr = 0x826A8524;
	sub_822A3998(ctx, base);
	// lwz r8,48(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,76(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 76);
	// bl 0x82363210
	ctx.lr = 0x826A8534;
	sub_82363210(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r4,32(r24)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r24.u32 + 32);
	// bl 0x826a5130
	ctx.lr = 0x826A8540;
	sub_826A5130(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x826a8178
	ctx.lr = 0x826A8548;
	sub_826A8178(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A8550"))) PPC_WEAK_FUNC(sub_826A8550);
PPC_FUNC_IMPL(__imp__sub_826A8550) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826A8558;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r11,0
	ctx.r11.s64 = 0;
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r30,r11,-21664
	ctx.r30.s64 = ctx.r11.s64 + -21664;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A8580;
	sub_821F9FB8(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r10,-25488
	ctx.r4.s64 = ctx.r10.s64 + -25488;
	// bl 0x825ee120
	ctx.lr = 0x826A8594;
	sub_825EE120(ctx, base);
	// lbz r9,21670(r31)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21670);
	// lis r28,-32121
	ctx.r28.s64 = -2105081856;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a85b0
	if (!ctx.cr6.eq) goto loc_826A85B0;
	// lwz r3,18508(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 18508);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x826b94a8
	ctx.lr = 0x826A85B0;
	sub_826B94A8(ctx, base);
loc_826A85B0:
	// lwz r11,18508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 18508);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r28,508(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a7a28
	ctx.lr = 0x826A85C0;
	sub_826A7A28(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A85CC;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a85fc
	if (ctx.cr6.eq) goto loc_826A85FC;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a85fc
	if (ctx.cr6.eq) goto loc_826A85FC;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a85fc
	if (ctx.cr6.eq) goto loc_826A85FC;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// addi r4,r11,-14556
	ctx.r4.s64 = ctx.r11.s64 + -14556;
	// bl 0x825ee0e0
	ctx.lr = 0x826A85FC;
	sub_825EE0E0(ctx, base);
loc_826A85FC:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A860C;
	sub_822A3998(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// addi r3,r3,-15944
	ctx.r3.s64 = ctx.r3.s64 + -15944;
	// lwz r9,48(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 48);
	// lwz r11,132(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 132);
	// addi r4,r11,20
	ctx.r4.s64 = ctx.r11.s64 + 20;
	// bl 0x82397e88
	ctx.lr = 0x826A8628;
	sub_82397E88(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x8269b7c0
	ctx.lr = 0x826A8634;
	sub_8269B7C0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A863C"))) PPC_WEAK_FUNC(sub_826A863C);
PPC_FUNC_IMPL(__imp__sub_826A863C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A8640"))) PPC_WEAK_FUNC(sub_826A8640);
PPC_FUNC_IMPL(__imp__sub_826A8640) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c0
	ctx.lr = 0x826A8648;
	__savegprlr_14(ctx, base);
	// stwu r1,-944(r1)
	ea = -944 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A8664;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// clrlwi r11,r31,24
	ctx.r11.u64 = ctx.r31.u32 & 0xFF;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r11.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r9,r11,20
	ctx.r9.s64 = ctx.r11.s64 + 20;
	// addi r31,r11,8109
	ctx.r31.s64 = ctx.r11.s64 + 8109;
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// beq cr6,0x826a8694
	if (ctx.cr6.eq) goto loc_826A8694;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8269b7c0
	ctx.lr = 0x826A8694;
	sub_8269B7C0(ctx, base);
loc_826A8694:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// addi r5,r11,-24344
	ctx.r5.s64 = ctx.r11.s64 + -24344;
	// li r4,128
	ctx.r4.s64 = 128;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82137a08
	ctx.lr = 0x826A86AC;
	sub_82137A08(ctx, base);
	// lis r11,-32131
	ctx.r11.s64 = -2105737216;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r31,r11,30576
	ctx.r31.s64 = ctx.r11.s64 + 30576;
	// addi r4,r10,-27620
	ctx.r4.s64 = ctx.r10.s64 + -27620;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821ca540
	ctx.lr = 0x826A86C4;
	sub_821CA540(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r5,r9,-25252
	ctx.r5.s64 = ctx.r9.s64 + -25252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// bl 0x821ca6a8
	ctx.lr = 0x826A86E0;
	sub_821CA6A8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// stw r30,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r30.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// bne cr6,0x826a86f8
	if (!ctx.cr6.eq) goto loc_826A86F8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821c9a90
	ctx.lr = 0x826A86F8;
	sub_821C9A90(ctx, base);
loc_826A86F8:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821c9a90
	ctx.lr = 0x826A8700;
	sub_821C9A90(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r26,0
	ctx.r26.s64 = 0;
	// addi r10,r11,-29924
	ctx.r10.s64 = ctx.r11.s64 + -29924;
	// stw r26,784(r1)
	PPC_STORE_U32(ctx.r1.u32 + 784, ctx.r26.u32);
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// stw r10,240(r1)
	PPC_STORE_U32(ctx.r1.u32 + 240, ctx.r10.u32);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// lwz r4,4416(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4416);
	// bl 0x821cf7b8
	ctx.lr = 0x826A8728;
	sub_821CF7B8(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-25028
	ctx.r3.s64 = ctx.r8.s64 + -25028;
	// bl 0x821fa230
	ctx.lr = 0x826A8734;
	sub_821FA230(ctx, base);
	// mr r14,r3
	ctx.r14.u64 = ctx.r3.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A873C;
	sub_8268DAF8(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x821d0490
	ctx.lr = 0x826A8748;
	sub_821D0490(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// stw r31,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r31.u32);
	// bl 0x8269e888
	ctx.lr = 0x826A8758;
	sub_8269E888(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// stw r26,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r26.u32);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// ble cr6,0x826a8c64
	if (!ctx.cr6.gt) goto loc_826A8C64;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// mr r20,r26
	ctx.r20.u64 = ctx.r26.u64;
	// addi r27,r24,20276
	ctx.r27.s64 = ctx.r24.s64 + 20276;
	// li r25,1
	ctx.r25.s64 = 1;
	// lis r22,-32111
	ctx.r22.s64 = -2104426496;
	// addi r19,r11,-19624
	ctx.r19.s64 = ctx.r11.s64 + -19624;
	// addi r18,r10,20276
	ctx.r18.s64 = ctx.r10.s64 + 20276;
	// addi r17,r9,-25044
	ctx.r17.s64 = ctx.r9.s64 + -25044;
	// addi r16,r8,-25448
	ctx.r16.s64 = ctx.r8.s64 + -25448;
	// addi r15,r7,2824
	ctx.r15.s64 = ctx.r7.s64 + 2824;
	// addi r21,r6,-24356
	ctx.r21.s64 = ctx.r6.s64 + -24356;
loc_826A87A8:
	// addi r31,r27,-88
	ctx.r31.s64 = ctx.r27.s64 + -88;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x821cffe8
	ctx.lr = 0x826A87C4;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a87a8
	if (ctx.cr6.eq) goto loc_826A87A8;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x821d0490
	ctx.lr = 0x826A87D8;
	sub_821D0490(ctx, base);
	// stw r3,-8(r27)
	PPC_STORE_U32(ctx.r27.u32 + -8, ctx.r3.u32);
	// stw r26,84(r31)
	PPC_STORE_U32(ctx.r31.u32 + 84, ctx.r26.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x821d0490
	ctx.lr = 0x826A87EC;
	sub_821D0490(ctx, base);
	// stw r3,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r3.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,240
	ctx.r3.s64 = ctx.r1.s64 + 240;
	// bl 0x821d0490
	ctx.lr = 0x826A87FC;
	sub_821D0490(ctx, base);
	// stw r3,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r3.u32);
	// lbz r11,-29346(r22)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r22.u32 + -29346);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a8814
	if (ctx.cr6.eq) goto loc_826A8814;
	// stw r26,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r26.u32);
	// stw r26,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r26.u32);
loc_826A8814:
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x8268db80
	ctx.lr = 0x826A881C;
	sub_8268DB80(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A8834;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,-8(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -8);
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// mr r30,r26
	ctx.r30.u64 = ctx.r26.u64;
	// cmplwi cr6,r11,12
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 12, ctx.xer);
	// bgt cr6,0x826a891c
	if (ctx.cr6.gt) goto loc_826A891C;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,-30624
	ctx.r12.s64 = ctx.r12.s64 + -30624;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826A8894;
	case 1:
		goto loc_826A889C;
	case 2:
		goto loc_826A88A8;
	case 3:
		goto loc_826A88B4;
	case 4:
		goto loc_826A88C0;
	case 5:
		goto loc_826A88CC;
	case 6:
		goto loc_826A88D8;
	case 7:
		goto loc_826A88E4;
	case 8:
		goto loc_826A88EC;
	case 9:
		goto loc_826A88F8;
	case 10:
		goto loc_826A8900;
	case 11:
		goto loc_826A890C;
	case 12:
		goto loc_826A8914;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-30572(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30572);
	// lwz r19,-30564(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30564);
	// lwz r19,-30552(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30552);
	// lwz r19,-30540(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30540);
	// lwz r19,-30528(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30528);
	// lwz r19,-30516(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30516);
	// lwz r19,-30504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30504);
	// lwz r19,-30492(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30492);
	// lwz r19,-30484(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30484);
	// lwz r19,-30472(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30472);
	// lwz r19,-30464(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30464);
	// lwz r19,-30452(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30452);
	// lwz r19,-30444(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -30444);
loc_826A8894:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// b 0x826a8918
	goto loc_826A8918;
loc_826A889C:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88A8:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// li r30,2
	ctx.r30.s64 = 2;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88B4:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// li r30,3
	ctx.r30.s64 = 3;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88C0:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// li r30,4
	ctx.r30.s64 = 4;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88CC:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// li r30,5
	ctx.r30.s64 = 5;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88D8:
	// mr r31,r26
	ctx.r31.u64 = ctx.r26.u64;
	// li r30,6
	ctx.r30.s64 = 6;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88E4:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
	// b 0x826a8918
	goto loc_826A8918;
loc_826A88EC:
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A88F8:
	// li r31,2
	ctx.r31.s64 = 2;
	// b 0x826a8918
	goto loc_826A8918;
loc_826A8900:
	// li r31,2
	ctx.r31.s64 = 2;
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// b 0x826a891c
	goto loc_826A891C;
loc_826A890C:
	// li r31,3
	ctx.r31.s64 = 3;
	// b 0x826a8918
	goto loc_826A8918;
loc_826A8914:
	// li r31,4
	ctx.r31.s64 = 4;
loc_826A8918:
	// mr r30,r26
	ctx.r30.u64 = ctx.r26.u64;
loc_826A891C:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8269b6d8
	ctx.lr = 0x826A892C;
	sub_8269B6D8(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,96(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// bl 0x82398018
	ctx.lr = 0x826A8940;
	sub_82398018(ctx, base);
	// clrlwi r31,r3,24
	ctx.r31.u64 = ctx.r3.u32 & 0xFF;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A8950;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A8960;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r23,0
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 0, ctx.xer);
	// bne cr6,0x826a8a4c
	if (!ctx.cr6.eq) goto loc_826A8A4C;
	// lwz r11,-8(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a8a08
	if (ctx.cr6.eq) goto loc_826A8A08;
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// beq cr6,0x826a8a08
	if (ctx.cr6.eq) goto loc_826A8A08;
	// cmpwi cr6,r11,12
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 12, ctx.xer);
	// beq cr6,0x826a8a08
	if (ctx.cr6.eq) goto loc_826A8A08;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ble cr6,0x826a89d4
	if (!ctx.cr6.gt) goto loc_826A89D4;
	// stw r26,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r26.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8268dcb0
	ctx.lr = 0x826A899C;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
loc_826A89A8:
	// bctrl 
	ctx.lr = 0x826A89AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
loc_826A89B0:
	// ble cr6,0x826a8a30
	if (!ctx.cr6.gt) goto loc_826A8A30;
	// stw r26,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r26.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A89C4;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// b 0x826a8af8
	goto loc_826A8AF8;
loc_826A89D4:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8268dcb0
	ctx.lr = 0x826A89DC;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A89EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A89F8;
	sub_8268DCB0(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,80(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 80);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// b 0x826a89a8
	goto loc_826A89A8;
loc_826A8A08:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A8A14;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A8A24;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// bne cr6,0x826a89b0
	if (!ctx.cr6.eq) goto loc_826A89B0;
	// stw r26,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r26.u32);
loc_826A8A30:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A8A3C;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// b 0x826a8af8
	goto loc_826A8AF8;
loc_826A8A4C:
	// cmpwi cr6,r23,1
	ctx.cr6.compare<int32_t>(ctx.r23.s32, 1, ctx.xer);
	// bne cr6,0x826a8aa8
	if (!ctx.cr6.eq) goto loc_826A8AA8;
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// ble cr6,0x826a8a78
	if (!ctx.cr6.gt) goto loc_826A8A78;
	// stw r26,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r26.u32);
	// bl 0x8268dcb0
	ctx.lr = 0x826A8A6C;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// b 0x826a8a84
	goto loc_826A8A84;
loc_826A8A78:
	// bl 0x8268dcb0
	ctx.lr = 0x826A8A7C;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,80(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 80);
loc_826A8A84:
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A8A8C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A8A98;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// b 0x826a8af8
	goto loc_826A8AF8;
loc_826A8AA8:
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// bne cr6,0x826a8ab8
	if (!ctx.cr6.eq) goto loc_826A8AB8;
	// stw r26,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r26.u32);
	// b 0x826a8ac4
	goto loc_826A8AC4;
loc_826A8AB8:
	// cmpwi cr6,r28,2
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 2, ctx.xer);
	// bne cr6,0x826a8ac4
	if (!ctx.cr6.eq) goto loc_826A8AC4;
	// stw r26,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r26.u32);
loc_826A8AC4:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A8AD0;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A8AE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826A8AEC;
	sub_8268DCB0(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,84(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 84);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
loc_826A8AF8:
	// bctrl 
	ctx.lr = 0x826A8AFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// blt cr6,0x826a8b08
	if (ctx.cr6.lt) goto loc_826A8B08;
	// stw r26,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r26.u32);
loc_826A8B08:
	// cmpwi cr6,r28,2
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 2, ctx.xer);
	// blt cr6,0x826a8b14
	if (ctx.cr6.lt) goto loc_826A8B14;
	// stw r26,4(r27)
	PPC_STORE_U32(ctx.r27.u32 + 4, ctx.r26.u32);
loc_826A8B14:
	// stw r31,12(r29)
	PPC_STORE_U32(ctx.r29.u32 + 12, ctx.r31.u32);
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8B28;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8b38
	if (ctx.cr6.eq) goto loc_826A8B38;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r25.u32);
loc_826A8B38:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a8b64
	if (ctx.cr6.eq) goto loc_826A8B64;
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8B54;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8b64
	if (ctx.cr6.eq) goto loc_826A8B64;
	// stw r31,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r31.u32);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r25.u32);
loc_826A8B64:
	// mr r4,r16
	ctx.r4.u64 = ctx.r16.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8B74;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8b94
	if (ctx.cr6.eq) goto loc_826A8B94;
	// add r11,r20,r31
	ctx.r11.u64 = ctx.r20.u64 + ctx.r31.u64;
	// addi r11,r11,5068
	ctx.r11.s64 = ctx.r11.s64 + 5068;
	// rlwinm r10,r11,2,0,29
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r9,r10,r24
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r24.u32);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r25.u32);
	// stw r9,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r9.u32);
loc_826A8B94:
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8BA4;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8bb8
	if (ctx.cr6.eq) goto loc_826A8BB8;
	// lwz r11,-8(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -8);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r25.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A8BB8:
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8BC8;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8c1c
	if (ctx.cr6.eq) goto loc_826A8C1C;
	// cmpw cr6,r28,r23
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r23.s32, ctx.xer);
	// ble cr6,0x826a8be0
	if (!ctx.cr6.gt) goto loc_826A8BE0;
	// addi r11,r28,1
	ctx.r11.s64 = ctx.r28.s64 + 1;
	// b 0x826a8c14
	goto loc_826A8C14;
loc_826A8BE0:
	// lwz r11,-8(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -8);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a8c04
	if (ctx.cr6.eq) goto loc_826A8C04;
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// beq cr6,0x826a8c04
	if (ctx.cr6.eq) goto loc_826A8C04;
	// cmpwi cr6,r11,12
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 12, ctx.xer);
	// beq cr6,0x826a8c04
	if (ctx.cr6.eq) goto loc_826A8C04;
	// addi r11,r23,1
	ctx.r11.s64 = ctx.r23.s64 + 1;
	// b 0x826a8c14
	goto loc_826A8C14;
loc_826A8C04:
	// addi r11,r23,1
	ctx.r11.s64 = ctx.r23.s64 + 1;
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bge cr6,0x826a8c14
	if (!ctx.cr6.lt) goto loc_826A8C14;
	// li r11,2
	ctx.r11.s64 = 2;
loc_826A8C14:
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r25.u32);
loc_826A8C1C:
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8C2C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8c40
	if (ctx.cr6.eq) goto loc_826A8C40;
	// addi r11,r28,1
	ctx.r11.s64 = ctx.r28.s64 + 1;
	// stw r25,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r25.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A8C40:
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r20,r20,24
	ctx.r20.s64 = ctx.r20.s64 + 24;
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r27,r27,96
	ctx.r27.s64 = ctx.r27.s64 + 96;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// blt cr6,0x826a87a8
	if (ctx.cr6.lt) goto loc_826A87A8;
	// lwz r30,88(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_826A8C64:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x821be610
	ctx.lr = 0x826A8C6C;
	sub_821BE610(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826A8C74;
	sub_826A7A28(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// lwz r11,18508(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// lwz r31,508(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x821f9fb8
	ctx.lr = 0x826A8C94;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8cc4
	if (ctx.cr6.eq) goto loc_826A8CC4;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a8cc4
	if (ctx.cr6.eq) goto loc_826A8CC4;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8cc4
	if (ctx.cr6.eq) goto loc_826A8CC4;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r11,-14556
	ctx.r4.s64 = ctx.r11.s64 + -14556;
	// bl 0x825ee0e0
	ctx.lr = 0x826A8CC4;
	sub_825EE0E0(ctx, base);
loc_826A8CC4:
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A8CCC"))) PPC_WEAK_FUNC(sub_826A8CCC);
PPC_FUNC_IMPL(__imp__sub_826A8CCC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A8CD0"))) PPC_WEAK_FUNC(sub_826A8CD0);
PPC_FUNC_IMPL(__imp__sub_826A8CD0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// bl 0x826a7a28
	ctx.lr = 0x826A8CE4;
	sub_826A7A28(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// lwz r11,18508(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// lwz r31,508(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x821f9fb8
	ctx.lr = 0x826A8D04;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8d34
	if (ctx.cr6.eq) goto loc_826A8D34;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a8d34
	if (ctx.cr6.eq) goto loc_826A8D34;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8d34
	if (ctx.cr6.eq) goto loc_826A8D34;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r11,-14556
	ctx.r4.s64 = ctx.r11.s64 + -14556;
	// bl 0x825ee0e0
	ctx.lr = 0x826A8D34;
	sub_825EE0E0(ctx, base);
loc_826A8D34:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826A8D48"))) PPC_WEAK_FUNC(sub_826A8D48);
PPC_FUNC_IMPL(__imp__sub_826A8D48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c0
	ctx.lr = 0x826A8D50;
	__savegprlr_14(ctx, base);
	// stwu r1,-976(r1)
	ea = -976 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r26,-32121
	ctx.r26.s64 = -2105081856;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r26,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r26.u32);
	// mr r14,r3
	ctx.r14.u64 = ctx.r3.u64;
	// stw r27,1004(r1)
	PPC_STORE_U32(ctx.r1.u32 + 1004, ctx.r27.u32);
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A8D74;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addis r7,r14,1
	ctx.r7.s64 = ctx.r14.s64 + 65536;
	// addi r5,r10,-26992
	ctx.r5.s64 = ctx.r10.s64 + -26992;
	// addi r7,r7,-26176
	ctx.r7.s64 = ctx.r7.s64 + -26176;
	// li r4,128
	ctx.r4.s64 = 128;
	// lwz r11,132(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// addi r3,r1,144
	ctx.r3.s64 = ctx.r1.s64 + 144;
	// addi r6,r11,8109
	ctx.r6.s64 = ctx.r11.s64 + 8109;
	// bl 0x82137a08
	ctx.lr = 0x826A8D9C;
	sub_82137A08(ctx, base);
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A8DA4;
	sub_8268DAF8(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// addi r30,r11,-21664
	ctx.r30.s64 = ctx.r11.s64 + -21664;
	// stw r29,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r29.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r30.u32);
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A8DC4;
	sub_821F9FB8(ctx, base);
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// lis r9,0
	ctx.r9.s64 = 0;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// ori r31,r9,39440
	ctx.r31.u64 = ctx.r9.u64 | 39440;
	// addi r28,r11,-5480
	ctx.r28.s64 = ctx.r11.s64 + -5480;
	// beq cr6,0x826a8ea8
	if (ctx.cr6.eq) goto loc_826A8EA8;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A8DE8;
	sub_821F9FB8(ctx, base);
	// lwz r30,56(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r11,r28
	ctx.r11.u64 = ctx.r28.u64;
	// add r10,r14,r31
	ctx.r10.u64 = ctx.r14.u64 + ctx.r31.u64;
loc_826A8DF4:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a8e18
	if (ctx.cr6.eq) goto loc_826A8E18;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a8df4
	if (ctx.cr6.eq) goto loc_826A8DF4;
loc_826A8E18:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826a8e68
	if (!ctx.cr6.eq) goto loc_826A8E68;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x826b34f8
	ctx.lr = 0x826A8E30;
	sub_826B34F8(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r5,49
	ctx.r5.s64 = 49;
	// addi r4,r11,-13268
	ctx.r4.s64 = ctx.r11.s64 + -13268;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A8E44;
	sub_825EE0E0(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-26608
	ctx.r4.s64 = ctx.r10.s64 + -26608;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8E58;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8ea8
	if (ctx.cr6.eq) goto loc_826A8EA8;
	// li r11,49
	ctx.r11.s64 = 49;
	// b 0x826a8e9c
	goto loc_826A8E9C;
loc_826A8E68:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r5,6
	ctx.r5.s64 = 6;
	// addi r4,r11,-13268
	ctx.r4.s64 = ctx.r11.s64 + -13268;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826A8E7C;
	sub_825EE0E0(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-26608
	ctx.r4.s64 = ctx.r10.s64 + -26608;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A8E90;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a8ea8
	if (ctx.cr6.eq) goto loc_826A8EA8;
	// li r11,6
	ctx.r11.s64 = 6;
loc_826A8E9C:
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A8EA8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// add r30,r14,r31
	ctx.r30.u64 = ctx.r14.u64 + ctx.r31.u64;
	// addi r10,r11,-24328
	ctx.r10.s64 = ctx.r11.s64 + -24328;
	// mr r11,r30
	ctx.r11.u64 = ctx.r30.u64;
loc_826A8EB8:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a8edc
	if (ctx.cr6.eq) goto loc_826A8EDC;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a8eb8
	if (ctx.cr6.eq) goto loc_826A8EB8;
loc_826A8EDC:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a92d4
	if (ctx.cr6.eq) goto loc_826A92D4;
	// lis r11,-32131
	ctx.r11.s64 = -2105737216;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r31,r11,30576
	ctx.r31.s64 = ctx.r11.s64 + 30576;
	// addi r4,r10,-27620
	ctx.r4.s64 = ctx.r10.s64 + -27620;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821ca540
	ctx.lr = 0x826A8EFC;
	sub_821CA540(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r5,r9,-25252
	ctx.r5.s64 = ctx.r9.s64 + -25252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,144
	ctx.r4.s64 = ctx.r1.s64 + 144;
	// bl 0x821ca6a8
	ctx.lr = 0x826A8F18;
	sub_821CA6A8(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r27,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r27.u32);
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x826a8f38
	if (!ctx.cr6.eq) goto loc_826A8F38;
	// bl 0x821c9a90
	ctx.lr = 0x826A8F30;
	sub_821C9A90(ctx, base);
	// addi r1,r1,976
	ctx.r1.s64 = ctx.r1.s64 + 976;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A8F38:
	// bl 0x821c9a90
	ctx.lr = 0x826A8F3C;
	sub_821C9A90(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r15,0
	ctx.r15.s64 = 0;
	// addi r10,r11,-29924
	ctx.r10.s64 = ctx.r11.s64 + -29924;
	// stw r15,816(r1)
	PPC_STORE_U32(ctx.r1.u32 + 816, ctx.r15.u32);
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// stw r10,272(r1)
	PPC_STORE_U32(ctx.r1.u32 + 272, ctx.r10.u32);
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// lwz r4,4416(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4416);
	// bl 0x821cf7b8
	ctx.lr = 0x826A8F64;
	sub_821CF7B8(ctx, base);
	// addi r29,r14,28
	ctx.r29.s64 = ctx.r14.s64 + 28;
loc_826A8F68:
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x821cfaa8
	ctx.lr = 0x826A8F78;
	sub_821CFAA8(ctx, base);
	// mr r10,r30
	ctx.r10.u64 = ctx.r30.u64;
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_826A8F80:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a8fa4
	if (ctx.cr6.eq) goto loc_826A8FA4;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a8f80
	if (ctx.cr6.eq) goto loc_826A8F80;
loc_826A8FA4:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826a8f68
	if (!ctx.cr6.eq) goto loc_826A8F68;
	// mr r11,r28
	ctx.r11.u64 = ctx.r28.u64;
	// mr r31,r15
	ctx.r31.u64 = ctx.r15.u64;
	// mr r10,r30
	ctx.r10.u64 = ctx.r30.u64;
loc_826A8FB8:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826a8fdc
	if (ctx.cr6.eq) goto loc_826A8FDC;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a8fb8
	if (ctx.cr6.eq) goto loc_826A8FB8;
loc_826A8FDC:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826a9008
	if (ctx.cr6.eq) goto loc_826A9008;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A8FF0;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r10,132(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// lbz r9,2203(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 2203);
	// cmplwi cr6,r9,1
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 1, ctx.xer);
	// bne cr6,0x826a9008
	if (!ctx.cr6.eq) goto loc_826A9008;
	// li r31,1
	ctx.r31.s64 = 1;
loc_826A9008:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x821d0490
	ctx.lr = 0x826A9014;
	sub_821D0490(ctx, base);
	// mr r23,r15
	ctx.r23.u64 = ctx.r15.u64;
	// stw r3,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r3.u32);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// ble cr6,0x826a92c4
	if (!ctx.cr6.gt) goto loc_826A92C4;
	// clrlwi r11,r31,24
	ctx.r11.u64 = ctx.r31.u32 & 0xFF;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lis r8,-32253
	ctx.r8.s64 = -2113732608;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// mr r20,r29
	ctx.r20.u64 = ctx.r29.u64;
	// li r16,5
	ctx.r16.s64 = 5;
	// li r21,7
	ctx.r21.s64 = 7;
	// lis r18,-32121
	ctx.r18.s64 = -2105081856;
	// li r24,50
	ctx.r24.s64 = 50;
	// lis r22,-32115
	ctx.r22.s64 = -2104688640;
	// addi r26,r11,18884
	ctx.r26.s64 = ctx.r11.s64 + 18884;
	// addi r25,r10,-13284
	ctx.r25.s64 = ctx.r10.s64 + -13284;
	// addi r28,r9,-12116
	ctx.r28.s64 = ctx.r9.s64 + -12116;
	// addi r27,r8,2612
	ctx.r27.s64 = ctx.r8.s64 + 2612;
	// addi r17,r7,-27236
	ctx.r17.s64 = ctx.r7.s64 + -27236;
	// addi r19,r6,-27248
	ctx.r19.s64 = ctx.r6.s64 + -27248;
loc_826A9074:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x821d0490
	ctx.lr = 0x826A9080;
	sub_821D0490(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// addi r3,r1,272
	ctx.r3.s64 = ctx.r1.s64 + 272;
	// bl 0x821cfaa8
	ctx.lr = 0x826A9094;
	sub_821CFAA8(ctx, base);
	// lwz r3,1004(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 1004);
	// bl 0x8268db80
	ctx.lr = 0x826A909C;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A90B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A90C4;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a90d4
	if (ctx.cr6.eq) goto loc_826A90D4;
	// stw r20,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r20.u32);
	// stw r16,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r16.u32);
loc_826A90D4:
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A90E4;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a90f8
	if (ctx.cr6.eq) goto loc_826A90F8;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r29,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r29.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826A90F8:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x8269a400
	ctx.lr = 0x826A9104;
	sub_8269A400(ctx, base);
	// lwz r11,96(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A9118;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r11,132(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// addi r3,r11,8109
	ctx.r3.s64 = ctx.r11.s64 + 8109;
	// bl 0x82396408
	ctx.lr = 0x826A9128;
	sub_82396408(ctx, base);
	// lwz r11,-12120(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + -12120);
	// mulli r10,r3,104
	ctx.r10.s64 = ctx.r3.s64 * 104;
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + ctx.r11.u64;
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// lwz r10,24(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + 24);
	// blt cr6,0x826a924c
	if (ctx.cr6.lt) goto loc_826A924C;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x8269bbd8
	ctx.lr = 0x826A914C;
	sub_8269BBD8(ctx, base);
	// lwz r11,-10020(r18)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r18.u32 + -10020);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r10
	ctx.r4.u64 = ctx.r10.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x826bce20
	ctx.lr = 0x826A9160;
	sub_826BCE20(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a924c
	if (ctx.cr6.eq) goto loc_826A924C;
	// stw r15,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r15.u32);
	// stw r21,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r21.u32);
	// lwz r11,104(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	// lwz r4,92(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A9184;
	sub_821F9FB8(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r31,56(r10)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r10.u32 + 56);
	// bl 0x821c9790
	ctx.lr = 0x826A9198;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// bl 0x825ed480
	ctx.lr = 0x826A91A8;
	sub_825ED480(ctx, base);
	// stw r28,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r28.u32);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// bl 0x821c9790
	ctx.lr = 0x826A91C0;
	sub_821C9790(ctx, base);
	// li r31,1
	ctx.r31.s64 = 1;
	// stw r3,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r3.u32);
	// stw r31,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r31.u32);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x825ef9f0
	ctx.lr = 0x826A91D4;
	sub_825EF9F0(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r5,r1,128
	ctx.r5.s64 = ctx.r1.s64 + 128;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// lwz r8,36(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 36);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826A91EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x825ef9f0
	ctx.lr = 0x826A91F4;
	sub_825EF9F0(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// lwz r6,80(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 80);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826A9208;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// stw r24,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r24.u32);
	// bl 0x825ef9f0
	ctx.lr = 0x826A9210;
	sub_825EF9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// lwz r10,44(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 44);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A9228;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9238;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9270
	if (ctx.cr6.eq) goto loc_826A9270;
	// stw r24,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r24.u32);
	// stw r31,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r31.u32);
	// b 0x826a9270
	goto loc_826A9270;
loc_826A924C:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A925C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9270
	if (ctx.cr6.eq) goto loc_826A9270;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r15,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r15.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826A9270:
	// lwz r11,100(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a92a0
	if (ctx.cr6.eq) goto loc_826A92A0;
	// cmpwi cr6,r29,18
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 18, ctx.xer);
	// beq cr6,0x826a92a0
	if (ctx.cr6.eq) goto loc_826A92A0;
	// cmpwi cr6,r29,48
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 48, ctx.xer);
	// beq cr6,0x826a92a0
	if (ctx.cr6.eq) goto loc_826A92A0;
	// cmpwi cr6,r29,34
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 34, ctx.xer);
	// beq cr6,0x826a92a0
	if (ctx.cr6.eq) goto loc_826A92A0;
	// lwz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 16);
	// ori r10,r11,512
	ctx.r10.u64 = ctx.r11.u64 | 512;
	// b 0x826a92a8
	goto loc_826A92A8;
loc_826A92A0:
	// lwz r11,16(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 16);
	// rlwinm r10,r11,0,23,21
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFDFF;
loc_826A92A8:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// addi r23,r23,1
	ctx.r23.s64 = ctx.r23.s64 + 1;
	// stw r10,16(r30)
	PPC_STORE_U32(ctx.r30.u32 + 16, ctx.r10.u32);
	// addi r20,r20,168
	ctx.r20.s64 = ctx.r20.s64 + 168;
	// cmpw cr6,r23,r11
	ctx.cr6.compare<int32_t>(ctx.r23.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x826a9074
	if (ctx.cr6.lt) goto loc_826A9074;
	// lwz r27,88(r1)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_826A92C4:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x821be610
	ctx.lr = 0x826A92CC;
	sub_821BE610(ctx, base);
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826A92D4;
	sub_826A7A28(ctx, base);
loc_826A92D4:
	// addi r1,r1,976
	ctx.r1.s64 = ctx.r1.s64 + 976;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A92DC"))) PPC_WEAK_FUNC(sub_826A92DC);
PPC_FUNC_IMPL(__imp__sub_826A92DC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A92E0"))) PPC_WEAK_FUNC(sub_826A92E0);
PPC_FUNC_IMPL(__imp__sub_826A92E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c0
	ctx.lr = 0x826A92E8;
	__savegprlr_14(ctx, base);
	// stwu r1,-944(r1)
	ea = -944 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r10,328(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A9308;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x826a931c
	if (!ctx.cr6.eq) goto loc_826A931C;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A931C:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8269f808
	ctx.lr = 0x826A9328;
	sub_8269F808(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A9338;
	sub_822A3998(ctx, base);
	// addis r14,r24,1
	ctx.r14.s64 = ctx.r24.s64 + 65536;
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// addi r14,r14,-26012
	ctx.r14.s64 = ctx.r14.s64 + -26012;
	// stw r14,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r14.u32);
	// lwz r11,132(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// lwz r10,0(r14)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r14.u32 + 0);
	// addi r28,r11,8109
	ctx.r28.s64 = ctx.r11.s64 + 8109;
	// addi r31,r11,64
	ctx.r31.s64 = ctx.r11.s64 + 64;
	// cmpwi cr6,r10,48
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 48, ctx.xer);
	// bne cr6,0x826a9384
	if (!ctx.cr6.eq) goto loc_826A9384;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x826b48f0
	ctx.lr = 0x826A9368;
	sub_826B48F0(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x82699520
	ctx.lr = 0x826A9370;
	sub_82699520(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26948
	ctx.r3.s64 = ctx.r11.s64 + -26948;
	// bl 0x821fa230
	ctx.lr = 0x826A937C;
	sub_821FA230(ctx, base);
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A9384:
	// lbz r11,2139(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 2139);
	// cmplwi cr6,r11,1
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 1, ctx.xer);
	// bne cr6,0x826a93d4
	if (!ctx.cr6.eq) goto loc_826A93D4;
	// cmpwi cr6,r10,18
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 18, ctx.xer);
	// beq cr6,0x826a93d4
	if (ctx.cr6.eq) goto loc_826A93D4;
	// cmpwi cr6,r10,28
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 28, ctx.xer);
	// beq cr6,0x826a93d4
	if (ctx.cr6.eq) goto loc_826A93D4;
	// cmpwi cr6,r10,25
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 25, ctx.xer);
	// beq cr6,0x826a93d4
	if (ctx.cr6.eq) goto loc_826A93D4;
	// cmpwi cr6,r10,29
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 29, ctx.xer);
	// beq cr6,0x826a93d4
	if (ctx.cr6.eq) goto loc_826A93D4;
	// cmpwi cr6,r10,24
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 24, ctx.xer);
	// beq cr6,0x826a93d4
	if (ctx.cr6.eq) goto loc_826A93D4;
	// cmpwi cr6,r10,34
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 34, ctx.xer);
	// beq cr6,0x826a93d4
	if (ctx.cr6.eq) goto loc_826A93D4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24228
	ctx.r3.s64 = ctx.r11.s64 + -24228;
	// bl 0x821fa230
	ctx.lr = 0x826A93CC;
	sub_821FA230(ctx, base);
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A93D4:
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x826b48f0
	ctx.lr = 0x826A93DC;
	sub_826B48F0(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24240
	ctx.r3.s64 = ctx.r11.s64 + -24240;
	// bl 0x821fa230
	ctx.lr = 0x826A93E8;
	sub_821FA230(ctx, base);
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// li r21,0
	ctx.r21.s64 = 0;
	// lwz r4,0(r14)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r14.u32 + 0);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// stw r22,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r22.u32);
	// stw r21,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r21.u32);
	// bl 0x8269a400
	ctx.lr = 0x826A9404;
	sub_8269A400(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82396408
	ctx.lr = 0x826A9410;
	sub_82396408(ctx, base);
	// lis r9,-32115
	ctx.r9.s64 = -2104688640;
	// mulli r10,r3,104
	ctx.r10.s64 = ctx.r3.s64 * 104;
	// lwz r11,-12120(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -12120);
	// add r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lis r25,-32121
	ctx.r25.s64 = -2105081856;
	// cmpwi cr6,r29,0
	ctx.cr6.compare<int32_t>(ctx.r29.s32, 0, ctx.xer);
	// lwz r26,24(r8)
	ctx.r26.u64 = PPC_LOAD_U32(ctx.r8.u32 + 24);
	// blt cr6,0x826a9454
	if (ctx.cr6.lt) goto loc_826A9454;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8269bbd8
	ctx.lr = 0x826A943C;
	sub_8269BBD8(ctx, base);
	// lwz r11,-10020(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10020);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// bl 0x826bceb8
	ctx.lr = 0x826A9454;
	sub_826BCEB8(ctx, base);
loc_826A9454:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82391f48
	ctx.lr = 0x826A9460;
	sub_82391F48(ctx, base);
	// mr r15,r3
	ctx.r15.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8269be00
	ctx.lr = 0x826A9474;
	sub_8269BE00(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// addi r31,r11,-21664
	ctx.r31.s64 = ctx.r11.s64 + -21664;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A948C;
	sub_821F9FB8(ctx, base);
	// li r16,1
	ctx.r16.s64 = 1;
	// li r27,5
	ctx.r27.s64 = 5;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9518
	if (ctx.cr6.eq) goto loc_826A9518;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-10236(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826A94A8;
	sub_821F9FB8(ctx, base);
	// lwz r11,21676(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 21676);
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmpwi cr6,r11,7
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 7, ctx.xer);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r31,r11,-26608
	ctx.r31.s64 = ctx.r11.s64 + -26608;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bne cr6,0x826a94f0
	if (!ctx.cr6.eq) goto loc_826A94F0;
	// li r5,48
	ctx.r5.s64 = 48;
	// bl 0x825ee0e0
	ctx.lr = 0x826A94CC;
	sub_825EE0E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A94DC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9518
	if (ctx.cr6.eq) goto loc_826A9518;
	// li r11,48
	ctx.r11.s64 = 48;
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// b 0x826a9514
	goto loc_826A9514;
loc_826A94F0:
	// li r5,5
	ctx.r5.s64 = 5;
	// bl 0x825ee0e0
	ctx.lr = 0x826A94F8;
	sub_825EE0E0(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9508;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9518
	if (ctx.cr6.eq) goto loc_826A9518;
	// stw r27,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r27.u32);
loc_826A9514:
	// stw r16,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r16.u32);
loc_826A9518:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r6,r28
	ctx.r6.u64 = ctx.r28.u64;
	// addi r5,r11,-24252
	ctx.r5.s64 = ctx.r11.s64 + -24252;
	// li r4,128
	ctx.r4.s64 = 128;
	// addi r3,r1,656
	ctx.r3.s64 = ctx.r1.s64 + 656;
	// bl 0x82137a08
	ctx.lr = 0x826A9530;
	sub_82137A08(ctx, base);
	// lis r11,-32131
	ctx.r11.s64 = -2105737216;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r31,r11,30576
	ctx.r31.s64 = ctx.r11.s64 + 30576;
	// addi r4,r10,-27620
	ctx.r4.s64 = ctx.r10.s64 + -27620;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x821ca540
	ctx.lr = 0x826A9548;
	sub_821CA540(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r5,r9,-25252
	ctx.r5.s64 = ctx.r9.s64 + -25252;
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,0
	ctx.r6.s64 = 0;
	// addi r4,r1,656
	ctx.r4.s64 = ctx.r1.s64 + 656;
	// bl 0x821ca6a8
	ctx.lr = 0x826A9564;
	sub_821CA6A8(ctx, base);
	// mr r23,r3
	ctx.r23.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r23,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r23.u32);
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// bne cr6,0x826a9588
	if (!ctx.cr6.eq) goto loc_826A9588;
	// bl 0x821c9a90
	ctx.lr = 0x826A957C;
	sub_821C9A90(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
loc_826A9588:
	// bl 0x821c9a90
	ctx.lr = 0x826A958C;
	sub_821C9A90(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// stw r21,640(r1)
	PPC_STORE_U32(ctx.r1.u32 + 640, ctx.r21.u32);
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// addi r9,r11,-29924
	ctx.r9.s64 = ctx.r11.s64 + -29924;
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// stw r9,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r9.u32);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r4,4416(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4416);
	// bl 0x821cf7b8
	ctx.lr = 0x826A95B0;
	sub_821CF7B8(ctx, base);
	// addis r30,r24,1
	ctx.r30.s64 = ctx.r24.s64 + 65536;
	// addi r31,r24,21148
	ctx.r31.s64 = ctx.r24.s64 + 21148;
	// addi r30,r30,-26008
	ctx.r30.s64 = ctx.r30.s64 + -26008;
loc_826A95BC:
	// li r7,1
	ctx.r7.s64 = 1;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x821cffe8
	ctx.lr = 0x826A95D4;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a95bc
	if (ctx.cr6.eq) goto loc_826A95BC;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x823d90b0
	ctx.lr = 0x826A95E8;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a95bc
	if (ctx.cr6.eq) goto loc_826A95BC;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8268daf8
	ctx.lr = 0x826A95F8;
	sub_8268DAF8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-24260
	ctx.r4.s64 = ctx.r11.s64 + -24260;
	// mr r3,r22
	ctx.r3.u64 = ctx.r22.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A960C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a961c
	if (ctx.cr6.eq) goto loc_826A961C;
	// stw r30,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r30.u32);
	// stw r27,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r27.u32);
loc_826A961C:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x821d0490
	ctx.lr = 0x826A9628;
	sub_821D0490(ctx, base);
	// lbz r11,21670(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + 21670);
	// mr r18,r3
	ctx.r18.u64 = ctx.r3.u64;
	// mr r31,r16
	ctx.r31.u64 = ctx.r16.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a9674
	if (!ctx.cr6.eq) goto loc_826A9674;
	// lwz r11,0(r14)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r14.u32 + 0);
	// cmpwi cr6,r11,16
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 16, ctx.xer);
	// beq cr6,0x826a9674
	if (ctx.cr6.eq) goto loc_826A9674;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x8269bbd8
	ctx.lr = 0x826A9654;
	sub_8269BBD8(ctx, base);
	// lwz r11,-10020(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10020);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x826bcdd8
	ctx.lr = 0x826A9668;
	sub_826BCDD8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9678
	if (ctx.cr6.eq) goto loc_826A9678;
loc_826A9674:
	// mr r31,r21
	ctx.r31.u64 = ctx.r21.u64;
loc_826A9678:
	// mr r28,r21
	ctx.r28.u64 = ctx.r21.u64;
	// cmpwi cr6,r18,0
	ctx.cr6.compare<int32_t>(ctx.r18.s32, 0, ctx.xer);
	// ble cr6,0x826a98c0
	if (!ctx.cr6.gt) goto loc_826A98C0;
	// lis r6,3
	ctx.r6.s64 = 196608;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// clrlwi r17,r31,24
	ctx.r17.u64 = ctx.r31.u32 & 0xFF;
	// addi r26,r24,20268
	ctx.r26.s64 = ctx.r24.s64 + 20268;
	// addi r30,r24,188
	ctx.r30.s64 = ctx.r24.s64 + 188;
	// ori r27,r6,50032
	ctx.r27.u64 = ctx.r6.u64 | 50032;
	// lis r23,-32111
	ctx.r23.s64 = -2104426496;
	// addi r22,r11,2652
	ctx.r22.s64 = ctx.r11.s64 + 2652;
	// addi r21,r10,2824
	ctx.r21.s64 = ctx.r10.s64 + 2824;
	// addi r20,r9,-2176
	ctx.r20.s64 = ctx.r9.s64 + -2176;
	// addi r19,r8,-19624
	ctx.r19.s64 = ctx.r8.s64 + -19624;
	// addi r25,r7,-24320
	ctx.r25.s64 = ctx.r7.s64 + -24320;
	// b 0x826a96cc
	goto loc_826A96CC;
loc_826A96C8:
	// lwz r14,92(r1)
	ctx.r14.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
loc_826A96CC:
	// addi r29,r30,-160
	ctx.r29.s64 = ctx.r30.s64 + -160;
loc_826A96D0:
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,10
	ctx.r6.s64 = 10;
	// li r5,80
	ctx.r5.s64 = 80;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x821cffe8
	ctx.lr = 0x826A96E8;
	sub_821CFFE8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826a96d0
	if (ctx.cr6.eq) goto loc_826A96D0;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x821d0490
	ctx.lr = 0x826A96FC;
	sub_821D0490(ctx, base);
	// stw r3,0(r26)
	PPC_STORE_U32(ctx.r26.u32 + 0, ctx.r3.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x821d0490
	ctx.lr = 0x826A970C;
	sub_821D0490(ctx, base);
	// stw r3,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r3.u32);
	// lbz r11,-29346(r23)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r23.u32 + -29346);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9724
	if (ctx.cr6.eq) goto loc_826A9724;
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
loc_826A9724:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x821d0490
	ctx.lr = 0x826A9730;
	sub_821D0490(ctx, base);
	// stw r3,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r3.u32);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r4,0(r14)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r14.u32 + 0);
	// bl 0x8269ba28
	ctx.lr = 0x826A9740;
	sub_8269BA28(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r11,17268(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x822a3998
	ctx.lr = 0x826A9758;
	sub_822A3998(ctx, base);
	// lwz r3,52(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x8238f1e8
	ctx.lr = 0x826A9760;
	sub_8238F1E8(ctx, base);
	// mr r14,r3
	ctx.r14.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826A9768;
	sub_82387B90(ctx, base);
	// mulli r11,r14,84
	ctx.r11.s64 = ctx.r14.s64 * 84;
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// add r3,r11,r27
	ctx.r3.u64 = ctx.r11.u64 + ctx.r27.u64;
	// bl 0x823901c0
	ctx.lr = 0x826A9780;
	sub_823901C0(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826a9794
	if (!ctx.cr6.eq) goto loc_826A9794;
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// bne cr6,0x826a979c
	if (!ctx.cr6.eq) goto loc_826A979C;
loc_826A9794:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r11.u32);
loc_826A979C:
	// lwz r3,84(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x8268db80
	ctx.lr = 0x826A97A4;
	sub_8268DB80(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A97BC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmpwi cr6,r28,0
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 0, ctx.xer);
	// beq cr6,0x826a97d0
	if (ctx.cr6.eq) goto loc_826A97D0;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpw cr6,r11,r15
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r15.s32, ctx.xer);
	// bne cr6,0x826a97e4
	if (!ctx.cr6.eq) goto loc_826A97E4;
loc_826A97D0:
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r4,r15
	ctx.r4.u64 = ctx.r15.u64;
	// bl 0x82130000
	ctx.lr = 0x826A97E0;
	sub_82130000(ctx, base);
	// stw r31,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r31.u32);
loc_826A97E4:
	// mr r4,r19
	ctx.r4.u64 = ctx.r19.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A97F4;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9808
	if (ctx.cr6.eq) goto loc_826A9808;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// stw r16,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r16.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A9808:
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9818;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9828
	if (ctx.cr6.eq) goto loc_826A9828;
	// stw r28,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r28.u32);
	// stw r16,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r16.u32);
loc_826A9828:
	// mr r4,r21
	ctx.r4.u64 = ctx.r21.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9838;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a984c
	if (ctx.cr6.eq) goto loc_826A984C;
	// lwz r11,0(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	// stw r16,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r16.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A984C:
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A985C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9870
	if (ctx.cr6.eq) goto loc_826A9870;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// stw r16,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r16.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826A9870:
	// lwz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 16);
	// cmplwi cr6,r17,0
	ctx.cr6.compare<uint32_t>(ctx.r17.u32, 0, ctx.xer);
	// beq cr6,0x826a98a0
	if (ctx.cr6.eq) goto loc_826A98A0;
	// cmpwi cr6,r18,3
	ctx.cr6.compare<int32_t>(ctx.r18.s32, 3, ctx.xer);
	// ble cr6,0x826a9894
	if (!ctx.cr6.gt) goto loc_826A9894;
	// cmpwi cr6,r28,3
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 3, ctx.xer);
	// blt cr6,0x826a98a0
	if (ctx.cr6.lt) goto loc_826A98A0;
	// ori r10,r11,16
	ctx.r10.u64 = ctx.r11.u64 | 16;
	// b 0x826a98a4
	goto loc_826A98A4;
loc_826A9894:
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// ori r10,r11,16
	ctx.r10.u64 = ctx.r11.u64 | 16;
	// bge cr6,0x826a98a4
	if (!ctx.cr6.lt) goto loc_826A98A4;
loc_826A98A0:
	// rlwinm r10,r11,0,28,26
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
loc_826A98A4:
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// stw r10,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r10.u32);
	// addi r26,r26,96
	ctx.r26.s64 = ctx.r26.s64 + 96;
	// addi r30,r30,168
	ctx.r30.s64 = ctx.r30.s64 + 168;
	// cmpw cr6,r28,r18
	ctx.cr6.compare<int32_t>(ctx.r28.s32, ctx.r18.s32, ctx.xer);
	// blt cr6,0x826a96c8
	if (ctx.cr6.lt) goto loc_826A96C8;
	// lwz r23,88(r1)
	ctx.r23.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
loc_826A98C0:
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// bl 0x821be610
	ctx.lr = 0x826A98C8;
	sub_821BE610(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826A98D0;
	sub_826A7A28(ctx, base);
	// lwz r3,80(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// addi r1,r1,944
	ctx.r1.s64 = ctx.r1.s64 + 944;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A98DC"))) PPC_WEAK_FUNC(sub_826A98DC);
PPC_FUNC_IMPL(__imp__sub_826A98DC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A98E0"))) PPC_WEAK_FUNC(sub_826A98E0);
PPC_FUNC_IMPL(__imp__sub_826A98E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826A98E8;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A9908;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826A9910;
	sub_82387B90(ctx, base);
	// mulli r11,r26,8176
	ctx.r11.s64 = ctx.r26.s64 * 8176;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238f1e8
	ctx.lr = 0x826A9920;
	sub_8238F1E8(ctx, base);
	// lis r9,-32115
	ctx.r9.s64 = -2104688640;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mulli r10,r31,104
	ctx.r10.s64 = ctx.r31.s64 * 104;
	// lwz r11,-12120(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -12120);
	// add r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r29,44(r8)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r8.u32 + 44);
	// bl 0x82387b90
	ctx.lr = 0x826A993C;
	sub_82387B90(ctx, base);
	// lis r7,-32111
	ctx.r7.s64 = -2104426496;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lbz r6,-29346(r7)
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r7.u32 + -29346);
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// bne cr6,0x826a99b4
	if (!ctx.cr6.eq) goto loc_826A99B4;
	// mulli r11,r31,84
	ctx.r11.s64 = ctx.r31.s64 * 84;
	// lwz r3,18508(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// lis r9,3
	ctx.r9.s64 = 196608;
	// add r8,r11,r10
	ctx.r8.u64 = ctx.r11.u64 + ctx.r10.u64;
	// ori r7,r9,50114
	ctx.r7.u64 = ctx.r9.u64 | 50114;
	// lis r6,-32255
	ctx.r6.s64 = -2113863680;
	// lhzx r11,r8,r7
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r7.u32);
	// lfs f0,-32032(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -32032);
	ctx.f0.f64 = double(temp.f32);
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// addi r5,r11,-1
	ctx.r5.s64 = ctx.r11.s64 + -1;
	// extsw r4,r5
	ctx.r4.s64 = ctx.r5.s32;
	// std r4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r4.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// frsp f11,f12
	ctx.f11.f64 = double(float(ctx.f12.f64));
	// fmuls f10,f11,f0
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// fctiwz f9,f10
	ctx.f9.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f9.u64);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826b93e0
	ctx.lr = 0x826A99A4;
	sub_826B93E0(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826A99A8;
	sub_82387B90(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8238ac80
	ctx.lr = 0x826A99B4;
	sub_8238AC80(ctx, base);
loc_826A99B4:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826A99BC;
	sub_826A7A28(ctx, base);
	// lwz r11,18508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// lwz r30,508(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x821f9fb8
	ctx.lr = 0x826A99D8;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9a08
	if (ctx.cr6.eq) goto loc_826A9A08;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9a08
	if (ctx.cr6.eq) goto loc_826A9A08;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9a08
	if (ctx.cr6.eq) goto loc_826A9A08;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r11,-14556
	ctx.r4.s64 = ctx.r11.s64 + -14556;
	// bl 0x825ee0e0
	ctx.lr = 0x826A9A08;
	sub_825EE0E0(ctx, base);
loc_826A9A08:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8269a140
	ctx.lr = 0x826A9A14;
	sub_8269A140(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9a38
	if (ctx.cr6.eq) goto loc_826A9A38;
	// bl 0x82387b90
	ctx.lr = 0x826A9A24;
	sub_82387B90(ctx, base);
	// mulli r11,r31,84
	ctx.r11.s64 = ctx.r31.s64 * 84;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addis r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 262144;
	// addi r3,r3,-15504
	ctx.r3.s64 = ctx.r3.s64 + -15504;
	// bl 0x8238f730
	ctx.lr = 0x826A9A38;
	sub_8238F730(ctx, base);
loc_826A9A38:
	// bl 0x82387b90
	ctx.lr = 0x826A9A3C;
	sub_82387B90(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// bl 0x8238abb8
	ctx.lr = 0x826A9A44;
	sub_8238ABB8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9a68
	if (ctx.cr6.eq) goto loc_826A9A68;
	// bl 0x82387b90
	ctx.lr = 0x826A9A54;
	sub_82387B90(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r4,1344(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1344);
	// bl 0x8269dfe0
	ctx.lr = 0x826A9A64;
	sub_8269DFE0(ctx, base);
	// b 0x826a9a70
	goto loc_826A9A70;
loc_826A9A68:
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x82216138
	ctx.lr = 0x826A9A70;
	sub_82216138(ctx, base);
loc_826A9A70:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x826a7170
	ctx.lr = 0x826A9A80;
	sub_826A7170(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A9A88"))) PPC_WEAK_FUNC(sub_826A9A88);
PPC_FUNC_IMPL(__imp__sub_826A9A88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91ec
	ctx.lr = 0x826A9A90;
	__savegprlr_25(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// mr r25,r4
	ctx.r25.u64 = ctx.r4.u64;
	// bl 0x82387b90
	ctx.lr = 0x826A9AA0;
	sub_82387B90(ctx, base);
	// lwz r11,1340(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1340);
	// cmpwi cr6,r11,30
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 30, ctx.xer);
	// bge cr6,0x826a9c58
	if (!ctx.cr6.lt) goto loc_826A9C58;
	// bl 0x82387b90
	ctx.lr = 0x826A9AB0;
	sub_82387B90(ctx, base);
	// lwz r29,1344(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// bl 0x82387b90
	ctx.lr = 0x826A9AB8;
	sub_82387B90(ctx, base);
	// mulli r11,r29,8176
	ctx.r11.s64 = ctx.r29.s64 * 8176;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238f1e8
	ctx.lr = 0x826A9AC8;
	sub_8238F1E8(ctx, base);
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mulli r10,r31,104
	ctx.r10.s64 = ctx.r31.s64 * 104;
	// lwz r11,-12120(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12120);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r30,44(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 44);
	// bl 0x82387b90
	ctx.lr = 0x826A9AE4;
	sub_82387B90(ctx, base);
	// lis r27,-32111
	ctx.r27.s64 = -2104426496;
	// lis r28,-32121
	ctx.r28.s64 = -2105081856;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lbz r9,-29346(r27)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r27.u32 + -29346);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a9b5c
	if (!ctx.cr6.eq) goto loc_826A9B5C;
	// mulli r11,r31,84
	ctx.r11.s64 = ctx.r31.s64 * 84;
	// lwz r3,18508(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 18508);
	// lis r9,3
	ctx.r9.s64 = 196608;
	// add r8,r11,r10
	ctx.r8.u64 = ctx.r11.u64 + ctx.r10.u64;
	// ori r7,r9,50114
	ctx.r7.u64 = ctx.r9.u64 | 50114;
	// lis r6,-32255
	ctx.r6.s64 = -2113863680;
	// lhzx r11,r8,r7
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r8.u32 + ctx.r7.u32);
	// lfs f0,-32032(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -32032);
	ctx.f0.f64 = double(temp.f32);
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// addi r5,r11,-1
	ctx.r5.s64 = ctx.r11.s64 + -1;
	// extsw r4,r5
	ctx.r4.s64 = ctx.r5.s32;
	// std r4,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r4.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// frsp f11,f12
	ctx.f11.f64 = double(float(ctx.f12.f64));
	// fmuls f10,f11,f0
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// fctiwz f9,f10
	ctx.f9.s64 = (ctx.f10.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f10.f64));
	// stfd f9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f9.u64);
	// lwz r4,84(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// bl 0x826b93e0
	ctx.lr = 0x826A9B4C;
	sub_826B93E0(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826A9B50;
	sub_82387B90(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8238ac80
	ctx.lr = 0x826A9B5C;
	sub_8238AC80(ctx, base);
loc_826A9B5C:
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8269a140
	ctx.lr = 0x826A9B68;
	sub_8269A140(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9b8c
	if (ctx.cr6.eq) goto loc_826A9B8C;
	// bl 0x82387b90
	ctx.lr = 0x826A9B78;
	sub_82387B90(ctx, base);
	// mulli r11,r31,84
	ctx.r11.s64 = ctx.r31.s64 * 84;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addis r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 262144;
	// addi r3,r3,-15504
	ctx.r3.s64 = ctx.r3.s64 + -15504;
	// bl 0x8238f730
	ctx.lr = 0x826A9B8C;
	sub_8238F730(ctx, base);
loc_826A9B8C:
	// bl 0x82387b90
	ctx.lr = 0x826A9B90;
	sub_82387B90(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x8238abb8
	ctx.lr = 0x826A9B98;
	sub_8238ABB8(ctx, base);
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// lwz r10,328(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A9BAC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-28272
	ctx.r4.s64 = ctx.r9.s64 + -28272;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9BC0;
	sub_8268DA78(ctx, base);
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x82396fb8
	ctx.lr = 0x826A9BC8;
	sub_82396FB8(ctx, base);
	// lwz r31,100(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// bl 0x82387b90
	ctx.lr = 0x826A9BD0;
	sub_82387B90(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x8238b6e8
	ctx.lr = 0x826A9BD8;
	sub_8238B6E8(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r8,-25448
	ctx.r4.s64 = ctx.r8.s64 + -25448;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9BF0;
	sub_8268DA78(ctx, base);
	// lbz r7,21670(r26)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r26.u32 + 21670);
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// bne cr6,0x826a9c18
	if (!ctx.cr6.eq) goto loc_826A9C18;
	// lbz r11,-29346(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + -29346);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826a9c18
	if (!ctx.cr6.eq) goto loc_826A9C18;
	// lwz r11,18508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 18508);
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// bl 0x826b94a8
	ctx.lr = 0x826A9C18;
	sub_826B94A8(ctx, base);
loc_826A9C18:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826A9C20;
	sub_826A7A28(ctx, base);
	// lwz r11,18508(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 18508);
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r5,r10,-14556
	ctx.r5.s64 = ctx.r10.s64 + -14556;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826A9C40;
	sub_826A6140(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-24212
	ctx.r3.s64 = ctx.r8.s64 + -24212;
	// bl 0x821e6800
	ctx.lr = 0x826A9C4C;
	sub_821E6800(ctx, base);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x8269dfe0
	ctx.lr = 0x826A9C58;
	sub_8269DFE0(ctx, base);
loc_826A9C58:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d923c
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A9C60"))) PPC_WEAK_FUNC(sub_826A9C60);
PPC_FUNC_IMPL(__imp__sub_826A9C60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826A9C68;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x82387b90
	ctx.lr = 0x826A9C78;
	sub_82387B90(ctx, base);
	// lwz r11,1340(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1340);
	// cmpwi cr6,r11,30
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 30, ctx.xer);
	// bge cr6,0x826a9d4c
	if (!ctx.cr6.lt) goto loc_826A9D4C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,328(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A9C98;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-28272
	ctx.r4.s64 = ctx.r9.s64 + -28272;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9CAC;
	sub_8268DA78(ctx, base);
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x82396fb8
	ctx.lr = 0x826A9CB4;
	sub_82396FB8(ctx, base);
	// lwz r29,100(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// bl 0x82387b90
	ctx.lr = 0x826A9CBC;
	sub_82387B90(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x8238b6e8
	ctx.lr = 0x826A9CC4;
	sub_8238B6E8(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r4,r8,-25448
	ctx.r4.s64 = ctx.r8.s64 + -25448;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9CDC;
	sub_8268DA78(ctx, base);
	// lbz r7,21670(r31)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21670);
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// bne cr6,0x826a9d0c
	if (!ctx.cr6.eq) goto loc_826A9D0C;
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// lbz r9,-29346(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + -29346);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826a9d0c
	if (!ctx.cr6.eq) goto loc_826A9D0C;
	// lwz r3,18508(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826b94a8
	ctx.lr = 0x826A9D0C;
	sub_826B94A8(ctx, base);
loc_826A9D0C:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826A9D14;
	sub_826A7A28(ctx, base);
	// lwz r11,18508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r5,r10,-14556
	ctx.r5.s64 = ctx.r10.s64 + -14556;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826A9D34;
	sub_826A6140(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-24212
	ctx.r3.s64 = ctx.r8.s64 + -24212;
	// bl 0x821e6800
	ctx.lr = 0x826A9D40;
	sub_821E6800(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8269dfe0
	ctx.lr = 0x826A9D4C;
	sub_8269DFE0(ctx, base);
loc_826A9D4C:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826A9D54"))) PPC_WEAK_FUNC(sub_826A9D54);
PPC_FUNC_IMPL(__imp__sub_826A9D54) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826A9D58"))) PPC_WEAK_FUNC(sub_826A9D58);
PPC_FUNC_IMPL(__imp__sub_826A9D58) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c0
	ctx.lr = 0x826A9D60;
	__savegprlr_14(ctx, base);
	// stwu r1,-464(r1)
	ea = -464 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// stw r11,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r11.u32);
	// mr r14,r3
	ctx.r14.u64 = ctx.r3.u64;
	// stw r29,492(r1)
	PPC_STORE_U32(ctx.r1.u32 + 492, ctx.r29.u32);
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826A9D84;
	sub_822A3998(ctx, base);
	// lwz r31,52(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// lwz r11,8100(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8100);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826a9dd4
	if (ctx.cr6.eq) goto loc_826A9DD4;
	// bl 0x82387b90
	ctx.lr = 0x826A9D98;
	sub_82387B90(ctx, base);
	// lwz r28,1344(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// bl 0x82387b90
	ctx.lr = 0x826A9DA0;
	sub_82387B90(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mulli r11,r28,8176
	ctx.r11.s64 = ctx.r28.s64 * 8176;
	// add r11,r11,r30
	ctx.r11.u64 = ctx.r11.u64 + ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238ee58
	ctx.lr = 0x826A9DB8;
	sub_8238EE58(ctx, base);
	// lis r11,3
	ctx.r11.s64 = 196608;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// ori r9,r11,57424
	ctx.r9.u64 = ctx.r11.u64 | 57424;
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r3,r10,-24108
	ctx.r3.s64 = ctx.r10.s64 + -24108;
	// stbx r8,r30,r9
	PPC_STORE_U8(ctx.r30.u32 + ctx.r9.u32, ctx.r8.u8);
	// bl 0x82130000
	ctx.lr = 0x826A9DD4;
	sub_82130000(ctx, base);
loc_826A9DD4:
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// ori r9,r11,39228
	ctx.r9.u64 = ctx.r11.u64 | 39228;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stbx r10,r14,r9
	PPC_STORE_U8(ctx.r14.u32 + ctx.r9.u32, ctx.r10.u8);
	// bl 0x8268daf8
	ctx.lr = 0x826A9DEC;
	sub_8268DAF8(ctx, base);
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// li r25,0
	ctx.r25.s64 = 0;
	// addi r24,r11,-12120
	ctx.r24.s64 = ctx.r11.s64 + -12120;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// stw r25,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r25.u32);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
	// addi r7,r11,-21664
	ctx.r7.s64 = ctx.r11.s64 + -21664;
	// stw r8,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r8.u32);
	// lhz r5,4(r24)
	ctx.r5.u64 = PPC_LOAD_U16(ctx.r24.u32 + 4);
	// stw r30,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r30.u32);
	// stw r7,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r7.u32);
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// beq cr6,0x826aa264
	if (ctx.cr6.eq) goto loc_826AA264;
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r4,r4,-28272
	ctx.r4.s64 = ctx.r4.s64 + -28272;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r28,-32244
	ctx.r28.s64 = -2113142784;
	// stw r4,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r4.u32);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// stw r11,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r11.u32);
	// lis r6,-32129
	ctx.r6.s64 = -2105606144;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r4,r7,2824
	ctx.r4.s64 = ctx.r7.s64 + 2824;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// lis r31,-32244
	ctx.r31.s64 = -2113142784;
	// stw r4,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r4.u32);
	// lis r30,-32244
	ctx.r30.s64 = -2113142784;
	// lis r29,-32244
	ctx.r29.s64 = -2113142784;
	// lis r27,-32111
	ctx.r27.s64 = -2104426496;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// stw r27,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r27.u32);
	// addi r28,r28,-25172
	ctx.r28.s64 = ctx.r28.s64 + -25172;
	// addi r5,r5,-25448
	ctx.r5.s64 = ctx.r5.s64 + -25448;
	// addi r6,r6,-25924
	ctx.r6.s64 = ctx.r6.s64 + -25924;
	// stw r28,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r28.u32);
	// addi r8,r8,-19624
	ctx.r8.s64 = ctx.r8.s64 + -19624;
	// stw r5,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r5.u32);
	// addi r7,r9,-27360
	ctx.r7.s64 = ctx.r9.s64 + -27360;
	// stw r6,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r6.u32);
	// li r18,-1
	ctx.r18.s64 = -1;
	// stw r8,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r8.u32);
	// mr r23,r25
	ctx.r23.u64 = ctx.r25.u64;
	// stw r7,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r7.u32);
	// addi r15,r14,108
	ctx.r15.s64 = ctx.r14.s64 + 108;
	// li r19,3
	ctx.r19.s64 = 3;
	// addi r22,r3,-24128
	ctx.r22.s64 = ctx.r3.s64 + -24128;
	// addi r21,r31,-24136
	ctx.r21.s64 = ctx.r31.s64 + -24136;
	// addi r20,r30,-24172
	ctx.r20.s64 = ctx.r30.s64 + -24172;
	// addi r26,r29,-24184
	ctx.r26.s64 = ctx.r29.s64 + -24184;
	// addi r17,r10,-24192
	ctx.r17.s64 = ctx.r10.s64 + -24192;
	// addi r16,r11,9572
	ctx.r16.s64 = ctx.r11.s64 + 9572;
loc_826A9EC8:
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// add r3,r23,r11
	ctx.r3.u64 = ctx.r23.u64 + ctx.r11.u64;
	// lwz r31,100(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 100);
	// addic. r27,r31,8109
	ctx.xer.ca = ctx.r31.u32 > 4294959186;
	ctx.r27.s64 = ctx.r31.s64 + 8109;
	ctx.cr0.compare<int32_t>(ctx.r27.s32, 0, ctx.xer);
	// beq 0x826aa260
	if (ctx.cr0.eq) goto loc_826AA260;
	// lbz r11,41(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 41);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9f04
	if (ctx.cr6.eq) goto loc_826A9F04;
	// bl 0x823961c0
	ctx.lr = 0x826A9EEC;
	sub_823961C0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9f04
	if (ctx.cr6.eq) goto loc_826A9F04;
	// li r28,1
	ctx.r28.s64 = 1;
	// mr r11,r28
	ctx.r11.u64 = ctx.r28.u64;
	// b 0x826a9f0c
	goto loc_826A9F0C;
loc_826A9F04:
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
	// li r28,1
	ctx.r28.s64 = 1;
loc_826A9F0C:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa240
	if (ctx.cr6.eq) goto loc_826AA240;
	// lwz r3,492(r1)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r1.u32 + 492);
	// bl 0x8268db80
	ctx.lr = 0x826A9F20;
	sub_8268DB80(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x826aa260
	if (ctx.cr6.eq) goto loc_826AA260;
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// addi r18,r18,1
	ctx.r18.s64 = ctx.r18.s64 + 1;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// lwz r10,340(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 340);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826A9F44;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r30,r15,-80
	ctx.r30.s64 = ctx.r15.s64 + -80;
	// mr r5,r16
	ctx.r5.u64 = ctx.r16.u64;
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// li r4,80
	ctx.r4.s64 = 80;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82137a08
	ctx.lr = 0x826A9F5C;
	sub_82137A08(ctx, base);
	// mr r5,r15
	ctx.r5.u64 = ctx.r15.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x8269dab8
	ctx.lr = 0x826A9F6C;
	sub_8269DAB8(ctx, base);
	// mr r4,r17
	ctx.r4.u64 = ctx.r17.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9F7C;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826a9fcc
	if (ctx.cr6.eq) goto loc_826A9FCC;
	// lwz r10,124(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 124);
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// add r4,r23,r11
	ctx.r4.u64 = ctx.r23.u64 + ctx.r11.u64;
	// lwz r3,-10020(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10020);
	// bl 0x826bf068
	ctx.lr = 0x826A9F9C;
	sub_826BF068(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// stw r28,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r28.u32);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826a9fb4
	if (ctx.cr6.eq) goto loc_826A9FB4;
	// stw r25,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r25.u32);
	// b 0x826a9fb8
	goto loc_826A9FB8;
loc_826A9FB4:
	// stw r28,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r28.u32);
loc_826A9FB8:
	// lbz r11,21670(r14)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r14.u32 + 21670);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826a9fcc
	if (ctx.cr6.eq) goto loc_826A9FCC;
	// stw r25,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r25.u32);
	// stw r28,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r28.u32);
loc_826A9FCC:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,136(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 136);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826A9FDC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826a9ff0
	if (ctx.cr6.eq) goto loc_826A9FF0;
	// li r11,5
	ctx.r11.s64 = 5;
	// stw r30,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r30.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826A9FF0:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,116(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 116);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AA000;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa014
	if (ctx.cr6.eq) goto loc_826AA014;
	// li r11,6
	ctx.r11.s64 = 6;
	// stw r15,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r15.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826AA014:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,144(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AA024;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa050
	if (ctx.cr6.eq) goto loc_826AA050;
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// li r10,5
	ctx.r10.s64 = 5;
	// lwz r9,108(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 108);
	// add r8,r23,r11
	ctx.r8.u64 = ctx.r23.u64 + ctx.r11.u64;
	// lwz r7,24(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 24);
	// rlwinm r6,r7,2,0,29
	ctx.r6.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r5,r6,r9
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r9.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r5,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r5.u32);
loc_826AA050:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,140(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 140);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AA060;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa090
	if (ctx.cr6.eq) goto loc_826AA090;
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// lwz r10,132(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 132);
	// add r9,r23,r11
	ctx.r9.u64 = ctx.r23.u64 + ctx.r11.u64;
	// lbz r8,-29346(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + -29346);
	// lwz r11,44(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 44);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826aa088
	if (ctx.cr6.eq) goto loc_826AA088;
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_826AA088:
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
loc_826AA090:
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,112(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 112);
	// add r11,r23,r11
	ctx.r11.u64 = ctx.r23.u64 + ctx.r11.u64;
	// lwz r28,4(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268da78
	ctx.lr = 0x826AA0AC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa0c0
	if (ctx.cr6.eq) goto loc_826AA0C0;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r28,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r28.u32);
	// stw r11,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r11.u32);
loc_826AA0C0:
	// lwz r11,120(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 120);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AA0D0;
	sub_822A3998(ctx, base);
	// lwz r10,52(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// mr r11,r27
	ctx.r11.u64 = ctx.r27.u64;
	// addi r10,r10,8109
	ctx.r10.s64 = ctx.r10.s64 + 8109;
loc_826AA0DC:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826aa100
	if (ctx.cr6.eq) goto loc_826AA100;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826aa0dc
	if (ctx.cr6.eq) goto loc_826AA0DC;
loc_826AA100:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826aa128
	if (!ctx.cr6.eq) goto loc_826AA128;
	// mr r6,r18
	ctx.r6.u64 = ctx.r18.u64;
	// lwz r5,128(r1)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r1.u32 + 128);
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// bl 0x826a6140
	ctx.lr = 0x826AA11C;
	sub_826A6140(ctx, base);
	// lwz r11,492(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 492);
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// stw r18,12(r11)
	PPC_STORE_U32(ctx.r11.u32 + 12, ctx.r18.u32);
loc_826AA128:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AA138;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa240
	if (ctx.cr6.eq) goto loc_826AA240;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa240
	if (ctx.cr6.eq) goto loc_826AA240;
	// lwz r29,56(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x826aa240
	if (ctx.cr6.eq) goto loc_826AA240;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82203008
	ctx.lr = 0x826AA164;
	sub_82203008(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa240
	if (ctx.cr6.eq) goto loc_826AA240;
	// mr r31,r25
	ctx.r31.u64 = ctx.r25.u64;
loc_826AA170:
	// li r11,7
	ctx.r11.s64 = 7;
	// stw r25,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r25.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// stw r11,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r11.u32);
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x825ede80
	ctx.lr = 0x826AA190;
	sub_825EDE80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// clrlwi r10,r30,24
	ctx.r10.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826aa230
	if (ctx.cr6.eq) goto loc_826AA230;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x825ef808
	ctx.lr = 0x826AA1A8;
	sub_825EF808(ctx, base);
	// cmpw cr6,r3,r28
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r28.s32, ctx.xer);
	// beq cr6,0x826aa22c
	if (ctx.cr6.eq) goto loc_826AA22C;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x825ef808
	ctx.lr = 0x826AA1B8;
	sub_825EF808(ctx, base);
	// cmpwi cr6,r3,-1
	ctx.cr6.compare<int32_t>(ctx.r3.s32, -1, ctx.xer);
	// bne cr6,0x826aa230
	if (!ctx.cr6.eq) goto loc_826AA230;
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// bl 0x82130000
	ctx.lr = 0x826AA1D0;
	sub_82130000(ctx, base);
	// stw r28,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r28.u32);
	// stw r19,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r19.u32);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// addi r6,r1,96
	ctx.r6.s64 = ctx.r1.s64 + 96;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82203058
	ctx.lr = 0x826AA1EC;
	sub_82203058(ctx, base);
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// mr r6,r27
	ctx.r6.u64 = ctx.r27.u64;
	// li r4,127
	ctx.r4.s64 = 127;
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x82137a08
	ctx.lr = 0x826AA200;
	sub_82137A08(ctx, base);
	// stb r25,303(r1)
	PPC_STORE_U8(ctx.r1.u32 + 303, ctx.r25.u8);
	// addi r3,r1,176
	ctx.r3.s64 = ctx.r1.s64 + 176;
	// bl 0x821378b8
	ctx.lr = 0x826AA20C;
	sub_821378B8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,152
	ctx.r3.s64 = ctx.r1.s64 + 152;
	// bl 0x82202fb8
	ctx.lr = 0x826AA218;
	sub_82202FB8(ctx, base);
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// addi r6,r1,152
	ctx.r6.s64 = ctx.r1.s64 + 152;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82203058
	ctx.lr = 0x826AA22C;
	sub_82203058(ctx, base);
loc_826AA22C:
	// mr r30,r25
	ctx.r30.u64 = ctx.r25.u64;
loc_826AA230:
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aa170
	if (!ctx.cr6.eq) goto loc_826AA170;
loc_826AA240:
	// lwz r11,92(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 92);
	// addi r15,r15,168
	ctx.r15.s64 = ctx.r15.s64 + 168;
	// lhz r9,4(r24)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r24.u32 + 4);
	// addi r23,r23,104
	ctx.r23.s64 = ctx.r23.s64 + 104;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r11.u32);
	// cmpw cr6,r11,r9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r9.s32, ctx.xer);
	// blt cr6,0x826a9ec8
	if (ctx.cr6.lt) goto loc_826A9EC8;
loc_826AA260:
	// lwz r30,84(r1)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
loc_826AA264:
	// mr r3,r14
	ctx.r3.u64 = ctx.r14.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826AA26C;
	sub_826A7A28(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r10,88(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// lwz r4,80(r1)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// lwz r11,18508(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// lwz r31,508(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x821f9fb8
	ctx.lr = 0x826AA288;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa2b8
	if (ctx.cr6.eq) goto loc_826AA2B8;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa2b8
	if (ctx.cr6.eq) goto loc_826AA2B8;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa2b8
	if (ctx.cr6.eq) goto loc_826AA2B8;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r11,-14556
	ctx.r4.s64 = ctx.r11.s64 + -14556;
	// bl 0x825ee0e0
	ctx.lr = 0x826AA2B8;
	sub_825EE0E0(ctx, base);
loc_826AA2B8:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,464
	ctx.r1.s64 = ctx.r1.s64 + 464;
	// b 0x823d9210
	__restgprlr_14(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AA2C4"))) PPC_WEAK_FUNC(sub_826AA2C4);
PPC_FUNC_IMPL(__imp__sub_826AA2C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826AA2C8"))) PPC_WEAK_FUNC(sub_826AA2C8);
PPC_FUNC_IMPL(__imp__sub_826AA2C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826AA2D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// addi r11,r11,-26012
	ctx.r11.s64 = ctx.r11.s64 + -26012;
	// addi r29,r29,-16096
	ctx.r29.s64 = ctx.r29.s64 + -16096;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mulli r10,r10,152
	ctx.r10.s64 = ctx.r10.s64 * 152;
	// add r8,r10,r31
	ctx.r8.u64 = ctx.r10.u64 + ctx.r31.u64;
	// addis r30,r8,1
	ctx.r30.s64 = ctx.r8.s64 + 65536;
	// addi r30,r30,-23552
	ctx.r30.s64 = ctx.r30.s64 + -23552;
	// lwz r10,148(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + 148);
	// cmpw cr6,r10,r9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r9.s32, ctx.xer);
	// bne cr6,0x826aa334
	if (!ctx.cr6.eq) goto loc_826AA334;
	// li r11,0
	ctx.r11.s64 = 0;
	// cmpwi cr6,r10,1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 1, ctx.xer);
	// stb r11,0(r30)
	PPC_STORE_U8(ctx.r30.u32 + 0, ctx.r11.u8);
	// bne cr6,0x826aa328
	if (!ctx.cr6.eq) goto loc_826AA328;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,43656
	ctx.r9.u64 = ctx.r10.u64 | 43656;
	// b 0x826aa390
	goto loc_826AA390;
loc_826AA328:
	// cmpwi cr6,r10,11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 11, ctx.xer);
	// bne cr6,0x826aa394
	if (!ctx.cr6.eq) goto loc_826AA394;
	// b 0x826aa388
	goto loc_826AA388;
loc_826AA334:
	// lis r10,0
	ctx.r10.s64 = 0;
	// li r9,1
	ctx.r9.s64 = 1;
	// ori r8,r10,49436
	ctx.r8.u64 = ctx.r10.u64 | 49436;
	// stb r9,0(r30)
	PPC_STORE_U8(ctx.r30.u32 + 0, ctx.r9.u8);
	// lwzx r7,r31,r8
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	// stw r7,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r7.u32);
	// lwz r11,0(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826aa36c
	if (!ctx.cr6.eq) goto loc_826AA36C;
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// ori r9,r11,43656
	ctx.r9.u64 = ctx.r11.u64 | 43656;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// b 0x826aa394
	goto loc_826AA394;
loc_826AA36C:
	// cmpwi cr6,r11,11
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 11, ctx.xer);
	// bne cr6,0x826aa394
	if (!ctx.cr6.eq) goto loc_826AA394;
	// lwz r10,0(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// li r11,0
	ctx.r11.s64 = 0;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x826aa388
	if (!ctx.cr6.eq) goto loc_826AA388;
	// stb r11,0(r30)
	PPC_STORE_U8(ctx.r30.u32 + 0, ctx.r11.u8);
loc_826AA388:
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,42136
	ctx.r9.u64 = ctx.r10.u64 | 42136;
loc_826AA390:
	// stbx r11,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r11.u8);
loc_826AA394:
	// addis r5,r31,1
	ctx.r5.s64 = ctx.r31.s64 + 65536;
	// li r4,128
	ctx.r4.s64 = 128;
	// addi r5,r5,-16092
	ctx.r5.s64 = ctx.r5.s64 + -16092;
	// addi r3,r30,12
	ctx.r3.s64 = ctx.r30.s64 + 12;
	// bl 0x82137a08
	ctx.lr = 0x826AA3A8;
	sub_82137A08(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r11,8(r30)
	PPC_STORE_U32(ctx.r30.u32 + 8, ctx.r11.u32);
	// bl 0x826a7970
	ctx.lr = 0x826AA3B8;
	sub_826A7970(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AA3C0"))) PPC_WEAK_FUNC(sub_826AA3C0);
PPC_FUNC_IMPL(__imp__sub_826AA3C0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e8
	ctx.lr = 0x826AA3C8;
	__savegprlr_24(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// bl 0x8269e408
	ctx.lr = 0x826AA3D8;
	sub_8269E408(ctx, base);
	// lis r26,-32121
	ctx.r26.s64 = -2105081856;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// lwz r3,18508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 18508);
	// bl 0x826b94e8
	ctx.lr = 0x826AA3EC;
	sub_826B94E8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aa428
	if (!ctx.cr6.eq) goto loc_826AA428;
	// lbz r11,21670(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 21670);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aa428
	if (!ctx.cr6.eq) goto loc_826AA428;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lbz r10,-29346(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29346);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826aa428
	if (!ctx.cr6.eq) goto loc_826AA428;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23992
	ctx.r3.s64 = ctx.r11.s64 + -23992;
	// bl 0x821fa230
	ctx.lr = 0x826AA420;
	sub_821FA230(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9238
	__restgprlr_24(ctx, base);
	return;
loc_826AA428:
	// lis r27,-32121
	ctx.r27.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AA438;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r30,132(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// bl 0x82387b90
	ctx.lr = 0x826AA444;
	sub_82387B90(ctx, base);
	// lwz r28,1344(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// bl 0x82387b90
	ctx.lr = 0x826AA44C;
	sub_82387B90(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mulli r11,r28,8176
	ctx.r11.s64 = ctx.r28.s64 * 8176;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238ee58
	ctx.lr = 0x826AA464;
	sub_8238EE58(ctx, base);
	// lis r10,3
	ctx.r10.s64 = 196608;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// ori r8,r10,57424
	ctx.r8.u64 = ctx.r10.u64 | 57424;
	// li r7,1
	ctx.r7.s64 = 1;
	// addi r3,r9,-24048
	ctx.r3.s64 = ctx.r9.s64 + -24048;
	// stbx r7,r31,r8
	PPC_STORE_U8(ctx.r31.u32 + ctx.r8.u32, ctx.r7.u8);
	// bl 0x82130000
	ctx.lr = 0x826AA480;
	sub_82130000(ctx, base);
	// addis r31,r29,1
	ctx.r31.s64 = ctx.r29.s64 + 65536;
	// lis r11,3
	ctx.r11.s64 = 196608;
	// li r30,0
	ctx.r30.s64 = 0;
	// addi r31,r31,-23548
	ctx.r31.s64 = ctx.r31.s64 + -23548;
	// ori r28,r11,50032
	ctx.r28.u64 = ctx.r11.u64 | 50032;
loc_826AA494:
	// lbz r11,-4(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + -4);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa4e8
	if (ctx.cr6.eq) goto loc_826AA4E8;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AA4AC;
	sub_822A3998(ctx, base);
	// lwz r3,52(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x8238f1e8
	ctx.lr = 0x826AA4B4;
	sub_8238F1E8(ctx, base);
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826AA4BC;
	sub_82387B90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r6,0(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r5,4(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// bl 0x8269ba28
	ctx.lr = 0x826AA4D4;
	sub_8269BA28(ctx, base);
	// mulli r11,r24,84
	ctx.r11.s64 = ctx.r24.s64 * 84;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// add r3,r11,r28
	ctx.r3.u64 = ctx.r11.u64 + ctx.r28.u64;
	// bl 0x823900e0
	ctx.lr = 0x826AA4E8;
	sub_823900E0(ctx, base);
loc_826AA4E8:
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r31,r31,152
	ctx.r31.s64 = ctx.r31.s64 + 152;
	// cmpwi cr6,r30,49
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 49, ctx.xer);
	// blt cr6,0x826aa494
	if (ctx.cr6.lt) goto loc_826AA494;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8269e408
	ctx.lr = 0x826AA504;
	sub_8269E408(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a7970
	ctx.lr = 0x826AA50C;
	sub_826A7970(ctx, base);
	// lbz r11,21670(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 21670);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aa524
	if (!ctx.cr6.eq) goto loc_826AA524;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// lwz r3,18508(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 18508);
	// bl 0x826b94a8
	ctx.lr = 0x826AA524;
	sub_826B94A8(ctx, base);
loc_826AA524:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826AA52C;
	sub_826A7A28(ctx, base);
	// lwz r11,18508(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 18508);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// lwz r31,508(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x821f9fb8
	ctx.lr = 0x826AA548;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa578
	if (ctx.cr6.eq) goto loc_826AA578;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa578
	if (ctx.cr6.eq) goto loc_826AA578;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa578
	if (ctx.cr6.eq) goto loc_826AA578;
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r11,-14556
	ctx.r4.s64 = ctx.r11.s64 + -14556;
	// bl 0x825ee0e0
	ctx.lr = 0x826AA578;
	sub_825EE0E0(ctx, base);
loc_826AA578:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-24212
	ctx.r3.s64 = ctx.r11.s64 + -24212;
	// bl 0x821e6800
	ctx.lr = 0x826AA584;
	sub_821E6800(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-25528
	ctx.r3.s64 = ctx.r10.s64 + -25528;
	// bl 0x821fa230
	ctx.lr = 0x826AA590;
	sub_821FA230(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9238
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AA598"))) PPC_WEAK_FUNC(sub_826AA598);
PPC_FUNC_IMPL(__imp__sub_826AA598) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826AA5A0;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addis r30,r31,1
	ctx.r30.s64 = ctx.r31.s64 + 65536;
	// addi r30,r30,-26012
	ctx.r30.s64 = ctx.r30.s64 + -26012;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x826aa5c8
	if (!ctx.cr6.eq) goto loc_826AA5C8;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826AA5C8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-25548
	ctx.r3.s64 = ctx.r11.s64 + -25548;
	// bl 0x821fa230
	ctx.lr = 0x826AA5D4;
	sub_821FA230(ctx, base);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r29,r10,-27236
	ctx.r29.s64 = ctx.r10.s64 + -27236;
	// lwz r8,328(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 328);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826AA5EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826AA5F8;
	sub_8268DA78(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// stw r4,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r4.u32);
	// bl 0x826a7ba0
	ctx.lr = 0x826AA60C;
	sub_826A7BA0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a5078
	ctx.lr = 0x826AA618;
	sub_826A5078(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AA620"))) PPC_WEAK_FUNC(sub_826AA620);
PPC_FUNC_IMPL(__imp__sub_826AA620) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826AA628;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r31,0
	ctx.r31.s64 = 0;
	// addis r30,r29,1
	ctx.r30.s64 = ctx.r29.s64 + 65536;
	// addi r30,r30,-23552
	ctx.r30.s64 = ctx.r30.s64 + -23552;
loc_826AA63C:
	// lbz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa654
	if (ctx.cr6.eq) goto loc_826AA654;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a7ba0
	ctx.lr = 0x826AA654;
	sub_826A7BA0(ctx, base);
loc_826AA654:
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// addi r30,r30,152
	ctx.r30.s64 = ctx.r30.s64 + 152;
	// cmpwi cr6,r31,49
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 49, ctx.xer);
	// blt cr6,0x826aa63c
	if (ctx.cr6.lt) goto loc_826AA63C;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-10256
	ctx.r4.s64 = ctx.r10.s64 + -10256;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AA678;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa6a8
	if (ctx.cr6.eq) goto loc_826AA6A8;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa6a8
	if (ctx.cr6.eq) goto loc_826AA6A8;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa6a8
	if (ctx.cr6.eq) goto loc_826AA6A8;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-23972
	ctx.r4.s64 = ctx.r11.s64 + -23972;
	// bl 0x825ee0e0
	ctx.lr = 0x826AA6A8;
	sub_825EE0E0(ctx, base);
loc_826AA6A8:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AA6B0"))) PPC_WEAK_FUNC(sub_826AA6B0);
PPC_FUNC_IMPL(__imp__sub_826AA6B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d4
	ctx.lr = 0x826AA6B8;
	__savegprlr_19(ctx, base);
	// stwu r1,-304(r1)
	ea = -304 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// addi r3,r11,-25028
	ctx.r3.s64 = ctx.r11.s64 + -25028;
	// bl 0x821fa230
	ctx.lr = 0x826AA6CC;
	sub_821FA230(ctx, base);
	// li r6,8
	ctx.r6.s64 = 8;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// stw r6,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r6.u32);
	// li r5,6
	ctx.r5.s64 = 6;
	// li r6,9
	ctx.r6.s64 = 9;
	// li r4,12
	ctx.r4.s64 = 12;
	// stw r5,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r5.u32);
	// mr r20,r3
	ctx.r20.u64 = ctx.r3.u64;
	// stw r6,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r6.u32);
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// li r8,5
	ctx.r8.s64 = 5;
	// stw r4,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r4.u32);
	// li r9,4
	ctx.r9.s64 = 4;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r8,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r8.u32);
	// li r11,3
	ctx.r11.s64 = 3;
	// stw r9,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r9.u32);
	// li r22,0
	ctx.r22.s64 = 0;
	// stw r10,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r10.u32);
	// li r19,1
	ctx.r19.s64 = 1;
	// stw r11,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r11.u32);
	// li r5,11
	ctx.r5.s64 = 11;
	// stw r22,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r22.u32);
	// li r6,10
	ctx.r6.s64 = 10;
	// stw r19,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r19.u32);
	// li r31,7
	ctx.r31.s64 = 7;
	// stw r5,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r5.u32);
	// addi r4,r7,-21664
	ctx.r4.s64 = ctx.r7.s64 + -21664;
	// stw r6,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r6.u32);
	// stw r31,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r31.u32);
	// stw r22,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r22.u32);
	// stw r11,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r11.u32);
	// stw r9,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r9.u32);
	// stw r10,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r10.u32);
	// stw r19,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r19.u32);
	// stw r8,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r8.u32);
	// bl 0x821f9fb8
	ctx.lr = 0x826AA764;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa794
	if (ctx.cr6.eq) goto loc_826AA794;
	// lbz r11,68(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 68);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aa794
	if (ctx.cr6.eq) goto loc_826AA794;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aa794
	if (ctx.cr6.eq) goto loc_826AA794;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r11,-25488
	ctx.r4.s64 = ctx.r11.s64 + -25488;
	// bl 0x825ee120
	ctx.lr = 0x826AA794;
	sub_825EE120(ctx, base);
loc_826AA794:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r24,r22
	ctx.r24.u64 = ctx.r22.u64;
	// addi r30,r1,128
	ctx.r30.s64 = ctx.r1.s64 + 128;
	// lwz r11,18508(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// li r31,13
	ctx.r31.s64 = 13;
	// lwz r3,17268(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17268);
	// lwz r25,508(r11)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x822a3998
	ctx.lr = 0x826AA7BC;
	sub_822A3998(ctx, base);
	// lwz r3,48(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// bl 0x82332098
	ctx.lr = 0x826AA7C4;
	sub_82332098(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826aa7d8
	if (ctx.cr6.eq) goto loc_826AA7D8;
	// li r31,6
	ctx.r31.s64 = 6;
	// addi r30,r1,96
	ctx.r30.s64 = ctx.r1.s64 + 96;
loc_826AA7D8:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// ble cr6,0x826aa910
	if (!ctx.cr6.gt) goto loc_826AA910;
	// mr r23,r30
	ctx.r23.u64 = ctx.r30.u64;
	// mr r21,r31
	ctx.r21.u64 = ctx.r31.u64;
loc_826AA7E8:
	// lwz r31,0(r23)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// mr r3,r20
	ctx.r3.u64 = ctx.r20.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826AA7F8;
	sub_8268DCB0(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// mr r27,r22
	ctx.r27.u64 = ctx.r22.u64;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x826aa904
	if (ctx.cr6.eq) goto loc_826AA904;
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AA818;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826AA828;
	sub_8268DCB0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r26,2
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 2, ctx.xer);
	// bge cr6,0x826aa88c
	if (!ctx.cr6.lt) goto loc_826AA88C;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,72(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AA844;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826aa88c
	if (ctx.cr6.eq) goto loc_826AA88C;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,5,0,26
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 5) & 0xFFFFFFE0;
	// add r9,r11,r29
	ctx.r9.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r11,20280(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 20280);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmpw cr6,r11,r25
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r25.s32, ctx.xer);
	// bge cr6,0x826aa88c
	if (!ctx.cr6.lt) goto loc_826AA88C;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r27,r19
	ctx.r27.u64 = ctx.r19.u64;
	// mr r24,r30
	ctx.r24.u64 = ctx.r30.u64;
	// bl 0x826a82f8
	ctx.lr = 0x826AA88C;
	sub_826A82F8(ctx, base);
loc_826AA88C:
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aa904
	if (!ctx.cr6.eq) goto loc_826AA904;
	// cmpwi cr6,r26,1
	ctx.cr6.compare<int32_t>(ctx.r26.s32, 1, ctx.xer);
	// bge cr6,0x826aa904
	if (!ctx.cr6.lt) goto loc_826AA904;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826AA8AC;
	sub_8268DCB0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,72(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 72);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AA8C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826aa904
	if (ctx.cr6.eq) goto loc_826AA904;
	// rlwinm r11,r31,1,0,30
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 1) & 0xFFFFFFFE;
	// lwz r10,80(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// add r11,r31,r11
	ctx.r11.u64 = ctx.r31.u64 + ctx.r11.u64;
	// rlwinm r11,r11,5,0,26
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 5) & 0xFFFFFFE0;
	// add r9,r11,r29
	ctx.r9.u64 = ctx.r11.u64 + ctx.r29.u64;
	// lwz r11,20276(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 20276);
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// cmpw cr6,r11,r25
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r25.s32, ctx.xer);
	// bge cr6,0x826aa904
	if (!ctx.cr6.lt) goto loc_826AA904;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// mr r24,r30
	ctx.r24.u64 = ctx.r30.u64;
	// bl 0x826a82f8
	ctx.lr = 0x826AA904;
	sub_826A82F8(ctx, base);
loc_826AA904:
	// addic. r21,r21,-1
	ctx.xer.ca = ctx.r21.u32 > 0;
	ctx.r21.s64 = ctx.r21.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r21.s32, 0, ctx.xer);
	// addi r23,r23,4
	ctx.r23.s64 = ctx.r23.s64 + 4;
	// bne 0x826aa7e8
	if (!ctx.cr0.eq) goto loc_826AA7E8;
loc_826AA910:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a8178
	ctx.lr = 0x826AA918;
	sub_826A8178(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826a8640
	ctx.lr = 0x826AA924;
	sub_826A8640(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r1,r1,304
	ctx.r1.s64 = ctx.r1.s64 + 304;
	// b 0x823d9224
	__restgprlr_19(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AA930"))) PPC_WEAK_FUNC(sub_826AA930);
PPC_FUNC_IMPL(__imp__sub_826AA930) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826AA938;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addis r27,r28,1
	ctx.r27.s64 = ctx.r28.s64 + 65536;
	// addi r27,r27,-7544
	ctx.r27.s64 = ctx.r27.s64 + -7544;
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826aaa34
	if (!ctx.cr6.eq) goto loc_826AAA34;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lbz r10,-29347(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29347);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826aaa34
	if (ctx.cr6.eq) goto loc_826AAA34;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AA974;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r30,132(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// bl 0x82387b90
	ctx.lr = 0x826AA980;
	sub_82387B90(ctx, base);
	// lwz r9,8100(r30)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r30.u32 + 8100);
	// lwz r29,1344(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826aa9cc
	if (ctx.cr6.eq) goto loc_826AA9CC;
	// bl 0x82387b90
	ctx.lr = 0x826AA994;
	sub_82387B90(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mulli r11,r29,8176
	ctx.r11.s64 = ctx.r29.s64 * 8176;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238ee58
	ctx.lr = 0x826AA9AC;
	sub_8238EE58(ctx, base);
	// lis r11,3
	ctx.r11.s64 = 196608;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// ori r9,r11,57424
	ctx.r9.u64 = ctx.r11.u64 | 57424;
	// li r8,1
	ctx.r8.s64 = 1;
	// addi r3,r10,-23884
	ctx.r3.s64 = ctx.r10.s64 + -23884;
	// stbx r8,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r8.u8);
	// bl 0x82130000
	ctx.lr = 0x826AA9C8;
	sub_82130000(ctx, base);
	// b 0x826aa9e4
	goto loc_826AA9E4;
loc_826AA9CC:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23960
	ctx.r3.s64 = ctx.r11.s64 + -23960;
	// bl 0x82130000
	ctx.lr = 0x826AA9D8;
	sub_82130000(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a4718
	ctx.lr = 0x826AA9E4;
	sub_826A4718(ctx, base);
loc_826AA9E4:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269b658
	ctx.lr = 0x826AA9EC;
	sub_8269B658(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826aa620
	ctx.lr = 0x826AA9F4;
	sub_826AA620(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r5,r11,-10268
	ctx.r5.s64 = ctx.r11.s64 + -10268;
	// addi r4,r10,-10256
	ctx.r4.s64 = ctx.r10.s64 + -10256;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a6140
	ctx.lr = 0x826AAA10;
	sub_826A6140(ctx, base);
	// bl 0x8221f980
	ctx.lr = 0x826AAA14;
	sub_8221F980(ctx, base);
	// li r9,20
	ctx.r9.s64 = 20;
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// stw r9,0(r27)
	PPC_STORE_U32(ctx.r27.u32 + 0, ctx.r9.u32);
	// lwz r11,-10240(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -10240);
	// lwz r3,4296(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4296);
	// bl 0x82275e60
	ctx.lr = 0x826AAA2C;
	sub_82275E60(ctx, base);
	// li r7,0
	ctx.r7.s64 = 0;
	// stb r7,21668(r28)
	PPC_STORE_U8(ctx.r28.u32 + 21668, ctx.r7.u8);
loc_826AAA34:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AAA3C"))) PPC_WEAK_FUNC(sub_826AAA3C);
PPC_FUNC_IMPL(__imp__sub_826AAA3C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826AAA40"))) PPC_WEAK_FUNC(sub_826AAA40);
PPC_FUNC_IMPL(__imp__sub_826AAA40) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e0
	ctx.lr = 0x826AAA48;
	__savegprlr_22(ctx, base);
	// stwu r1,-176(r1)
	ea = -176 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r23,-32121
	ctx.r23.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,17268(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AAA60;
	sub_822A3998(ctx, base);
	// addis r31,r28,1
	ctx.r31.s64 = ctx.r28.s64 + 65536;
	// li r26,0
	ctx.r26.s64 = 0;
	// addi r31,r31,-7544
	ctx.r31.s64 = ctx.r31.s64 + -7544;
	// lis r25,-32111
	ctx.r25.s64 = -2104426496;
	// lis r24,-32111
	ctx.r24.s64 = -2104426496;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x826aaafc
	if (!ctx.cr6.gt) goto loc_826AAAFC;
	// lwz r11,-29336(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29336);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826aaafc
	if (!ctx.cr6.eq) goto loc_826AAAFC;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826990d8
	ctx.lr = 0x826AAA98;
	sub_826990D8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aaafc
	if (ctx.cr6.eq) goto loc_826AAAFC;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a8710
	ctx.lr = 0x826AAAAC;
	sub_822A8710(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aaafc
	if (ctx.cr6.eq) goto loc_826AAAFC;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a86e8
	ctx.lr = 0x826AAAC0;
	sub_822A86E8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aaafc
	if (ctx.cr6.eq) goto loc_826AAAFC;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// addic. r11,r11,-1
	ctx.xer.ca = ctx.r11.u32 > 0;
	ctx.r11.s64 = ctx.r11.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// bgt 0x826aaafc
	if (ctx.cr0.gt) goto loc_826AAAFC;
	// lbz r11,-29347(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + -29347);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aaaf8
	if (ctx.cr6.eq) goto loc_826AAAF8;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r11,-23832
	ctx.r3.s64 = ctx.r11.s64 + -23832;
	// bl 0x82255cf8
	ctx.lr = 0x826AAAF8;
	sub_82255CF8(ctx, base);
loc_826AAAF8:
	// stw r26,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r26.u32);
loc_826AAAFC:
	// addis r31,r28,1
	ctx.r31.s64 = ctx.r28.s64 + 65536;
	// addi r31,r31,-7768
	ctx.r31.s64 = ctx.r31.s64 + -7768;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// ble cr6,0x826aabcc
	if (!ctx.cr6.gt) goto loc_826AABCC;
	// cmpwi cr6,r11,11
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 11, ctx.xer);
	// ble cr6,0x826aab4c
	if (!ctx.cr6.gt) goto loc_826AAB4C;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// lwz r3,-10236(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AAB34;
	sub_821F9FB8(ctx, base);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r8,1072
	ctx.r4.s64 = ctx.r8.s64 + 1072;
	// bl 0x825ee0e0
	ctx.lr = 0x826AAB48;
	sub_825EE0E0(ctx, base);
	// b 0x826aabcc
	goto loc_826AABCC;
loc_826AAB4C:
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// bne cr6,0x826aab5c
	if (!ctx.cr6.eq) goto loc_826AAB5C;
	// stw r26,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r26.u32);
	// b 0x826aabcc
	goto loc_826AABCC;
loc_826AAB5C:
	// cmpwi cr6,r11,11
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 11, ctx.xer);
	// bne cr6,0x826aab70
	if (!ctx.cr6.eq) goto loc_826AAB70;
	// li r11,1
	ctx.r11.s64 = 1;
	// stw r11,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r11.u32);
	// b 0x826aabcc
	goto loc_826AABCC;
loc_826AAB70:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826aab98
	if (!ctx.cr6.eq) goto loc_826AAB98;
	// lwz r11,21676(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 21676);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826aab98
	if (!ctx.cr6.eq) goto loc_826AAB98;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a8178
	ctx.lr = 0x826AAB8C;
	sub_826A8178(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a8640
	ctx.lr = 0x826AAB98;
	sub_826A8640(ctx, base);
loc_826AAB98:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r30,0(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AABB0;
	sub_821F9FB8(ctx, base);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r9,1072
	ctx.r4.s64 = ctx.r9.s64 + 1072;
	// bl 0x825ee0e0
	ctx.lr = 0x826AABC4;
	sub_825EE0E0(ctx, base);
	// li r8,-1
	ctx.r8.s64 = -1;
	// stw r8,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r8.u32);
loc_826AABCC:
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,57988
	ctx.r10.u64 = ctx.r11.u64 | 57988;
	// lwzx r9,r28,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r10.u32);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// ble cr6,0x826aabe8
	if (!ctx.cr6.gt) goto loc_826AABE8;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826a1350
	ctx.lr = 0x826AABE8;
	sub_826A1350(ctx, base);
loc_826AABE8:
	// addis r11,r28,1
	ctx.r11.s64 = ctx.r28.s64 + 65536;
	// addi r11,r11,-7756
	ctx.r11.s64 = ctx.r11.s64 + -7756;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// ble cr6,0x826aac34
	if (!ctx.cr6.gt) goto loc_826AAC34;
	// cmpwi cr6,r10,10
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 10, ctx.xer);
	// blt cr6,0x826aac2c
	if (ctx.cr6.lt) goto loc_826AAC2C;
	// lis r10,0
	ctx.r10.s64 = 0;
	// lis r9,-32119
	ctx.r9.s64 = -2104950784;
	// ori r8,r10,57996
	ctx.r8.u64 = ctx.r10.u64 | 57996;
	// lwz r10,-18004(r9)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r9.u32 + -18004);
	// lwzx r7,r28,r8
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r8.u32);
	// stw r7,68(r10)
	PPC_STORE_U32(ctx.r10.u32 + 68, ctx.r7.u32);
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addi r6,r10,-10
	ctx.r6.s64 = ctx.r10.s64 + -10;
	// stw r6,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r6.u32);
	// b 0x826aac34
	goto loc_826AAC34;
loc_826AAC2C:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269cc70
	ctx.lr = 0x826AAC34;
	sub_8269CC70(ctx, base);
loc_826AAC34:
	// addis r11,r28,1
	ctx.r11.s64 = ctx.r28.s64 + 65536;
	// lis r30,-32119
	ctx.r30.s64 = -2104950784;
	// addi r11,r11,-7824
	ctx.r11.s64 = ctx.r11.s64 + -7824;
	// lwz r10,0(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// cmpwi cr6,r10,1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 1, ctx.xer);
	// bne cr6,0x826aac60
	if (!ctx.cr6.eq) goto loc_826AAC60;
	// lwz r10,-8256(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lbz r9,249(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 249);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826aac84
	if (ctx.cr6.eq) goto loc_826AAC84;
	// b 0x826aac78
	goto loc_826AAC78;
loc_826AAC60:
	// cmpwi cr6,r10,2
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 2, ctx.xer);
	// bne cr6,0x826aac84
	if (!ctx.cr6.eq) goto loc_826AAC84;
	// lwz r10,-8256(r30)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// lbz r9,248(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 248);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826aac84
	if (!ctx.cr6.eq) goto loc_826AAC84;
loc_826AAC78:
	// stw r26,0(r11)
	PPC_STORE_U32(ctx.r11.u32 + 0, ctx.r26.u32);
	// li r3,23
	ctx.r3.s64 = 23;
	// bl 0x82216138
	ctx.lr = 0x826AAC84;
	sub_82216138(ctx, base);
loc_826AAC84:
	// lis r29,-32125
	ctx.r29.s64 = -2105344000;
	// lwz r11,-29208(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -29208);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826aacc4
	if (!ctx.cr6.eq) goto loc_826AACC4;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r3,r11,-16
	ctx.r3.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826aacac
	if (!ctx.cr6.eq) goto loc_826AACAC;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_826AACAC:
	// bl 0x82352d70
	ctx.lr = 0x826AACB0;
	sub_82352D70(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aae38
	if (ctx.cr6.eq) goto loc_826AAE38;
	// li r11,2
	ctx.r11.s64 = 2;
	// b 0x826aae34
	goto loc_826AAE34;
loc_826AACC4:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826aacf4
	if (!ctx.cr6.eq) goto loc_826AACF4;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// bl 0x8236db68
	ctx.lr = 0x826AACD4;
	sub_8236DB68(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aae38
	if (!ctx.cr6.eq) goto loc_826AAE38;
	// li r11,6
	ctx.r11.s64 = 6;
	// li r3,26
	ctx.r3.s64 = 26;
	// stw r11,-29208(r29)
	PPC_STORE_U32(ctx.r29.u32 + -29208, ctx.r11.u32);
	// bl 0x82216138
	ctx.lr = 0x826AACF0;
	sub_82216138(ctx, base);
	// b 0x826aae38
	goto loc_826AAE38;
loc_826AACF4:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826aad38
	if (!ctx.cr6.eq) goto loc_826AAD38;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r3,r11,-16
	ctx.r3.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826aad14
	if (!ctx.cr6.eq) goto loc_826AAD14;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_826AAD14:
	// bl 0x8235abd8
	ctx.lr = 0x826AAD18;
	sub_8235ABD8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aae38
	if (ctx.cr6.eq) goto loc_826AAE38;
	// li r11,6
	ctx.r11.s64 = 6;
	// li r3,26
	ctx.r3.s64 = 26;
	// stw r11,-29208(r29)
	PPC_STORE_U32(ctx.r29.u32 + -29208, ctx.r11.u32);
	// bl 0x82216138
	ctx.lr = 0x826AAD34;
	sub_82216138(ctx, base);
	// b 0x826aae38
	goto loc_826AAE38;
loc_826AAD38:
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x826aada8
	if (!ctx.cr6.eq) goto loc_826AADA8;
	// lwz r31,48(r27)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lwz r11,12(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r3,r11,-16
	ctx.r3.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826aad58
	if (!ctx.cr6.eq) goto loc_826AAD58;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_826AAD58:
	// bl 0x8235abd8
	ctx.lr = 0x826AAD5C;
	sub_8235ABD8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aae38
	if (ctx.cr6.eq) goto loc_826AAE38;
	// lwz r11,12(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826aad7c
	if (!ctx.cr6.eq) goto loc_826AAD7C;
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
loc_826AAD7C:
	// lwz r3,80(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 80);
	// lwz r22,1016(r11)
	ctx.r22.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1016);
	// bl 0x82360f90
	ctx.lr = 0x826AAD88;
	sub_82360F90(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// mr r6,r22
	ctx.r6.u64 = ctx.r22.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r5,20(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 20);
	// bl 0x8236d850
	ctx.lr = 0x826AADA0;
	sub_8236D850(ctx, base);
	// li r11,4
	ctx.r11.s64 = 4;
	// b 0x826aae34
	goto loc_826AAE34;
loc_826AADA8:
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x826aade0
	if (!ctx.cr6.eq) goto loc_826AADE0;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r3,r11,-16
	ctx.r3.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826aadc8
	if (!ctx.cr6.eq) goto loc_826AADC8;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_826AADC8:
	// bl 0x82352d70
	ctx.lr = 0x826AADCC;
	sub_82352D70(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aae38
	if (ctx.cr6.eq) goto loc_826AAE38;
	// li r11,5
	ctx.r11.s64 = 5;
	// b 0x826aae34
	goto loc_826AAE34;
loc_826AADE0:
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// bne cr6,0x826aae38
	if (!ctx.cr6.eq) goto loc_826AAE38;
	// lwz r3,-8256(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -8256);
	// bl 0x8236db68
	ctx.lr = 0x826AADF0;
	sub_8236DB68(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aae38
	if (!ctx.cr6.eq) goto loc_826AAE38;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r9,8(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// lwz r8,16(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 16);
	// sth r26,46(r8)
	PPC_STORE_U16(ctx.r8.u32 + 46, ctx.r26.u16);
	// lwz r11,-29340(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -29340);
	// addi r3,r11,12
	ctx.r3.s64 = ctx.r11.s64 + 12;
	// bl 0x8268ee10
	ctx.lr = 0x826AAE28;
	sub_8268EE10(ctx, base);
	// li r3,42
	ctx.r3.s64 = 42;
	// bl 0x82216138
	ctx.lr = 0x826AAE30;
	sub_82216138(ctx, base);
	// li r11,6
	ctx.r11.s64 = 6;
loc_826AAE34:
	// stw r11,-29208(r29)
	PPC_STORE_U32(ctx.r29.u32 + -29208, ctx.r11.u32);
loc_826AAE38:
	// lis r31,-32111
	ctx.r31.s64 = -2104426496;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r30,r11,49648
	ctx.r30.u64 = ctx.r11.u64 | 49648;
	// lbz r10,-29348(r31)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r31.u32 + -29348);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826aae80
	if (ctx.cr6.eq) goto loc_826AAE80;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269cdc0
	ctx.lr = 0x826AAE58;
	sub_8269CDC0(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// lbz r4,-29348(r31)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r31.u32 + -29348);
	// bl 0x826b34f8
	ctx.lr = 0x826AAE68;
	sub_826B34F8(ctx, base);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// add r3,r28,r30
	ctx.r3.u64 = ctx.r28.u64 + ctx.r30.u64;
	// stb r11,-29348(r31)
	PPC_STORE_U8(ctx.r31.u32 + -29348, ctx.r11.u8);
	// lwz r11,52(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 52);
	// addi r4,r11,64
	ctx.r4.s64 = ctx.r11.s64 + 64;
	// bl 0x823934e8
	ctx.lr = 0x826AAE80;
	sub_823934E8(ctx, base);
loc_826AAE80:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826b4508
	ctx.lr = 0x826AAE88;
	sub_826B4508(ctx, base);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826990d8
	ctx.lr = 0x826AAE90;
	sub_826990D8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aaeb8
	if (ctx.cr6.eq) goto loc_826AAEB8;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// lwz r11,16(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// lhz r9,46(r11)
	ctx.r9.u64 = PPC_LOAD_U16(ctx.r11.u32 + 46);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826aaeb8
	if (ctx.cr6.eq) goto loc_826AAEB8;
	// sth r26,46(r11)
	PPC_STORE_U16(ctx.r11.u32 + 46, ctx.r26.u16);
loc_826AAEB8:
	// lwz r11,-29336(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29336);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x826aafe8
	if (!ctx.cr6.gt) goto loc_826AAFE8;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826aafe8
	if (ctx.cr6.eq) goto loc_826AAFE8;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826990d8
	ctx.lr = 0x826AAED8;
	sub_826990D8(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// lwz r11,-29336(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29336);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826aaf04
	if (ctx.cr6.eq) goto loc_826AAF04;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826aaf04
	if (!ctx.cr6.eq) goto loc_826AAF04;
	// li r3,42
	ctx.r3.s64 = 42;
	// bl 0x82216138
	ctx.lr = 0x826AAEF8;
	sub_82216138(ctx, base);
	// li r11,2
	ctx.r11.s64 = 2;
	// stw r11,-29336(r25)
	PPC_STORE_U32(ctx.r25.u32 + -29336, ctx.r11.u32);
	// b 0x826aaf0c
	goto loc_826AAF0C;
loc_826AAF04:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826aafe8
	if (!ctx.cr6.eq) goto loc_826AAFE8;
loc_826AAF0C:
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a8710
	ctx.lr = 0x826AAF14;
	sub_822A8710(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aafe8
	if (ctx.cr6.eq) goto loc_826AAFE8;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822a86e8
	ctx.lr = 0x826AAF28;
	sub_822A86E8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aafe8
	if (ctx.cr6.eq) goto loc_826AAFE8;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// add r3,r28,r30
	ctx.r3.u64 = ctx.r28.u64 + ctx.r30.u64;
	// lwz r10,8(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// lwz r9,16(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// sth r26,46(r9)
	PPC_STORE_U16(ctx.r9.u32 + 46, ctx.r26.u16);
	// lwz r11,52(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 52);
	// addi r4,r11,64
	ctx.r4.s64 = ctx.r11.s64 + 64;
	// bl 0x823934e8
	ctx.lr = 0x826AAF54;
	sub_823934E8(ctx, base);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// stw r11,-29336(r25)
	PPC_STORE_U32(ctx.r25.u32 + -29336, ctx.r11.u32);
	// lis r7,1
	ctx.r7.s64 = 65536;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// ori r5,r7,3600
	ctx.r5.u64 = ctx.r7.u64 | 3600;
	// addi r4,r6,-13336
	ctx.r4.s64 = ctx.r6.s64 + -13336;
	// lwz r11,-10028(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + -10028);
	// lwzx r3,r11,r5
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r5.u32);
	// bl 0x82696c88
	ctx.lr = 0x826AAF7C;
	sub_82696C88(ctx, base);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r28,12
	ctx.r3.s64 = ctx.r28.s64 + 12;
	// bl 0x8268ee10
	ctx.lr = 0x826AAF90;
	sub_8268EE10(ctx, base);
	// li r3,52
	ctx.r3.s64 = 52;
	// bl 0x82216138
	ctx.lr = 0x826AAF98;
	sub_82216138(ctx, base);
	// lbz r4,-29347(r24)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r24.u32 + -29347);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x826aafd0
	if (ctx.cr6.eq) goto loc_826AAFD0;
	// lwz r11,21680(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 21680);
	// lbz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 16);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826aafd0
	if (!ctx.cr6.eq) goto loc_826AAFD0;
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r3,r11,-16
	ctx.r3.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826aafcc
	if (!ctx.cr6.eq) goto loc_826AAFCC;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
loc_826AAFCC:
	// bl 0x823535e8
	ctx.lr = 0x826AAFD0;
	sub_823535E8(ctx, base);
loc_826AAFD0:
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// addis r3,r28,1
	ctx.r3.s64 = ctx.r28.s64 + 65536;
	// addi r3,r3,-15944
	ctx.r3.s64 = ctx.r3.s64 + -15944;
	// lwz r11,132(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// addi r4,r11,20
	ctx.r4.s64 = ctx.r11.s64 + 20;
	// bl 0x82397e88
	ctx.lr = 0x826AAFE8;
	sub_82397E88(ctx, base);
loc_826AAFE8:
	// lbz r11,-29347(r24)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r24.u32 + -29347);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826ab004
	if (!ctx.cr6.eq) goto loc_826AB004;
	// lwz r11,21680(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 21680);
	// lbz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 16);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// beq cr6,0x826ab058
	if (ctx.cr6.eq) goto loc_826AB058;
loc_826AB004:
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,17268(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 17268);
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x822a3d80
	ctx.lr = 0x826AB014;
	sub_822A3D80(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r3,880(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 880);
	// bl 0x822b1490
	ctx.lr = 0x826AB020;
	sub_822B1490(ctx, base);
	// lwz r11,48(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826ab058
	if (ctx.cr6.eq) goto loc_826AB058;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x826990d8
	ctx.lr = 0x826AB034;
	sub_826990D8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826ab058
	if (ctx.cr6.eq) goto loc_826AB058;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x822abca8
	ctx.lr = 0x826AB058;
	sub_822ABCA8(ctx, base);
loc_826AB058:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8269cdc0
	ctx.lr = 0x826AB060;
	sub_8269CDC0(ctx, base);
	// lwz r3,21680(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 21680);
	// bl 0x826b3048
	ctx.lr = 0x826AB068;
	sub_826B3048(ctx, base);
	// addi r1,r1,176
	ctx.r1.s64 = ctx.r1.s64 + 176;
	// b 0x823d9230
	__restgprlr_22(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AB070"))) PPC_WEAK_FUNC(sub_826AB070);
PPC_FUNC_IMPL(__imp__sub_826AB070) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826AB078;
	__savegprlr_29(ctx, base);
	// stfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -56, ctx.f29.u64);
	// stfd f30,-48(r1)
	PPC_STORE_U64(ctx.r1.u32 + -48, ctx.f30.u64);
	// stfd f31,-40(r1)
	PPC_STORE_U64(ctx.r1.u32 + -40, ctx.f31.u64);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r29,r11,8956
	ctx.r29.s64 = ctx.r11.s64 + 8956;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB0A4;
	sub_82663230(ctx, base);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r9,6
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 6, ctx.xer);
	// bne cr6,0x826ab0d0
	if (!ctx.cr6.eq) goto loc_826AB0D0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82255cf8
	ctx.lr = 0x826AB0BC;
	sub_82255CF8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826AB0D0:
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r30,r11,8972
	ctx.r30.s64 = ctx.r11.s64 + 8972;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB0E4;
	sub_82663230(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ab110
	if (!ctx.cr6.eq) goto loc_826AB110;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82255cf8
	ctx.lr = 0x826AB0FC;
	sub_82255CF8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826AB110:
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,8940
	ctx.r31.s64 = ctx.r11.s64 + 8940;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB124;
	sub_82663230(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ab150
	if (!ctx.cr6.eq) goto loc_826AB150;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82255cf8
	ctx.lr = 0x826AB13C;
	sub_82255CF8(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826AB150:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// bl 0x82663230
	ctx.lr = 0x826AB15C;
	sub_82663230(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x82663230
	ctx.lr = 0x826AB168;
	sub_82663230(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// bl 0x82663230
	ctx.lr = 0x826AB174;
	sub_82663230(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AB184;
	sub_822A3998(ctx, base);
	// bl 0x822a8108
	ctx.lr = 0x826AB188;
	sub_822A8108(ctx, base);
	// lis r10,-32249
	ctx.r10.s64 = -2113470464;
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r9,2
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 2, ctx.xer);
	// lfs f31,-3624(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -3624);
	ctx.f31.f64 = double(temp.f32);
	// fmr f30,f31
	ctx.f30.f64 = ctx.f31.f64;
	// fmr f29,f31
	ctx.f29.f64 = ctx.f31.f64;
	// bne cr6,0x826ab1e4
	if (!ctx.cr6.eq) goto loc_826AB1E4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lfs f13,52(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lfs f12,56(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	ctx.f12.f64 = double(temp.f32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lfs f11,48(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,-23720(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -23720);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 - ctx.f0.f64));
	// lfs f0,-23724(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -23724);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f0.f64));
	// lfs f0,-23728(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -23728);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 - ctx.f0.f64));
	// fmuls f7,f10,f10
	ctx.f7.f64 = double(float(ctx.f10.f64 * ctx.f10.f64));
	// fmadds f6,f9,f9,f7
	ctx.f6.f64 = double(float(ctx.f9.f64 * ctx.f9.f64 + ctx.f7.f64));
	// fmadds f5,f8,f8,f6
	ctx.f5.f64 = double(float(ctx.f8.f64 * ctx.f8.f64 + ctx.f6.f64));
	// fsqrts f31,f5
	ctx.f31.f64 = double(float(sqrt(ctx.f5.f64)));
loc_826AB1E4:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826ab230
	if (!ctx.cr6.eq) goto loc_826AB230;
	// lis r11,-32249
	ctx.r11.s64 = -2113470464;
	// lfs f13,52(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32248
	ctx.r10.s64 = -2113404928;
	// lfs f12,56(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	ctx.f12.f64 = double(temp.f32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lfs f11,48(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,-12524(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -12524);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 - ctx.f0.f64));
	// lfs f0,26200(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 26200);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f0.f64));
	// lfs f0,-23732(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -23732);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 - ctx.f0.f64));
	// fmuls f7,f10,f10
	ctx.f7.f64 = double(float(ctx.f10.f64 * ctx.f10.f64));
	// fmadds f6,f9,f9,f7
	ctx.f6.f64 = double(float(ctx.f9.f64 * ctx.f9.f64 + ctx.f7.f64));
	// fmadds f5,f8,f8,f6
	ctx.f5.f64 = double(float(ctx.f8.f64 * ctx.f8.f64 + ctx.f6.f64));
	// fsqrts f30,f5
	ctx.f30.f64 = double(float(sqrt(ctx.f5.f64)));
loc_826AB230:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826ab27c
	if (!ctx.cr6.eq) goto loc_826AB27C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lfs f13,52(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	ctx.f13.f64 = double(temp.f32);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lfs f12,56(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	ctx.f12.f64 = double(temp.f32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lfs f11,48(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	ctx.f11.f64 = double(temp.f32);
	// lfs f0,-23736(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -23736);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f10,f13,f0
	ctx.f10.f64 = double(float(ctx.f13.f64 - ctx.f0.f64));
	// lfs f0,-23740(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -23740);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f9,f12,f0
	ctx.f9.f64 = double(float(ctx.f12.f64 - ctx.f0.f64));
	// lfs f0,-23744(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -23744);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f8,f11,f0
	ctx.f8.f64 = double(float(ctx.f11.f64 - ctx.f0.f64));
	// fmuls f7,f10,f10
	ctx.f7.f64 = double(float(ctx.f10.f64 * ctx.f10.f64));
	// fmadds f6,f9,f9,f7
	ctx.f6.f64 = double(float(ctx.f9.f64 * ctx.f9.f64 + ctx.f7.f64));
	// fmadds f5,f8,f8,f6
	ctx.f5.f64 = double(float(ctx.f8.f64 * ctx.f8.f64 + ctx.f6.f64));
	// fsqrts f29,f5
	ctx.f29.f64 = double(float(sqrt(ctx.f5.f64)));
loc_826AB27C:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23772
	ctx.r3.s64 = ctx.r11.s64 + -23772;
	// bl 0x82130000
	ctx.lr = 0x826AB294;
	sub_82130000(ctx, base);
	// fmr f1,f30
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f30.f64;
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-23796
	ctx.r3.s64 = ctx.r10.s64 + -23796;
	// bl 0x82130000
	ctx.lr = 0x826AB2AC;
	sub_82130000(ctx, base);
	// fmr f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f29.f64;
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-23816
	ctx.r3.s64 = ctx.r9.s64 + -23816;
	// bl 0x82130000
	ctx.lr = 0x826AB2C4;
	sub_82130000(ctx, base);
	// fcmpu cr6,f31,f30
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f31.f64, ctx.f30.f64);
	// bge cr6,0x826ab2dc
	if (!ctx.cr6.lt) goto loc_826AB2DC;
	// fcmpu cr6,f31,f29
	ctx.cr6.compare(ctx.f31.f64, ctx.f29.f64);
	// bge cr6,0x826ab2dc
	if (!ctx.cr6.lt) goto loc_826AB2DC;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// b 0x826ab2f4
	goto loc_826AB2F4;
loc_826AB2DC:
	// fcmpu cr6,f30,f31
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f30.f64, ctx.f31.f64);
	// bge cr6,0x826ab2f0
	if (!ctx.cr6.lt) goto loc_826AB2F0;
	// fcmpu cr6,f30,f29
	ctx.cr6.compare(ctx.f30.f64, ctx.f29.f64);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// blt cr6,0x826ab2f4
	if (ctx.cr6.lt) goto loc_826AB2F4;
loc_826AB2F0:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_826AB2F4:
	// li r4,4
	ctx.r4.s64 = 4;
	// bl 0x82255cf8
	ctx.lr = 0x826AB2FC;
	sub_82255CF8(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// addi r3,r11,-1304
	ctx.r3.s64 = ctx.r11.s64 + -1304;
	// bl 0x821fa230
	ctx.lr = 0x826AB308;
	sub_821FA230(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r9,108(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 108);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AB31C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r8,0(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r7,96(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 96);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826AB334;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r6,0(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r5,64(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 64);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x826AB34C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// lfd f29,-56(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -56);
	// lfd f30,-48(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -48);
	// lfd f31,-40(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -40);
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AB360"))) PPC_WEAK_FUNC(sub_826AB360);
PPC_FUNC_IMPL(__imp__sub_826AB360) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r10,-23716
	ctx.r4.s64 = ctx.r10.s64 + -23716;
	// lwz r3,-24180(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -24180);
	// bl 0x821fd980
	ctx.lr = 0x826AB388;
	sub_821FD980(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r9,4
	ctx.r9.s64 = 4;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// li r5,4
	ctx.r5.s64 = 4;
	// addi r4,r8,32684
	ctx.r4.s64 = ctx.r8.s64 + 32684;
	// stw r9,88(r31)
	PPC_STORE_U32(ctx.r31.u32 + 88, ctx.r9.u32);
	// addi r3,r31,92
	ctx.r3.s64 = ctx.r31.s64 + 92;
	// bl 0x823dc018
	ctx.lr = 0x826AB3A8;
	sub_823DC018(ctx, base);
	// li r7,3
	ctx.r7.s64 = 3;
	// stw r7,156(r31)
	PPC_STORE_U32(ctx.r31.u32 + 156, ctx.r7.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AB3C4"))) PPC_WEAK_FUNC(sub_826AB3C4);
PPC_FUNC_IMPL(__imp__sub_826AB3C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826AB3C8"))) PPC_WEAK_FUNC(sub_826AB3C8);
PPC_FUNC_IMPL(__imp__sub_826AB3C8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826AB3D0;
	__savegprlr_29(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,8972
	ctx.r31.s64 = ctx.r11.s64 + 8972;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB3E8;
	sub_82663230(ctx, base);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,84
	ctx.r4.s64 = ctx.r1.s64 + 84;
	// addi r30,r11,8956
	ctx.r30.s64 = ctx.r11.s64 + 8956;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB3FC;
	sub_82663230(ctx, base);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,88
	ctx.r4.s64 = ctx.r1.s64 + 88;
	// addi r29,r11,8940
	ctx.r29.s64 = ctx.r11.s64 + 8940;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB410;
	sub_82663230(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ab428
	if (!ctx.cr6.eq) goto loc_826AB428;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82255cf8
	ctx.lr = 0x826AB428;
	sub_82255CF8(ctx, base);
loc_826AB428:
	// lwz r11,84(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ab440
	if (!ctx.cr6.eq) goto loc_826AB440;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82255cf8
	ctx.lr = 0x826AB440;
	sub_82255CF8(ctx, base);
loc_826AB440:
	// lwz r11,88(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ab458
	if (!ctx.cr6.eq) goto loc_826AB458;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82255cf8
	ctx.lr = 0x826AB458;
	sub_82255CF8(ctx, base);
loc_826AB458:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AB460"))) PPC_WEAK_FUNC(sub_826AB460);
PPC_FUNC_IMPL(__imp__sub_826AB460) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826AB478;
	sub_82387B90(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,1344(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1344);
	// bl 0x8269dfe0
	ctx.lr = 0x826AB488;
	sub_8269DFE0(ctx, base);
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// li r10,0
	ctx.r10.s64 = 0;
	// addi r31,r11,8956
	ctx.r31.s64 = ctx.r11.s64 + 8956;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// stw r10,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r10.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB4A4;
	sub_82663230(ctx, base);
	// lwz r9,80(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r9,6
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 6, ctx.xer);
	// beq cr6,0x826ab4f0
	if (ctx.cr6.eq) goto loc_826AB4F0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,8972
	ctx.r31.s64 = ctx.r11.s64 + 8972;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB4C4;
	sub_82663230(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// beq cr6,0x826ab4f0
	if (ctx.cr6.eq) goto loc_826AB4F0;
	// lis r11,-32246
	ctx.r11.s64 = -2113273856;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r31,r11,8940
	ctx.r31.s64 = ctx.r11.s64 + 8940;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82663230
	ctx.lr = 0x826AB4E4;
	sub_82663230(ctx, base);
	// lwz r11,80(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ab4fc
	if (!ctx.cr6.eq) goto loc_826AB4FC;
loc_826AB4F0:
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82255cf8
	ctx.lr = 0x826AB4FC;
	sub_82255CF8(ctx, base);
loc_826AB4FC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AB510"))) PPC_WEAK_FUNC(sub_826AB510);
PPC_FUNC_IMPL(__imp__sub_826AB510) {
	PPC_FUNC_PROLOGUE();
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r3,-29340(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// b 0x826ab070
	sub_826AB070(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AB51C"))) PPC_WEAK_FUNC(sub_826AB51C);
PPC_FUNC_IMPL(__imp__sub_826AB51C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826AB520"))) PPC_WEAK_FUNC(sub_826AB520);
PPC_FUNC_IMPL(__imp__sub_826AB520) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e4
	ctx.lr = 0x826AB528;
	__savegprlr_23(ctx, base);
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823db9d8
	ctx.lr = 0x826AB530;
	sub_823DB9D8(ctx, base);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r25,-32121
	ctx.r25.s64 = -2105081856;
	// lis r26,-32121
	ctx.r26.s64 = -2105081856;
	// mr r23,r4
	ctx.r23.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,-10236(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// mr r29,r6
	ctx.r29.u64 = ctx.r6.u64;
	// lwz r27,52(r11)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// bl 0x822a3998
	ctx.lr = 0x826AB560;
	sub_822A3998(ctx, base);
	// lhz r11,2(r30)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r30.u32 + 2);
	// lwz r28,48(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// extsh r11,r11
	ctx.r11.s64 = ctx.r11.s16;
	// cmplwi cr6,r11,188
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 188, ctx.xer);
	// bgt cr6,0x826abc88
	if (ctx.cr6.gt) goto loc_826ABC88;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,-19060
	ctx.r12.s64 = ctx.r12.s64 + -19060;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826ABC7C;
	case 1:
		goto loc_826AB880;
	case 2:
		goto loc_826AB8B4;
	case 3:
		goto loc_826AB8E8;
	case 4:
		goto loc_826AB904;
	case 5:
		goto loc_826AE1A4;
	case 6:
		goto loc_826AE268;
	case 7:
		goto loc_826AE334;
	case 8:
		goto loc_826AB924;
	case 9:
		goto loc_826AB940;
	case 10:
		goto loc_826AB95C;
	case 11:
		goto loc_826ADDAC;
	case 12:
		goto loc_826AB9CC;
	case 13:
		goto loc_826AB9E8;
	case 14:
		goto loc_826ABA20;
	case 15:
		goto loc_826ABC7C;
	case 16:
		goto loc_826ABA3C;
	case 17:
		goto loc_826ABA68;
	case 18:
		goto loc_826ABAB4;
	case 19:
		goto loc_826ABAE8;
	case 20:
		goto loc_826ABB14;
	case 21:
		goto loc_826ABB30;
	case 22:
		goto loc_826ABB4C;
	case 23:
		goto loc_826ABB68;
	case 24:
		goto loc_826ABB84;
	case 25:
		goto loc_826ABBA0;
	case 26:
		goto loc_826ABBBC;
	case 27:
		goto loc_826ABBD8;
	case 28:
		goto loc_826ABBF4;
	case 29:
		goto loc_826ABC10;
	case 30:
		goto loc_826ABC70;
	case 31:
		goto loc_826ABC9C;
	case 32:
		goto loc_826AC378;
	case 33:
		goto loc_826AC394;
	case 34:
		goto loc_826AC3B0;
	case 35:
		goto loc_826ACB20;
	case 36:
		goto loc_826ADCC0;
	case 37:
		goto loc_826ABCB8;
	case 38:
		goto loc_826ABDA4;
	case 39:
		goto loc_826ABDD8;
	case 40:
		goto loc_826AC360;
	case 41:
		goto loc_826AE470;
	case 42:
		goto loc_826AD7F4;
	case 43:
		goto loc_826ABE60;
	case 44:
		goto loc_826ABEE4;
	case 45:
		goto loc_826ABF2C;
	case 46:
		goto loc_826ABF74;
	case 47:
		goto loc_826AC2B0;
	case 48:
		goto loc_826AC2D0;
	case 49:
		goto loc_826AC318;
	case 50:
		goto loc_826AC280;
	case 51:
		goto loc_826AC22C;
	case 52:
		goto loc_826ADCDC;
	case 53:
		goto loc_826ABEC8;
	case 54:
		goto loc_826AB978;
	case 55:
		goto loc_826ABE90;
	case 56:
		goto loc_826AD970;
	case 57:
		goto loc_826AC154;
	case 58:
		goto loc_826AC1A8;
	case 59:
		goto loc_826AC1FC;
	case 60:
		goto loc_826AD8D4;
	case 61:
		goto loc_826AD8F0;
	case 62:
		goto loc_826AC3CC;
	case 63:
		goto loc_826AC3F8;
	case 64:
		goto loc_826AC418;
	case 65:
		goto loc_826ABC7C;
	case 66:
		goto loc_826AC940;
	case 67:
		goto loc_826AC970;
	case 68:
		goto loc_826AC9A0;
	case 69:
		goto loc_826AC9D0;
	case 70:
		goto loc_826ACA00;
	case 71:
		goto loc_826ACA38;
	case 72:
		goto loc_826ACA54;
	case 73:
		goto loc_826ADB94;
	case 74:
		goto loc_826ADBEC;
	case 75:
		goto loc_826ADC44;
	case 76:
		goto loc_826ACA74;
	case 77:
		goto loc_826ACA90;
	case 78:
		goto loc_826ACAF0;
	case 79:
		goto loc_826AD680;
	case 80:
		goto loc_826ACB54;
	case 81:
		goto loc_826ACB74;
	case 82:
		goto loc_826ABCF0;
	case 83:
		goto loc_826ABD2C;
	case 84:
		goto loc_826ABD68;
	case 85:
		goto loc_826AC448;
	case 86:
		goto loc_826AC8D4;
	case 87:
		goto loc_826ABE24;
	case 88:
		goto loc_826ACC1C;
	case 89:
		goto loc_826AC89C;
	case 90:
		goto loc_826AC480;
	case 91:
		goto loc_826AC6CC;
	case 92:
		goto loc_826AC6E8;
	case 93:
		goto loc_826AC7F8;
	case 94:
		goto loc_826ACF3C;
	case 95:
		goto loc_826ACF5C;
	case 96:
		goto loc_826AC7C0;
	case 97:
		goto loc_826AC7DC;
	case 98:
		goto loc_826AC748;
	case 99:
		goto loc_826AC784;
	case 100:
		goto loc_826AD01C;
	case 101:
		goto loc_826AD0B0;
	case 102:
		goto loc_826AC914;
	case 103:
		goto loc_826AC434;
	case 104:
		goto loc_826AC834;
	case 105:
		goto loc_826AC868;
	case 106:
		goto loc_826AC710;
	case 107:
		goto loc_826AC530;
	case 108:
		goto loc_826AC850;
	case 109:
		goto loc_826ACABC;
	case 110:
		goto loc_826AC684;
	case 111:
		goto loc_826AC63C;
	case 112:
		goto loc_826AC5E8;
	case 113:
		goto loc_826AC72C;
	case 114:
		goto loc_826AC49C;
	case 115:
		goto loc_826AC4CC;
	case 116:
		goto loc_826AC4FC;
	case 117:
		goto loc_826ACABC;
	case 118:
		goto loc_826ABEAC;
	case 119:
		goto loc_826ADD3C;
	case 120:
		goto loc_826AD64C;
	case 121:
		goto loc_826AD5F8;
	case 122:
		goto loc_826AD5E0;
	case 123:
		goto loc_826ACF98;
	case 124:
		goto loc_826ACF7C;
	case 125:
		goto loc_826ACFF0;
	case 126:
		goto loc_826AD86C;
	case 127:
		goto loc_826AD8B4;
	case 128:
		goto loc_826AD7BC;
	case 129:
		goto loc_826AD7D8;
	case 130:
		goto loc_826AD790;
	case 131:
		goto loc_826ACC3C;
	case 132:
		goto loc_826AE4CC;
	case 133:
		goto loc_826ACCA0;
	case 134:
		goto loc_826ACB94;
	case 135:
		goto loc_826ACC70;
	case 136:
		goto loc_826ACFC8;
	case 137:
		goto loc_826AE7C4;
	case 138:
		goto loc_826AD4E8;
	case 139:
		goto loc_826AD220;
	case 140:
		goto loc_826AE83C;
	case 141:
		goto loc_826AE864;
	case 142:
		goto loc_826AB994;
	case 143:
		goto loc_826ABC30;
	case 144:
		goto loc_826AB9B0;
	case 145:
		goto loc_826ABC50;
	case 146:
		goto loc_826AD920;
	case 147:
		goto loc_826AE214;
	case 148:
		goto loc_826AE894;
	case 149:
		goto loc_826AF89C;
	case 150:
		goto loc_826AF48C;
	case 151:
		goto loc_826AE93C;
	case 152:
		goto loc_826AE984;
	case 153:
		goto loc_826AE9C4;
	case 154:
		goto loc_826AEA28;
	case 155:
		goto loc_826AEA80;
	case 156:
		goto loc_826AC58C;
	case 157:
		goto loc_826ABFBC;
	case 158:
		goto loc_826ACEC8;
	case 159:
		goto loc_826ACCBC;
	case 160:
		goto loc_826AC248;
	case 161:
		goto loc_826AC264;
	case 162:
		goto loc_826AD1AC;
	case 163:
		goto loc_826AEEF0;
	case 164:
		goto loc_826AEDC0;
	case 165:
		goto loc_826AED80;
	case 166:
		goto loc_826AECB8;
	case 167:
		goto loc_826AF15C;
	case 168:
		goto loc_826AF180;
	case 169:
		goto loc_826AE53C;
	case 170:
		goto loc_826AE558;
	case 171:
		goto loc_826AE664;
	case 172:
		goto loc_826AE768;
	case 173:
		goto loc_826AF140;
	case 174:
		goto loc_826AE648;
	case 175:
		goto loc_826AE5C8;
	case 176:
		goto loc_826AC120;
	case 177:
		goto loc_826AC104;
	case 178:
		goto loc_826AE574;
	case 179:
		goto loc_826AD3A0;
	case 180:
		goto loc_826AF19C;
	case 181:
		goto loc_826AF1C0;
	case 182:
		goto loc_826AF1F4;
	case 183:
		goto loc_826AF218;
	case 184:
		goto loc_826AF27C;
	case 185:
		goto loc_826AF3E8;
	case 186:
		goto loc_826AF314;
	case 187:
		goto loc_826AF2B8;
	case 188:
		goto loc_826AF7D8;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-17284(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17284);
	// lwz r19,-18304(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18304);
	// lwz r19,-18252(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18252);
	// lwz r19,-18200(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18200);
	// lwz r19,-18172(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18172);
	// lwz r19,-7772(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -7772);
	// lwz r19,-7576(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -7576);
	// lwz r19,-7372(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -7372);
	// lwz r19,-18140(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18140);
	// lwz r19,-18112(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18112);
	// lwz r19,-18084(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18084);
	// lwz r19,-8788(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8788);
	// lwz r19,-17972(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17972);
	// lwz r19,-17944(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17944);
	// lwz r19,-17888(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17888);
	// lwz r19,-17284(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17284);
	// lwz r19,-17860(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17860);
	// lwz r19,-17816(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17816);
	// lwz r19,-17740(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17740);
	// lwz r19,-17688(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17688);
	// lwz r19,-17644(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17644);
	// lwz r19,-17616(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17616);
	// lwz r19,-17588(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17588);
	// lwz r19,-17560(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17560);
	// lwz r19,-17532(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17532);
	// lwz r19,-17504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17504);
	// lwz r19,-17476(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17476);
	// lwz r19,-17448(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17448);
	// lwz r19,-17420(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17420);
	// lwz r19,-17392(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17392);
	// lwz r19,-17296(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17296);
	// lwz r19,-17252(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17252);
	// lwz r19,-15496(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15496);
	// lwz r19,-15468(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15468);
	// lwz r19,-15440(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15440);
	// lwz r19,-13536(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13536);
	// lwz r19,-9024(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -9024);
	// lwz r19,-17224(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17224);
	// lwz r19,-16988(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16988);
	// lwz r19,-16936(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16936);
	// lwz r19,-15520(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15520);
	// lwz r19,-7056(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -7056);
	// lwz r19,-10252(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10252);
	// lwz r19,-16800(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16800);
	// lwz r19,-16668(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16668);
	// lwz r19,-16596(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16596);
	// lwz r19,-16524(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16524);
	// lwz r19,-15696(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15696);
	// lwz r19,-15664(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15664);
	// lwz r19,-15592(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15592);
	// lwz r19,-15744(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15744);
	// lwz r19,-15828(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15828);
	// lwz r19,-8996(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8996);
	// lwz r19,-16696(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16696);
	// lwz r19,-18056(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18056);
	// lwz r19,-16752(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16752);
	// lwz r19,-9872(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -9872);
	// lwz r19,-16044(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16044);
	// lwz r19,-15960(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15960);
	// lwz r19,-15876(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15876);
	// lwz r19,-10028(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10028);
	// lwz r19,-10000(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10000);
	// lwz r19,-15412(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15412);
	// lwz r19,-15368(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15368);
	// lwz r19,-15336(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15336);
	// lwz r19,-17284(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17284);
	// lwz r19,-14016(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14016);
	// lwz r19,-13968(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13968);
	// lwz r19,-13920(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13920);
	// lwz r19,-13872(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13872);
	// lwz r19,-13824(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13824);
	// lwz r19,-13768(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13768);
	// lwz r19,-13740(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13740);
	// lwz r19,-9324(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -9324);
	// lwz r19,-9236(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -9236);
	// lwz r19,-9148(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -9148);
	// lwz r19,-13708(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13708);
	// lwz r19,-13680(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13680);
	// lwz r19,-13584(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13584);
	// lwz r19,-10624(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10624);
	// lwz r19,-13484(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13484);
	// lwz r19,-13452(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13452);
	// lwz r19,-17168(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17168);
	// lwz r19,-17108(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17108);
	// lwz r19,-17048(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17048);
	// lwz r19,-15288(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15288);
	// lwz r19,-14124(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14124);
	// lwz r19,-16860(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16860);
	// lwz r19,-13284(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13284);
	// lwz r19,-14180(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14180);
	// lwz r19,-15232(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15232);
	// lwz r19,-14644(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14644);
	// lwz r19,-14616(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14616);
	// lwz r19,-14344(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14344);
	// lwz r19,-12484(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12484);
	// lwz r19,-12452(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12452);
	// lwz r19,-14400(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14400);
	// lwz r19,-14372(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14372);
	// lwz r19,-14520(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14520);
	// lwz r19,-14460(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14460);
	// lwz r19,-12260(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12260);
	// lwz r19,-12112(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12112);
	// lwz r19,-14060(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14060);
	// lwz r19,-15308(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15308);
	// lwz r19,-14284(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14284);
	// lwz r19,-14232(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14232);
	// lwz r19,-14576(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14576);
	// lwz r19,-15056(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15056);
	// lwz r19,-14256(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14256);
	// lwz r19,-13636(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13636);
	// lwz r19,-14716(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14716);
	// lwz r19,-14788(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14788);
	// lwz r19,-14872(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14872);
	// lwz r19,-14548(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14548);
	// lwz r19,-15204(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15204);
	// lwz r19,-15156(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15156);
	// lwz r19,-15108(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15108);
	// lwz r19,-13636(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13636);
	// lwz r19,-16724(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16724);
	// lwz r19,-8900(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -8900);
	// lwz r19,-10676(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10676);
	// lwz r19,-10760(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10760);
	// lwz r19,-10784(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10784);
	// lwz r19,-12392(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12392);
	// lwz r19,-12420(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12420);
	// lwz r19,-12304(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12304);
	// lwz r19,-10132(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10132);
	// lwz r19,-10060(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10060);
	// lwz r19,-10308(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10308);
	// lwz r19,-10280(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10280);
	// lwz r19,-10352(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10352);
	// lwz r19,-13252(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13252);
	// lwz r19,-6964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6964);
	// lwz r19,-13152(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13152);
	// lwz r19,-13420(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13420);
	// lwz r19,-13200(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13200);
	// lwz r19,-12344(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12344);
	// lwz r19,-6204(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6204);
	// lwz r19,-11032(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11032);
	// lwz r19,-11744(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11744);
	// lwz r19,-6084(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6084);
	// lwz r19,-6044(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6044);
	// lwz r19,-18028(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18028);
	// lwz r19,-17360(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17360);
	// lwz r19,-18000(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -18000);
	// lwz r19,-17328(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -17328);
	// lwz r19,-9952(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -9952);
	// lwz r19,-7660(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -7660);
	// lwz r19,-5996(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5996);
	// lwz r19,-1892(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -1892);
	// lwz r19,-2932(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -2932);
	// lwz r19,-5828(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5828);
	// lwz r19,-5756(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5756);
	// lwz r19,-5692(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5692);
	// lwz r19,-5592(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5592);
	// lwz r19,-5504(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -5504);
	// lwz r19,-14964(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -14964);
	// lwz r19,-16452(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16452);
	// lwz r19,-12600(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12600);
	// lwz r19,-13124(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -13124);
	// lwz r19,-15800(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15800);
	// lwz r19,-15772(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -15772);
	// lwz r19,-11860(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11860);
	// lwz r19,-4368(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4368);
	// lwz r19,-4672(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4672);
	// lwz r19,-4736(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4736);
	// lwz r19,-4936(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -4936);
	// lwz r19,-3748(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3748);
	// lwz r19,-3712(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3712);
	// lwz r19,-6852(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6852);
	// lwz r19,-6824(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6824);
	// lwz r19,-6556(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6556);
	// lwz r19,-6296(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6296);
	// lwz r19,-3776(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3776);
	// lwz r19,-6584(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6584);
	// lwz r19,-6712(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6712);
	// lwz r19,-16096(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16096);
	// lwz r19,-16124(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -16124);
	// lwz r19,-6796(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -6796);
	// lwz r19,-11360(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11360);
	// lwz r19,-3684(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3684);
	// lwz r19,-3648(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3648);
	// lwz r19,-3596(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3596);
	// lwz r19,-3560(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3560);
	// lwz r19,-3460(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3460);
	// lwz r19,-3096(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3096);
	// lwz r19,-3308(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3308);
	// lwz r19,-3400(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -3400);
	// lwz r19,-2088(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -2088);
loc_826AB880:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AB88C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826b34f8
	ctx.lr = 0x826AB8A0;
	sub_826B34F8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB8B0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB8B4:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AB8C0;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826b34f8
	ctx.lr = 0x826AB8D4;
	sub_826B34F8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB8E4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB8E8:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826b4a60
	ctx.lr = 0x826AB8F0;
	sub_826B4A60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB900;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB904:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a8d48
	ctx.lr = 0x826AB910;
	sub_826A8D48(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB920;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB924:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826b48f0
	ctx.lr = 0x826AB92C;
	sub_826B48F0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB93C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB940:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826aa2c8
	ctx.lr = 0x826AB948;
	sub_826AA2C8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB958;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB95C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269a758
	ctx.lr = 0x826AB964;
	sub_8269A758(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB974;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB978:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269a5f0
	ctx.lr = 0x826AB980;
	sub_8269A5F0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB990;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB994:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269a668
	ctx.lr = 0x826AB99C;
	sub_8269A668(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB9AC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB9B0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269a6e0
	ctx.lr = 0x826AB9B8;
	sub_8269A6E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB9C8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB9CC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a4eb0
	ctx.lr = 0x826AB9D4;
	sub_826A4EB0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AB9E4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AB9E8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AB9F4;
	sub_8268C9F0(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// ori r9,r11,39524
	ctx.r9.u64 = ctx.r11.u64 | 39524;
	// stwx r10,r3,r9
	PPC_STORE_U32(ctx.r3.u32 + ctx.r9.u32, ctx.r10.u32);
	// bl 0x8269ad68
	ctx.lr = 0x826ABA0C;
	sub_8269AD68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABA1C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABA20:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a7c58
	ctx.lr = 0x826ABA28;
	sub_826A7C58(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABA38;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABA3C:
	// lis r11,-32120
	ctx.r11.s64 = -2105016320;
	// lwz r3,-7572(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -7572);
	// bl 0x822f10d0
	ctx.lr = 0x826ABA48;
	sub_822F10D0(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r9,r10,39332
	ctx.r9.u64 = ctx.r10.u64 | 39332;
	// stfsx f1,r31,r9
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABA64;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABA68:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABA74;
	sub_8268C9F0(ctx, base);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f1,4(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	ctx.f1.f64 = double(temp.f32);
	// lfs f0,7444(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 7444);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f1,f0
	ctx.cr6.compare(ctx.f1.f64, ctx.f0.f64);
	// bgt cr6,0x826aba94
	if (ctx.cr6.gt) goto loc_826ABA94;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39332
	ctx.r10.u64 = ctx.r11.u64 | 39332;
	// lfsx f1,r31,r10
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	ctx.f1.f64 = double(temp.f32);
loc_826ABA94:
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f2,30712(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 30712);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x82304630
	ctx.lr = 0x826ABAA0;
	sub_82304630(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABAB0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABAB4:
	// lwz r3,32(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826ABAC8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269aaf8
	ctx.lr = 0x826ABAD4;
	sub_8269AAF8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABAE4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABAE8:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826ABAF4;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r3,84(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// bl 0x8233b4d8
	ctx.lr = 0x826ABB00;
	sub_8233B4D8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABB10;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABB14:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269aa40
	ctx.lr = 0x826ABB1C;
	sub_8269AA40(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABB2C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABB30:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826aa620
	ctx.lr = 0x826ABB38;
	sub_826AA620(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABB48;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABB4C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a78c8
	ctx.lr = 0x826ABB54;
	sub_826A78C8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABB64;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABB68:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699160
	ctx.lr = 0x826ABB70;
	sub_82699160(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABB80;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABB84:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826991f8
	ctx.lr = 0x826ABB8C;
	sub_826991F8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABB9C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABBA0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699290
	ctx.lr = 0x826ABBA8;
	sub_82699290(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABBB8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABBBC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699308
	ctx.lr = 0x826ABBC4;
	sub_82699308(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABBD4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABBD8:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699380
	ctx.lr = 0x826ABBE0;
	sub_82699380(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABBF0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABBF4:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699418
	ctx.lr = 0x826ABBFC;
	sub_82699418(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABC0C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABC10:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269e340
	ctx.lr = 0x826ABC1C;
	sub_8269E340(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABC2C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABC30:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269e278
	ctx.lr = 0x826ABC3C;
	sub_8269E278(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABC4C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABC50:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269e1b0
	ctx.lr = 0x826ABC5C;
	sub_8269E1B0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABC6C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABC70:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABC7C;
	sub_8268C9F0(ctx, base);
loc_826ABC7C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABC88;
	sub_8268C9F0(ctx, base);
loc_826ABC88:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABC98;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABC9C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a77d8
	ctx.lr = 0x826ABCA4;
	sub_826A77D8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABCB4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABCB8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABCC4;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x826a9d58
	ctx.lr = 0x826ABCE0;
	sub_826A9D58(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABCEC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABCF0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABCFC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x826a7170
	ctx.lr = 0x826ABD1C;
	sub_826A7170(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABD28;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABD2C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABD38;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x826a9c60
	ctx.lr = 0x826ABD54;
	sub_826A9C60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABD64;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABD68:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABD74;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x826a9a88
	ctx.lr = 0x826ABD90;
	sub_826A9A88(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABDA0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABDA4:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABDB0;
	sub_8268C9F0(ctx, base);
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// bl 0x8268c970
	ctx.lr = 0x826ABDB8;
	sub_8268C970(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a7708
	ctx.lr = 0x826ABDC4;
	sub_826A7708(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABDD4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABDD8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABDE4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,336(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 336);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826ABE04;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a4718
	ctx.lr = 0x826ABE10;
	sub_826A4718(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABE20;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABE24:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABE30;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r10,0
	ctx.r10.s64 = 0;
	// cntlzw r9,r11
	ctx.r9.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// ori r8,r10,39244
	ctx.r8.u64 = ctx.r10.u64 | 39244;
	// rlwinm r7,r9,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r3,0
	ctx.r3.s64 = 0;
	// xori r6,r7,1
	ctx.r6.u64 = ctx.r7.u64 ^ 1;
	// stbx r6,r31,r8
	PPC_STORE_U8(ctx.r31.u32 + ctx.r8.u32, ctx.r6.u8);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABE5C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABE60:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABE6C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8269c1c0
	ctx.lr = 0x826ABE7C;
	sub_8269C1C0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABE8C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABE90:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826ab070
	ctx.lr = 0x826ABE98;
	sub_826AB070(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABEA8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABEAC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826ab360
	ctx.lr = 0x826ABEB4;
	sub_826AB360(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABEC4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABEC8:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a49f8
	ctx.lr = 0x826ABED0;
	sub_826A49F8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABEE0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABEE4:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABEF0;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826ABF04;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x826a3be8
	ctx.lr = 0x826ABF18;
	sub_826A3BE8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABF28;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABF2C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABF38;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826ABF4C;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x826a4088
	ctx.lr = 0x826ABF60;
	sub_826A4088(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABF70;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABF74:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ABF80;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826ABF94;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x826a43d0
	ctx.lr = 0x826ABFA8;
	sub_826A43D0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ABFB8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ABFBC:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82387ba0
	ctx.lr = 0x826ABFC4;
	sub_82387BA0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r9,-32112
	ctx.r9.s64 = -2104492032;
	// rlwinm r10,r11,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r11,r9,21384
	ctx.r11.s64 = ctx.r9.s64 + 21384;
	// add r29,r10,r11
	ctx.r29.u64 = ctx.r10.u64 + ctx.r11.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8221cba0
	ctx.lr = 0x826ABFE0;
	sub_8221CBA0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	ctx.f31.f64 = ctx.f1.f64;
	// bl 0x8221cbf8
	ctx.lr = 0x826ABFEC;
	sub_8221CBF8(ctx, base);
	// lis r8,-32255
	ctx.r8.s64 = -2113863680;
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	ctx.f29.f64 = ctx.f1.f64;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lfs f30,-332(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -332);
	ctx.f30.f64 = double(temp.f32);
	// fmr f2,f30
	ctx.f2.f64 = ctx.f30.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826AC004;
	sub_8260C5C8(ctx, base);
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	ctx.f31.f64 = ctx.f1.f64;
	// fmr f1,f29
	ctx.f1.f64 = ctx.f29.f64;
	// fmr f2,f30
	ctx.f2.f64 = ctx.f30.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826AC014;
	sub_8260C5C8(ctx, base);
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// stfd f2,32(r1)
	PPC_STORE_U64(ctx.r1.u32 + 32, ctx.f2.u64);
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r5,32(r1)
	ctx.r5.u64 = PPC_LOAD_U64(ctx.r1.u32 + 32);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// fmr f30,f1
	ctx.f30.f64 = ctx.f1.f64;
	// addi r3,r7,-22932
	ctx.r3.s64 = ctx.r7.s64 + -22932;
	// bl 0x82130000
	ctx.lr = 0x826AC038;
	sub_82130000(ctx, base);
	// lis r6,-32256
	ctx.r6.s64 = -2113929216;
	// lis r5,-32252
	ctx.r5.s64 = -2113667072;
	// lfs f29,11360(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 11360);
	ctx.f29.f64 = double(temp.f32);
	// lfs f28,24576(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 24576);
	ctx.f28.f64 = double(temp.f32);
	// fcmpu cr6,f31,f29
	ctx.cr6.compare(ctx.f31.f64, ctx.f29.f64);
	// ble cr6,0x826ac064
	if (!ctx.cr6.gt) goto loc_826AC064;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC05C;
	sub_8268C9F0(ctx, base);
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x826ac07c
	goto loc_826AC07C;
loc_826AC064:
	// fcmpu cr6,f31,f28
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f31.f64, ctx.f28.f64);
	// bge cr6,0x826ac08c
	if (!ctx.cr6.lt) goto loc_826AC08C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC078;
	sub_8268C9F0(ctx, base);
	// li r5,-1
	ctx.r5.s64 = -1;
loc_826AC07C:
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a4088
	ctx.lr = 0x826AC08C;
	sub_826A4088(ctx, base);
loc_826AC08C:
	// fcmpu cr6,f30,f29
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f30.f64, ctx.f29.f64);
	// ble cr6,0x826ac0c8
	if (!ctx.cr6.gt) goto loc_826AC0C8;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC0A0;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,-1
	ctx.r5.s64 = -1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a43d0
	ctx.lr = 0x826AC0B4;
	sub_826A43D0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC0C4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC0C8:
	// fcmpu cr6,f30,f28
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f30.f64, ctx.f28.f64);
	// bge cr6,0x826abc88
	if (!ctx.cr6.lt) goto loc_826ABC88;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC0DC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a43d0
	ctx.lr = 0x826AC0F0;
	sub_826A43D0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC100;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC104:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826aa930
	ctx.lr = 0x826AC10C;
	sub_826AA930(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC11C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC120:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC12C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8269a290
	ctx.lr = 0x826AC140;
	sub_8269A290(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC150;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC154:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC160;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC174;
	sub_8268C9F0(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r8,0
	ctx.r8.s64 = 0;
	// addi r11,r31,-12
	ctx.r11.s64 = ctx.r31.s64 + -12;
	// ori r7,r10,57696
	ctx.r7.u64 = ctx.r10.u64 | 57696;
	// ori r6,r8,57692
	ctx.r6.u64 = ctx.r8.u64 | 57692;
	// li r3,0
	ctx.r3.s64 = 0;
	// stwx r9,r11,r7
	PPC_STORE_U32(ctx.r11.u32 + ctx.r7.u32, ctx.r9.u32);
	// stwx r30,r11,r6
	PPC_STORE_U32(ctx.r11.u32 + ctx.r6.u32, ctx.r30.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC1A4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC1A8:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC1B4;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC1C8;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lwz r9,76(r23)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r7,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// bl 0x826a6630
	ctx.lr = 0x826AC1E8;
	sub_826A6630(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC1F8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC1FC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC208;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a6680
	ctx.lr = 0x826AC218;
	sub_826A6680(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC228;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC22C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a1110
	ctx.lr = 0x826AC234;
	sub_826A1110(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC244;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC248:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a0da8
	ctx.lr = 0x826AC250;
	sub_826A0DA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC260;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC264:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a0b48
	ctx.lr = 0x826AC26C;
	sub_826A0B48(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC27C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC280:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC28C;
	sub_8268C9F0(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r9,r11,39344
	ctx.r9.u64 = ctx.r11.u64 | 39344;
	// stwx r10,r31,r9
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC2AC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC2B0:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699710
	ctx.lr = 0x826AC2BC;
	sub_82699710(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC2CC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC2D0:
	// addis r8,r27,4
	ctx.r8.s64 = ctx.r27.s64 + 262144;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r8,r8,976
	ctx.r8.s64 = ctx.r8.s64 + 976;
	// li r7,1
	ctx.r7.s64 = 1;
	// lfs f0,14988(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 14988);
	ctx.f0.f64 = double(temp.f32);
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f13,-15956(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -15956);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,31308(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 31308);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,808(r8)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + 808, temp.u32);
	// stb r7,803(r8)
	PPC_STORE_U8(ctx.r8.u32 + 803, ctx.r7.u8);
	// stfs f13,804(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + 804, temp.u32);
	// stfs f12,812(r8)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r8.u32 + 812, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC314;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC318:
	// addis r8,r27,4
	ctx.r8.s64 = ctx.r27.s64 + 262144;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addi r8,r8,976
	ctx.r8.s64 = ctx.r8.s64 + 976;
	// li r7,6
	ctx.r7.s64 = 6;
	// lfs f0,15000(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 15000);
	ctx.f0.f64 = double(temp.f32);
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f13,15004(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 15004);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,14884(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14884);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,808(r8)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + 808, temp.u32);
	// stb r7,803(r8)
	PPC_STORE_U8(ctx.r8.u32 + 803, ctx.r7.u8);
	// stfs f13,804(r8)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r8.u32 + 804, temp.u32);
	// stfs f12,812(r8)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r8.u32 + 812, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC35C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC360:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826aa598
	ctx.lr = 0x826AC368;
	sub_826AA598(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC374;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC378:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269f798
	ctx.lr = 0x826AC380;
	sub_8269F798(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC390;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC394:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269f728
	ctx.lr = 0x826AC39C;
	sub_8269F728(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC3AC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC3B0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269f6b8
	ctx.lr = 0x826AC3B8;
	sub_8269F6B8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC3C8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC3CC:
	// lis r11,0
	ctx.r11.s64 = 0;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// ori r10,r11,57684
	ctx.r10.u64 = ctx.r11.u64 | 57684;
	// lwzx r11,r31,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	// addi r4,r11,15
	ctx.r4.s64 = ctx.r11.s64 + 15;
	// bl 0x826b48e8
	ctx.lr = 0x826AC3E4;
	sub_826B48E8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC3F4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC3F8:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269cf68
	ctx.lr = 0x826AC404;
	sub_8269CF68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC414;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC418:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2f68
	ctx.lr = 0x826AC420;
	sub_826A2F68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC430;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC434:
	// lwz r3,21652(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 21652);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC444;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC448:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC454;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r10,0
	ctx.r10.s64 = 0;
	// cntlzw r9,r11
	ctx.r9.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// ori r8,r10,39216
	ctx.r8.u64 = ctx.r10.u64 | 39216;
	// rlwinm r7,r9,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stbx r7,r31,r8
	PPC_STORE_U8(ctx.r31.u32 + ctx.r8.u32, ctx.r7.u8);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC47C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC480:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a5528
	ctx.lr = 0x826AC488;
	sub_826A5528(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC498;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC49C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC4A8;
	sub_8268C9F0(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lbz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// ori r9,r11,39217
	ctx.r9.u64 = ctx.r11.u64 | 39217;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC4C8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC4CC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC4D8;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a33e0
	ctx.lr = 0x826AC4E8;
	sub_826A33E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC4F8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC4FC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC508;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a3280
	ctx.lr = 0x826AC51C;
	sub_826A3280(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC52C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC530:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC53C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r8,r10
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC55C;
	sub_8268C9F0(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r6,76(r23)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// rlwinm r11,r4,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r11,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r6.u32);
	// bl 0x826a53c8
	ctx.lr = 0x826AC57C;
	sub_826A53C8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC588;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC58C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC598;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r8,r10
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC5B8;
	sub_8268C9F0(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r6,76(r23)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// rlwinm r11,r4,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r11,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r6.u32);
	// bl 0x8269b9a8
	ctx.lr = 0x826AC5D8;
	sub_8269B9A8(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC5E4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC5E8:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC5F4;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC608;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lwz r9,76(r23)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r7,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// bl 0x82699c70
	ctx.lr = 0x826AC628;
	sub_82699C70(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC638;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC63C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC648;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC65C;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x82699900
	ctx.lr = 0x826AC670;
	sub_82699900(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC680;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC684:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC690;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lbz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U8(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AC6A4;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lbz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U8(ctx.r10.u32 + 4);
	// bl 0x82699978
	ctx.lr = 0x826AC6B8;
	sub_82699978(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC6C8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC6CC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269ec68
	ctx.lr = 0x826AC6D4;
	sub_8269EC68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC6E4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC6E8:
	// bl 0x82387b90
	ctx.lr = 0x826AC6EC;
	sub_82387B90(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,1344(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1344);
	// bl 0x8269dfe0
	ctx.lr = 0x826AC6FC;
	sub_8269DFE0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC70C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC710:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a13c8
	ctx.lr = 0x826AC718;
	sub_826A13C8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC728;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC72C:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a5078
	ctx.lr = 0x826AC738;
	sub_826A5078(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC744;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC748:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC754;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8269de60
	ctx.lr = 0x826AC770;
	sub_8269DE60(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC780;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC784:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC790;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8269df90
	ctx.lr = 0x826AC7AC;
	sub_8269DF90(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC7BC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC7C0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826ab3c8
	ctx.lr = 0x826AC7C8;
	sub_826AB3C8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC7D8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC7DC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826ab460
	ctx.lr = 0x826AC7E4;
	sub_826AB460(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC7F4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC7F8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC804;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x826a98e0
	ctx.lr = 0x826AC820;
	sub_826A98E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC830;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC834:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699e68
	ctx.lr = 0x826AC840;
	sub_82699E68(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC84C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC850:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826aa3c0
	ctx.lr = 0x826AC858;
	sub_826AA3C0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC864;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC868:
	// lis r10,0
	ctx.r10.s64 = 0;
	// addi r11,r31,-12
	ctx.r11.s64 = ctx.r31.s64 + -12;
	// ori r9,r10,39348
	ctx.r9.u64 = ctx.r10.u64 | 39348;
	// lwzx r8,r11,r9
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r9.u32);
	// mulli r10,r8,5764
	ctx.r10.s64 = ctx.r8.s64 * 5764;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// addi r3,r11,21856
	ctx.r3.s64 = ctx.r11.s64 + 21856;
	// bl 0x8269c960
	ctx.lr = 0x826AC888;
	sub_8269C960(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC898;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC89C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC8A8;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r8,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x826a6460
	ctx.lr = 0x826AC8C4;
	sub_826A6460(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC8D0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC8D4:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC8E0;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r31,r31,-12
	ctx.r31.s64 = ctx.r31.s64 + -12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a60f0
	ctx.lr = 0x826AC8F4;
	sub_826A60F0(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8269bfb8
	ctx.lr = 0x826AC900;
	sub_8269BFB8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC910;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC914:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC920;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a1570
	ctx.lr = 0x826AC930;
	sub_826A1570(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC93C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC940:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC94C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a38e8
	ctx.lr = 0x826AC95C;
	sub_826A38E8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC96C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC970:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC97C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a3780
	ctx.lr = 0x826AC98C;
	sub_826A3780(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC99C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC9A0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC9AC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a3958
	ctx.lr = 0x826AC9BC;
	sub_826A3958(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC9CC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AC9D0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AC9DC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8269bfb8
	ctx.lr = 0x826AC9EC;
	sub_8269BFB8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AC9FC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACA00:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2520
	ctx.lr = 0x826ACA08;
	sub_826A2520(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39336
	ctx.r10.u64 = ctx.r11.u64 | 39336;
	// lwzx r9,r31,r10
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	// cmpwi cr6,r9,-1
	ctx.cr6.compare<int32_t>(ctx.r9.s32, -1, ctx.xer);
	// bne cr6,0x826abc88
	if (!ctx.cr6.eq) goto loc_826ABC88;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-22948
	ctx.r3.s64 = ctx.r11.s64 + -22948;
	// bl 0x821fa230
	ctx.lr = 0x826ACA28;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACA34;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACA38:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2488
	ctx.lr = 0x826ACA40;
	sub_826A2488(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACA50;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACA54:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6818
	ctx.lr = 0x826ACA60;
	sub_826A6818(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACA70;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACA74:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6bb0
	ctx.lr = 0x826ACA7C;
	sub_826A6BB0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACA8C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACA90:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268f078
	ctx.lr = 0x826ACA98;
	sub_8268F078(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2180
	ctx.lr = 0x826ACAA8;
	sub_826A2180(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACAB8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACABC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACAC8;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82699a58
	ctx.lr = 0x826ACADC;
	sub_82699A58(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACAEC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACAF0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACAFC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a1de8
	ctx.lr = 0x826ACB0C;
	sub_826A1DE8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACB1C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACB20:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACB2C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a5ba8
	ctx.lr = 0x826ACB40;
	sub_826A5BA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACB50;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACB54:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a8640
	ctx.lr = 0x826ACB60;
	sub_826A8640(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACB70;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACB74:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a82f8
	ctx.lr = 0x826ACB80;
	sub_826A82F8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACB90;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACB94:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r28,0
	ctx.r28.s64 = 0;
	// addi r27,r10,-25044
	ctx.r27.s64 = ctx.r10.s64 + -25044;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r9,328(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826ACBB4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826ACBC0;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826acbcc
	if (ctx.cr6.eq) goto loc_826ACBCC;
	// lwz r28,4(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_826ACBCC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACBD8;
	sub_8268C9F0(ctx, base);
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r9,328(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// lwz r30,4(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826ACBF4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// bl 0x8269b1f0
	ctx.lr = 0x826ACC08;
	sub_8269B1F0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACC18;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACC1C:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6ff0
	ctx.lr = 0x826ACC28;
	sub_826A6FF0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACC38;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACC3C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACC48;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a09c8
	ctx.lr = 0x826ACC5C;
	sub_826A09C8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACC6C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACC70:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACC7C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8269cea8
	ctx.lr = 0x826ACC8C;
	sub_8269CEA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACC9C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACCA0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a08a8
	ctx.lr = 0x826ACCA8;
	sub_826A08A8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACCB8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACCBC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACCC8;
	sub_8268C9F0(ctx, base);
	// lis r10,-32129
	ctx.r10.s64 = -2105606144;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r8,r10,-26048
	ctx.r8.s64 = ctx.r10.s64 + -26048;
	// lwz r10,132(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lfs f0,3796(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// lfs f12,12(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 12);
	ctx.f12.f64 = double(temp.f32);
	// lfs f13,32680(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 32680);
	ctx.f13.f64 = double(temp.f32);
	// bne cr6,0x826acd1c
	if (!ctx.cr6.eq) goto loc_826ACD1C;
	// fsubs f13,f13,f12
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,-26540(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -26540);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACD18;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACD1C:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826acd4c
	if (!ctx.cr6.eq) goto loc_826ACD4C;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,17032(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 17032);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACD48;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACD4C:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826acd7c
	if (!ctx.cr6.eq) goto loc_826ACD7C;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,31308(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 31308);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACD78;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACD7C:
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x826acdac
	if (!ctx.cr6.eq) goto loc_826ACDAC;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,-332(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -332);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACDA8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACDAC:
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x826acddc
	if (!ctx.cr6.eq) goto loc_826ACDDC;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,-12084(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -12084);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACDD8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACDDC:
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// bne cr6,0x826ace0c
	if (!ctx.cr6.eq) goto loc_826ACE0C;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,14884(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 14884);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACE08;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACE0C:
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ace3c
	if (!ctx.cr6.eq) goto loc_826ACE3C;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,-6176(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -6176);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACE38;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACE3C:
	// cmpwi cr6,r11,7
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 7, ctx.xer);
	// bne cr6,0x826ace6c
	if (!ctx.cr6.eq) goto loc_826ACE6C;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,-17424(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -17424);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACE68;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACE6C:
	// cmpwi cr6,r11,8
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 8, ctx.xer);
	// bne cr6,0x826ace9c
	if (!ctx.cr6.eq) goto loc_826ACE9C;
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// li r3,0
	ctx.r3.s64 = 0;
	// lfs f0,-32032(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -32032);
	ctx.f0.f64 = double(temp.f32);
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACE98;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACE9C:
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// bne cr6,0x826acea8
	if (!ctx.cr6.eq) goto loc_826ACEA8;
	// fmr f0,f13
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = ctx.f13.f64;
loc_826ACEA8:
	// fsubs f13,f13,f12
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// li r3,0
	ctx.r3.s64 = 0;
	// fmadds f12,f13,f0,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64 + ctx.f12.f64));
	// stfs f12,364(r10)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r10.u32 + 364, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACEC4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACEC8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACED4;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r8,r9,27,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// xori r31,r8,1
	ctx.r31.u64 = ctx.r8.u64 ^ 1;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x826a50c8
	ctx.lr = 0x826ACEF4;
	sub_826A50C8(ctx, base);
	// clrlwi r7,r31,24
	ctx.r7.u64 = ctx.r31.u32 & 0xFF;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-22956
	ctx.r4.s64 = ctx.r10.s64 + -22956;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,-12440(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12440);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,48(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826ACF28;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACF38;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACF3C:
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// li r11,0
	ctx.r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,-29208(r10)
	PPC_STORE_U32(ctx.r10.u32 + -29208, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACF58;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACF5C:
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// li r11,1
	ctx.r11.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,-29208(r10)
	PPC_STORE_U32(ctx.r10.u32 + -29208, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACF78;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACF7C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699800
	ctx.lr = 0x826ACF84;
	sub_82699800(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACF94;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACF98:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826ACFA4;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r11,132(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// bl 0x82392960
	ctx.lr = 0x826ACFB4;
	sub_82392960(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACFC4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACFC8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ACFD4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ACFEC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ACFF0:
	// lis r10,0
	ctx.r10.s64 = 0;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// ori r9,r10,57684
	ctx.r9.u64 = ctx.r10.u64 | 57684;
	// lwz r3,-8256(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// lwzx r4,r31,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	// bl 0x8236e778
	ctx.lr = 0x826AD008;
	sub_8236E778(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD018;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD01C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD028;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r29,4(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AD03C;
	sub_8268C9F0(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r8,0
	ctx.r8.s64 = 0;
	// addi r30,r31,-12
	ctx.r30.s64 = ctx.r31.s64 + -12;
	// ori r7,r10,57696
	ctx.r7.u64 = ctx.r10.u64 | 57696;
	// ori r6,r8,57692
	ctx.r6.u64 = ctx.r8.u64 | 57692;
	// addis r28,r31,1
	ctx.r28.s64 = ctx.r31.s64 + 65536;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r28,r28,-7852
	ctx.r28.s64 = ctx.r28.s64 + -7852;
	// stwx r9,r30,r7
	PPC_STORE_U32(ctx.r30.u32 + ctx.r7.u32, ctx.r9.u32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stwx r29,r30,r6
	PPC_STORE_U32(ctx.r30.u32 + ctx.r6.u32, ctx.r29.u32);
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// addi r4,r11,15
	ctx.r4.s64 = ctx.r11.s64 + 15;
	// bl 0x826b34f8
	ctx.lr = 0x826AD078;
	sub_826B34F8(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a2f68
	ctx.lr = 0x826AD080;
	sub_826A2F68(ctx, base);
	// lis r5,0
	ctx.r5.s64 = 0;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// lwz r4,0(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// ori r11,r5,57680
	ctx.r11.u64 = ctx.r5.u64 | 57680;
	// addi r3,r3,-22992
	ctx.r3.s64 = ctx.r3.s64 + -22992;
	// lwzx r5,r31,r11
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// bl 0x82130000
	ctx.lr = 0x826AD09C;
	sub_82130000(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD0AC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD0B0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD0BC;
	sub_8268C9F0(ctx, base);
	// addis r10,r31,1
	ctx.r10.s64 = ctx.r31.s64 + 65536;
	// lis r7,0
	ctx.r7.s64 = 0;
	// lwz r8,4(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r10,r10,-7852
	ctx.r10.s64 = ctx.r10.s64 + -7852;
	// lis r9,0
	ctx.r9.s64 = 0;
	// ori r4,r7,57692
	ctx.r4.u64 = ctx.r7.u64 | 57692;
	// addi r11,r31,-12
	ctx.r11.s64 = ctx.r31.s64 + -12;
	// ori r6,r9,57696
	ctx.r6.u64 = ctx.r9.u64 | 57696;
	// lwz r5,0(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// lis r3,0
	ctx.r3.s64 = 0;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// ori r7,r3,57680
	ctx.r7.u64 = ctx.r3.u64 | 57680;
	// stwx r8,r11,r4
	PPC_STORE_U32(ctx.r11.u32 + ctx.r4.u32, ctx.r8.u32);
	// addi r3,r9,-22992
	ctx.r3.s64 = ctx.r9.s64 + -22992;
	// stwx r5,r11,r6
	PPC_STORE_U32(ctx.r11.u32 + ctx.r6.u32, ctx.r5.u32);
	// lwzx r5,r31,r7
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r7.u32);
	// lwz r4,0(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 0);
	// bl 0x82130000
	ctx.lr = 0x826AD104;
	sub_82130000(ctx, base);
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826AD110;
	sub_8268DCB0(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r5,16(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 16);
	// rlwinm r11,r5,0,28,26
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// stw r11,16(r6)
	PPC_STORE_U32(ctx.r6.u32 + 16, ctx.r11.u32);
	// bl 0x8268dcb0
	ctx.lr = 0x826AD12C;
	sub_8268DCB0(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// li r28,0
	ctx.r28.s64 = 0;
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// lwz r30,32(r29)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r8,0(r30)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r7,324(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 324);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826AD154;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826ad190
	if (ctx.cr6.eq) goto loc_826AD190;
loc_826AD15C:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r27,21660(r31)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r31.u32 + 21660);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826AD16C;
	sub_8268DCB0(ctx, base);
	// stw r27,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r27.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,324(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 324);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AD188;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplw cr6,r28,r3
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, ctx.r3.u32, ctx.xer);
	// blt cr6,0x826ad15c
	if (ctx.cr6.lt) goto loc_826AD15C;
loc_826AD190:
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r4,21660(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 21660);
	// bl 0x8268dcb0
	ctx.lr = 0x826AD19C;
	sub_8268DCB0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD1A8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD1AC:
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// ori r9,r10,57684
	ctx.r9.u64 = ctx.r10.u64 | 57684;
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// lwzx r4,r31,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	// bl 0x823931c0
	ctx.lr = 0x826AD1C4;
	sub_823931C0(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699798
	ctx.lr = 0x826AD1D0;
	sub_82699798(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-26864
	ctx.r3.s64 = ctx.r8.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826AD1DC;
	sub_821FA230(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r7,0(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// lwz r6,336(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 336);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826AD1F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpw cr6,r4,r30
	ctx.cr6.compare<int32_t>(ctx.r4.s32, ctx.r30.s32, ctx.xer);
	// bgt cr6,0x826ad204
	if (ctx.cr6.gt) goto loc_826AD204;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// bge cr6,0x826ad208
	if (!ctx.cr6.lt) goto loc_826AD208;
loc_826AD204:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
loc_826AD208:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826AD210;
	sub_8268DCB0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD21C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD220:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826AD22C;
	sub_821FA230(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-26608
	ctx.r4.s64 = ctx.r10.s64 + -26608;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AD240;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,113
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 113, ctx.xer);
	// bne cr6,0x826ad384
	if (!ctx.cr6.eq) goto loc_826AD384;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r10,328(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AD268;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AD280;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r3,6
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 6, ctx.xer);
	// bgt cr6,0x826abc88
	if (ctx.cr6.gt) goto loc_826ABC88;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,-11616
	ctx.r12.s64 = ctx.r12.s64 + -11616;
	// rlwinm r0,r3,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r3.u32 | (ctx.r3.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r3.u64) {
	case 0:
		goto loc_826AD2BC;
	case 1:
		goto loc_826AD2D4;
	case 2:
		goto loc_826AD2F0;
	case 3:
		goto loc_826AD30C;
	case 4:
		goto loc_826AD324;
	case 5:
		goto loc_826AD33C;
	case 6:
		goto loc_826AD360;
	default:
		__builtin_unreachable();
	}
	// lwz r19,-11588(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11588);
	// lwz r19,-11564(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11564);
	// lwz r19,-11536(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11536);
	// lwz r19,-11508(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11508);
	// lwz r19,-11484(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11484);
	// lwz r19,-11460(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11460);
	// lwz r19,-11424(r10)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r10.u32 + -11424);
loc_826AD2BC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2488
	ctx.lr = 0x826AD2C4;
	sub_826A2488(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD2D0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD2D4:
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6818
	ctx.lr = 0x826AD2E0;
	sub_826A6818(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD2EC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD2F0:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6818
	ctx.lr = 0x826AD2FC;
	sub_826A6818(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD308;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD30C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6ad0
	ctx.lr = 0x826AD314;
	sub_826A6AD0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD320;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD324:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a69d0
	ctx.lr = 0x826AD32C;
	sub_826A69D0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD338;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD33C:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a1b28
	ctx.lr = 0x826AD34C;
	sub_826A1B28(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD35C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD360:
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a1b28
	ctx.lr = 0x826AD370;
	sub_826A1B28(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD380;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD384:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23008
	ctx.r3.s64 = ctx.r11.s64 + -23008;
	// bl 0x821fa230
	ctx.lr = 0x826AD390;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD39C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD3A0:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826AD3AC;
	sub_821FA230(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-26608
	ctx.r4.s64 = ctx.r10.s64 + -26608;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AD3C0;
	sub_8268DA78(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lwz r11,4(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// cmpwi cr6,r11,113
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 113, ctx.xer);
	// bne cr6,0x826ad40c
	if (!ctx.cr6.eq) goto loc_826AD40C;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,128
	ctx.r4.s64 = 128;
	// lwz r3,-10028(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// bl 0x8220f040
	ctx.lr = 0x826AD3E8;
	sub_8220F040(ctx, base);
	// li r10,101
	ctx.r10.s64 = 101;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,4(r30)
	PPC_STORE_U32(ctx.r30.u32 + 4, ctx.r10.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r9,0(r30)
	PPC_STORE_U32(ctx.r30.u32 + 0, ctx.r9.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD408;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD40C:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AD418;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r11,132(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// bl 0x82392548
	ctx.lr = 0x826AD428;
	sub_82392548(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,57684
	ctx.r9.u64 = ctx.r10.u64 | 57684;
	// lwzx r11,r31,r9
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826ad458
	if (!ctx.cr6.eq) goto loc_826AD458;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26724
	ctx.r3.s64 = ctx.r11.s64 + -26724;
	// bl 0x821fa230
	ctx.lr = 0x826AD448;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD454;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD458:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826ad47c
	if (!ctx.cr6.eq) goto loc_826AD47C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26740
	ctx.r3.s64 = ctx.r11.s64 + -26740;
	// bl 0x821fa230
	ctx.lr = 0x826AD46C;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD478;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD47C:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826ad4a0
	if (!ctx.cr6.eq) goto loc_826AD4A0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26756
	ctx.r3.s64 = ctx.r11.s64 + -26756;
	// bl 0x821fa230
	ctx.lr = 0x826AD490;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD49C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD4A0:
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x826ad4c4
	if (!ctx.cr6.eq) goto loc_826AD4C4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26772
	ctx.r3.s64 = ctx.r11.s64 + -26772;
	// bl 0x821fa230
	ctx.lr = 0x826AD4B4;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD4C0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD4C4:
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x826abc88
	if (!ctx.cr6.eq) goto loc_826ABC88;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26788
	ctx.r3.s64 = ctx.r11.s64 + -26788;
	// bl 0x821fa230
	ctx.lr = 0x826AD4D8;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD4E4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD4E8:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-26864
	ctx.r3.s64 = ctx.r11.s64 + -26864;
	// bl 0x821fa230
	ctx.lr = 0x826AD4F4;
	sub_821FA230(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD504;
	sub_8268C9F0(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r4,r11,-26608
	ctx.r4.s64 = ctx.r11.s64 + -26608;
	// beq cr6,0x826ad564
	if (ctx.cr6.eq) goto loc_826AD564;
	// bl 0x8268da78
	ctx.lr = 0x826AD524;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,128
	ctx.r4.s64 = 128;
	// lwz r3,-10028(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// bl 0x8220f040
	ctx.lr = 0x826AD540;
	sub_8220F040(ctx, base);
	// li r10,101
	ctx.r10.s64 = 101;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r9,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r9.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD560;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD564:
	// bl 0x8268da78
	ctx.lr = 0x826AD568;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lwz r11,4(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 4);
	// cmpwi cr6,r11,113
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 113, ctx.xer);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r3,-10028(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// bne cr6,0x826ad5b4
	if (!ctx.cr6.eq) goto loc_826AD5B4;
	// li r4,128
	ctx.r4.s64 = 128;
	// bl 0x8220f040
	ctx.lr = 0x826AD590;
	sub_8220F040(ctx, base);
	// li r10,101
	ctx.r10.s64 = 101;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r9,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r9.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD5B0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD5B4:
	// li r4,149
	ctx.r4.s64 = 149;
	// bl 0x8220f040
	ctx.lr = 0x826AD5BC;
	sub_8220F040(ctx, base);
	// li r10,113
	ctx.r10.s64 = 113;
	// li r9,1
	ctx.r9.s64 = 1;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r9,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r9.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD5DC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD5E0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a1968
	ctx.lr = 0x826AD5E8;
	sub_826A1968(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD5F4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD5F8:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD604;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r8,r10
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8268c9f0
	ctx.lr = 0x826AD624;
	sub_8268C9F0(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// bl 0x826a1b28
	ctx.lr = 0x826AD638;
	sub_826A1B28(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD648;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD64C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AD660;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a1ca0
	ctx.lr = 0x826AD66C;
	sub_826A1CA0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD67C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD680:
	// addis r28,r31,1
	ctx.r28.s64 = ctx.r31.s64 + 65536;
	// lis r11,-32125
	ctx.r11.s64 = -2105344000;
	// addi r28,r28,-7880
	ctx.r28.s64 = ctx.r28.s64 + -7880;
	// addi r9,r11,-29192
	ctx.r9.s64 = ctx.r11.s64 + -29192;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r8,r10,57652
	ctx.r8.u64 = ctx.r10.u64 | 57652;
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// rlwinm r7,r11,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r6,r11,5421
	ctx.r6.s64 = ctx.r11.s64 + 5421;
	// rlwinm r5,r6,2,0,29
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r7,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// stwx r4,r5,r31
	PPC_STORE_U32(ctx.r5.u32 + ctx.r31.u32, ctx.r4.u32);
	// lwzx r3,r31,r8
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826ad6f0
	if (ctx.cr6.eq) goto loc_826AD6F0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-28660
	ctx.r4.s64 = ctx.r11.s64 + -28660;
	// bl 0x8268da78
	ctx.lr = 0x826AD6CC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826ad6f0
	if (ctx.cr6.eq) goto loc_826AD6F0;
	// lwz r11,0(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// li r10,1
	ctx.r10.s64 = 1;
	// addi r9,r11,5421
	ctx.r9.s64 = ctx.r11.s64 + 5421;
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r7,r8,r31
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r31.u32);
	// stw r10,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r10.u32);
	// stw r7,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r7.u32);
loc_826AD6F0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD6FC;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826ad728
	if (!ctx.cr6.eq) goto loc_826AD728;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699710
	ctx.lr = 0x826AD714;
	sub_82699710(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD724;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD728:
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826ad75c
	if (!ctx.cr6.eq) goto loc_826AD75C;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268f078
	ctx.lr = 0x826AD738;
	sub_8268F078(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2180
	ctx.lr = 0x826AD748;
	sub_826A2180(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD758;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD75C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD768;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82699a58
	ctx.lr = 0x826AD77C;
	sub_82699A58(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD78C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD790:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD79C;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a52c0
	ctx.lr = 0x826AD7AC;
	sub_826A52C0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD7B8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD7BC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269b658
	ctx.lr = 0x826AD7C4;
	sub_8269B658(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD7D4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD7D8:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a8550
	ctx.lr = 0x826AD7E0;
	sub_826A8550(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD7F0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD7F4:
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD800;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r29,4(r11)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AD814;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lwz r9,76(r23)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r8,4(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// rlwinm r7,r8,2,0,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r7,r9
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r9.u32);
	// bl 0x8268c9f0
	ctx.lr = 0x826AD834;
	sub_8268C9F0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r11,76(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r10,4(r4)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	// rlwinm r9,r10,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r9,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r11.u32);
	// bl 0x8269c0c0
	ctx.lr = 0x826AD858;
	sub_8269C0C0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD868;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD86C:
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-23016
	ctx.r4.s64 = ctx.r10.s64 + -23016;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,-12440(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12440);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,48(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826AD894;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6da8
	ctx.lr = 0x826AD8A0;
	sub_826A6DA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD8B0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD8B4:
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6da8
	ctx.lr = 0x826AD8C0;
	sub_826A6DA8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD8D0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD8D4:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699798
	ctx.lr = 0x826AD8DC;
	sub_82699798(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD8EC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD8F0:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AD8FC;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r11,132(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// addi r3,r11,64
	ctx.r3.s64 = ctx.r11.s64 + 64;
	// bl 0x82392548
	ctx.lr = 0x826AD90C;
	sub_82392548(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD91C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD920:
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lbz r10,2203(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 2203);
	// cmplwi cr6,r10,1
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 1, ctx.xer);
	// bne cr6,0x826af864
	if (!ctx.cr6.eq) goto loc_826AF864;
	// bl 0x8268c9f0
	ctx.lr = 0x826AD93C;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,80(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 80);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826AD95C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AD96C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AD970:
	// lis r29,-32115
	ctx.r29.s64 = -2104688640;
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x826ada10
	if (ctx.cr6.eq) goto loc_826ADA10;
	// lwz r11,76(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x826ad994
	if (!ctx.cr6.eq) goto loc_826AD994;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x826ad9a4
	goto loc_826AD9A4;
loc_826AD994:
	// lwz r11,-12120(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -12120);
	// mulli r10,r10,104
	ctx.r10.s64 = ctx.r10.s64 * 104;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x823960f8
	ctx.lr = 0x826AD9A4;
	sub_823960F8(ctx, base);
loc_826AD9A4:
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826ada10
	if (ctx.cr6.eq) goto loc_826ADA10;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r11,-23028
	ctx.r4.s64 = ctx.r11.s64 + -23028;
	// bl 0x82691650
	ctx.lr = 0x826AD9C0;
	sub_82691650(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AD9D0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r8,-23040
	ctx.r4.s64 = ctx.r8.s64 + -23040;
	// bl 0x82691650
	ctx.lr = 0x826AD9E0;
	sub_82691650(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,80(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 80);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826AD9F0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r5,-23052
	ctx.r4.s64 = ctx.r5.s64 + -23052;
	// bl 0x82691650
	ctx.lr = 0x826ADA00;
	sub_82691650(ctx, base);
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,80(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 80);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// b 0x826adb10
	goto loc_826ADB10;
loc_826ADA10:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r11,-23028
	ctx.r4.s64 = ctx.r11.s64 + -23028;
	// bl 0x82691650
	ctx.lr = 0x826ADA20;
	sub_82691650(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826ADA30;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r8,-23040
	ctx.r4.s64 = ctx.r8.s64 + -23040;
	// bl 0x82691650
	ctx.lr = 0x826ADA40;
	sub_82691650(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,84(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 84);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826ADA50;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// addi r4,r5,-23052
	ctx.r4.s64 = ctx.r5.s64 + -23052;
	// bl 0x82691650
	ctx.lr = 0x826ADA60;
	sub_82691650(ctx, base);
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,84(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 84);
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x826ADA70;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x826adae8
	if (ctx.cr6.eq) goto loc_826ADAE8;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82332098
	ctx.lr = 0x826ADA80;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826adac0
	if (!ctx.cr6.eq) goto loc_826ADAC0;
	// lwz r11,76(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r10,-1
	ctx.cr6.compare<int32_t>(ctx.r10.s32, -1, ctx.xer);
	// bne cr6,0x826adaa4
	if (!ctx.cr6.eq) goto loc_826ADAA4;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x826adab4
	goto loc_826ADAB4;
loc_826ADAA4:
	// lwz r11,-12120(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -12120);
	// mulli r10,r10,104
	ctx.r10.s64 = ctx.r10.s64 * 104;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x823960f8
	ctx.lr = 0x826ADAB4;
	sub_823960F8(ctx, base);
loc_826ADAB4:
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826adae8
	if (ctx.cr6.eq) goto loc_826ADAE8;
loc_826ADAC0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ADACC;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,80(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 80);
	// b 0x826adb0c
	goto loc_826ADB0C;
loc_826ADAE8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ADAF4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,84(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 84);
loc_826ADB0C:
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
loc_826ADB10:
	// bctrl 
	ctx.lr = 0x826ADB14;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,0
	ctx.r10.s64 = 0;
	// ori r9,r11,39216
	ctx.r9.u64 = ctx.r11.u64 | 39216;
	// addi r30,r31,-12
	ctx.r30.s64 = ctx.r31.s64 + -12;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// bl 0x826a7a28
	ctx.lr = 0x826ADB30;
	sub_826A7A28(ctx, base);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// lis r7,-32247
	ctx.r7.s64 = -2113339392;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// addi r5,r7,-14556
	ctx.r5.s64 = ctx.r7.s64 + -14556;
	// addi r4,r6,-21664
	ctx.r4.s64 = ctx.r6.s64 + -21664;
	// lwz r11,18508(r8)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r8.u32 + 18508);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826ADB54;
	sub_826A6140(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826ADB60;
	sub_822A3998(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// addi r3,r3,-15956
	ctx.r3.s64 = ctx.r3.s64 + -15956;
	// lwz r11,52(r5)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r5.u32 + 52);
	// addi r4,r11,20
	ctx.r4.s64 = ctx.r11.s64 + 20;
	// bl 0x82397e88
	ctx.lr = 0x826ADB78;
	sub_82397E88(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stb r4,21656(r31)
	PPC_STORE_U8(ctx.r31.u32 + 21656, ctx.r4.u8);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADB90;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADB94:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a6ad0
	ctx.lr = 0x826ADB9C;
	sub_826A6AD0(ctx, base);
	// lwz r11,12(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826adbb0
	if (!ctx.cr6.eq) goto loc_826ADBB0;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826ADBB0:
	// lwz r3,80(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 80);
	// lwz r31,1016(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1016);
	// bl 0x82360f90
	ctx.lr = 0x826ADBBC;
	sub_82360F90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r3,-8256(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// bl 0x8236d850
	ctx.lr = 0x826ADBD8;
	sub_8236D850(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADBE8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADBEC:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a69d0
	ctx.lr = 0x826ADBF4;
	sub_826A69D0(ctx, base);
	// lwz r11,12(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826adc08
	if (!ctx.cr6.eq) goto loc_826ADC08;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826ADC08:
	// lwz r3,80(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 80);
	// lwz r31,1016(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1016);
	// bl 0x82360f90
	ctx.lr = 0x826ADC14;
	sub_82360F90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r3,-8256(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// bl 0x8236d850
	ctx.lr = 0x826ADC30;
	sub_8236D850(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADC40;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADC44:
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r11,57680
	ctx.r9.u64 = ctx.r11.u64 | 57680;
	// ori r8,r10,57684
	ctx.r8.u64 = ctx.r10.u64 | 57684;
	// addi r30,r31,-12
	ctx.r30.s64 = ctx.r31.s64 + -12;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwzx r5,r31,r9
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	// lwzx r4,r31,r8
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	// bl 0x8269d660
	ctx.lr = 0x826ADC68;
	sub_8269D660(ctx, base);
	// lwz r11,12(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826adc7c
	if (!ctx.cr6.eq) goto loc_826ADC7C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826ADC7C:
	// lwz r3,80(r28)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + 80);
	// lwz r31,1016(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1016);
	// bl 0x82360f90
	ctx.lr = 0x826ADC88;
	sub_82360F90(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32119
	ctx.r11.s64 = -2104950784;
	// mr r6,r31
	ctx.r6.u64 = ctx.r31.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// lwz r5,20(r10)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r10.u32 + 20);
	// lwz r3,-8256(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -8256);
	// bl 0x8236d850
	ctx.lr = 0x826ADCA4;
	sub_8236D850(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826a2f68
	ctx.lr = 0x826ADCAC;
	sub_826A2F68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADCBC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADCC0:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a56e8
	ctx.lr = 0x826ADCC8;
	sub_826A56E8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADCD8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADCDC:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ADCE8;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r8,r10
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8268c9f0
	ctx.lr = 0x826ADD08;
	sub_8268C9F0(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r6,76(r23)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// rlwinm r11,r4,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r4,r11,r6
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r6.u32);
	// bl 0x82699588
	ctx.lr = 0x826ADD28;
	sub_82699588(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADD38;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADD3C:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// addi r31,r11,-21664
	ctx.r31.s64 = ctx.r11.s64 + -21664;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826ADD50;
	sub_821F9FB8(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,8
	ctx.r5.s64 = 8;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r10,-23068
	ctx.r4.s64 = ctx.r10.s64 + -23068;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADD64;
	sub_825EE0E0(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ADD70;
	sub_8268C9F0(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// lwz r31,4(r9)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// bl 0x821f9fb8
	ctx.lr = 0x826ADD84;
	sub_821F9FB8(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// addi r4,r8,-23084
	ctx.r4.s64 = ctx.r8.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADD98;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADDA8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADDAC:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ADDB8;
	sub_8268C9F0(ctx, base);
	// lis r29,-32111
	ctx.r29.s64 = -2104426496;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r28,r11,9572
	ctx.r28.s64 = ctx.r11.s64 + 9572;
	// li r4,80
	ctx.r4.s64 = 80;
	// lwz r11,-29340(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -29340);
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// addis r3,r11,1
	ctx.r3.s64 = ctx.r11.s64 + 65536;
	// lwz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// addi r3,r3,-26176
	ctx.r3.s64 = ctx.r3.s64 + -26176;
	// bl 0x82137a08
	ctx.lr = 0x826ADDE4;
	sub_82137A08(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826ADDF0;
	sub_8268C9F0(ctx, base);
	// lis r9,0
	ctx.r9.s64 = 0;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lwz r11,-29340(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -29340);
	// ori r31,r9,39440
	ctx.r31.u64 = ctx.r9.u64 | 39440;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// li r4,80
	ctx.r4.s64 = 80;
	// add r3,r11,r31
	ctx.r3.u64 = ctx.r11.u64 + ctx.r31.u64;
	// lwz r6,4(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// bl 0x82137a08
	ctx.lr = 0x826ADE14;
	sub_82137A08(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// addi r30,r11,-21664
	ctx.r30.s64 = ctx.r11.s64 + -21664;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// bl 0x821f9fb8
	ctx.lr = 0x826ADE28;
	sub_821F9FB8(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// li r5,8
	ctx.r5.s64 = 8;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r7,-23068
	ctx.r4.s64 = ctx.r7.s64 + -23068;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADE3C;
	sub_825EE0E0(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r10,r11,-23096
	ctx.r10.s64 = ctx.r11.s64 + -23096;
	// lwz r11,-29340(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -29340);
	// add r8,r11,r31
	ctx.r8.u64 = ctx.r11.u64 + ctx.r31.u64;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
loc_826ADE50:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826ade74
	if (ctx.cr6.eq) goto loc_826ADE74;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826ade50
	if (ctx.cr6.eq) goto loc_826ADE50;
loc_826ADE74:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826adeb0
	if (!ctx.cr6.eq) goto loc_826ADEB0;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826ADE88;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADE9C;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADEAC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADEB0:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-23108
	ctx.r10.s64 = ctx.r10.s64 + -23108;
loc_826ADEBC:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826adee0
	if (ctx.cr6.eq) goto loc_826ADEE0;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826adebc
	if (ctx.cr6.eq) goto loc_826ADEBC;
loc_826ADEE0:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826adf1c
	if (!ctx.cr6.eq) goto loc_826ADF1C;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826ADEF4;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADF08;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADF18;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADF1C:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-23124
	ctx.r10.s64 = ctx.r10.s64 + -23124;
loc_826ADF28:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826adf4c
	if (ctx.cr6.eq) goto loc_826ADF4C;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826adf28
	if (ctx.cr6.eq) goto loc_826ADF28;
loc_826ADF4C:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826adf88
	if (!ctx.cr6.eq) goto loc_826ADF88;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826ADF60;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,2
	ctx.r5.s64 = 2;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADF74;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADF84;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADF88:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-23136
	ctx.r10.s64 = ctx.r10.s64 + -23136;
loc_826ADF94:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826adfb8
	if (ctx.cr6.eq) goto loc_826ADFB8;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826adf94
	if (ctx.cr6.eq) goto loc_826ADF94;
loc_826ADFB8:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826adff4
	if (!ctx.cr6.eq) goto loc_826ADFF4;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826ADFCC;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,3
	ctx.r5.s64 = 3;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826ADFE0;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826ADFF0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826ADFF4:
	// lis r10,-32251
	ctx.r10.s64 = -2113601536;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-5480
	ctx.r10.s64 = ctx.r10.s64 + -5480;
loc_826AE000:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826ae024
	if (ctx.cr6.eq) goto loc_826AE024;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826ae000
	if (ctx.cr6.eq) goto loc_826AE000;
loc_826AE024:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826ae060
	if (!ctx.cr6.eq) goto loc_826AE060;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AE038;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,4
	ctx.r5.s64 = 4;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826AE04C;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE05C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE060:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-23152
	ctx.r10.s64 = ctx.r10.s64 + -23152;
loc_826AE06C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826ae090
	if (ctx.cr6.eq) goto loc_826AE090;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826ae06c
	if (ctx.cr6.eq) goto loc_826AE06C;
loc_826AE090:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826ae0cc
	if (!ctx.cr6.eq) goto loc_826AE0CC;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AE0A4;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,5
	ctx.r5.s64 = 5;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826AE0B8;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE0C8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE0CC:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-24328
	ctx.r10.s64 = ctx.r10.s64 + -24328;
loc_826AE0D8:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r7,0(r10)
	ctx.r7.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r7,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r7.s64;
	// beq cr6,0x826ae0fc
	if (ctx.cr6.eq) goto loc_826AE0FC;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826ae0d8
	if (ctx.cr6.eq) goto loc_826AE0D8;
loc_826AE0FC:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826ae138
	if (!ctx.cr6.eq) goto loc_826AE138;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AE110;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,6
	ctx.r5.s64 = 6;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826AE124;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE134;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE138:
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r11,r8
	ctx.r11.u64 = ctx.r8.u64;
	// addi r10,r10,-23160
	ctx.r10.s64 = ctx.r10.s64 + -23160;
loc_826AE144:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826ae168
	if (ctx.cr6.eq) goto loc_826AE168;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826ae144
	if (ctx.cr6.eq) goto loc_826AE144;
loc_826AE168:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826abc88
	if (!ctx.cr6.eq) goto loc_826ABC88;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826AE17C;
	sub_821F9FB8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,7
	ctx.r5.s64 = 7;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r11,-23084
	ctx.r4.s64 = ctx.r11.s64 + -23084;
	// bl 0x825ee0e0
	ctx.lr = 0x826AE190;
	sub_825EE0E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE1A0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE1A4:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a92e0
	ctx.lr = 0x826AE1B0;
	sub_826A92E0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826abc88
	if (ctx.cr6.eq) goto loc_826ABC88;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lis r10,0
	ctx.r10.s64 = 0;
	// li r4,148
	ctx.r4.s64 = 148;
	// ori r9,r10,39524
	ctx.r9.u64 = ctx.r10.u64 | 39524;
	// lwz r11,-29340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// lwzx r8,r11,r9
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r9.u32);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// cmpwi cr6,r8,1
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 1, ctx.xer);
	// lwz r3,-10028(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// beq cr6,0x826ae1e8
	if (ctx.cr6.eq) goto loc_826AE1E8;
	// li r4,101
	ctx.r4.s64 = 101;
loc_826AE1E8:
	// bl 0x8220f040
	ctx.lr = 0x826AE1EC;
	sub_8220F040(ctx, base);
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,304(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 304);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AE200;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE210;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE214:
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,39524
	ctx.r9.u64 = ctx.r10.u64 | 39524;
	// lwz r11,-29340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// lwzx r8,r11,r9
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r9.u32);
	// cmpwi cr6,r8,1
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 1, ctx.xer);
	// bne cr6,0x826abc88
	if (!ctx.cr6.eq) goto loc_826ABC88;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r3,r11,-15924
	ctx.r3.s64 = ctx.r11.s64 + -15924;
	// bl 0x821e6800
	ctx.lr = 0x826AE23C;
	sub_821E6800(ctx, base);
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r11,r11,64
	ctx.r11.s64 = ctx.r11.s64 + 64;
	// lbz r10,2136(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 2136);
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r8,r9,27,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// stb r8,2136(r11)
	PPC_STORE_U8(ctx.r11.u32 + 2136, ctx.r8.u8);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE264;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE268:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r10,328(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AE27C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-27236
	ctx.r4.s64 = ctx.r9.s64 + -27236;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AE290;
	sub_8268DA78(ctx, base);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r30,-32111
	ctx.r30.s64 = -2104426496;
	// lwz r7,4(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// ori r11,r8,39524
	ctx.r11.u64 = ctx.r8.u64 | 39524;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// mr r5,r11
	ctx.r5.u64 = ctx.r11.u64;
	// mr r4,r11
	ctx.r4.u64 = ctx.r11.u64;
	// lwz r11,-29340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29340);
	// addi r3,r6,-23196
	ctx.r3.s64 = ctx.r6.s64 + -23196;
	// stwx r7,r11,r5
	PPC_STORE_U32(ctx.r11.u32 + ctx.r5.u32, ctx.r7.u32);
	// lwz r11,-29340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29340);
	// lwzx r4,r11,r4
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r4.u32);
	// bl 0x82130000
	ctx.lr = 0x826AE2C4;
	sub_82130000(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r28,r11,-27248
	ctx.r28.s64 = ctx.r11.s64 + -27248;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AE2DC;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826ae318
	if (ctx.cr6.eq) goto loc_826AE318;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AE2F4;
	sub_8268DA78(ctx, base);
	// lwz r11,-29340(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29340);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// addis r3,r11,1
	ctx.r3.s64 = ctx.r11.s64 + 65536;
	// li r4,50
	ctx.r4.s64 = 50;
	// addi r5,r9,9572
	ctx.r5.s64 = ctx.r9.s64 + 9572;
	// addi r3,r3,-26008
	ctx.r3.s64 = ctx.r3.s64 + -26008;
	// lwz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x82137a08
	ctx.lr = 0x826AE318;
	sub_82137A08(ctx, base);
loc_826AE318:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269ad68
	ctx.lr = 0x826AE320;
	sub_8269AD68(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE330;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE334:
	// addis r30,r31,1
	ctx.r30.s64 = ctx.r31.s64 + 65536;
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// addi r30,r30,-26024
	ctx.r30.s64 = ctx.r30.s64 + -26024;
	// addi r28,r11,2652
	ctx.r28.s64 = ctx.r11.s64 + 2652;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// cmpwi cr6,r11,18
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 18, ctx.xer);
	// beq cr6,0x826ae3a8
	if (ctx.cr6.eq) goto loc_826AE3A8;
	// cmpwi cr6,r11,12
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 12, ctx.xer);
	// beq cr6,0x826ae360
	if (ctx.cr6.eq) goto loc_826AE360;
	// cmpwi cr6,r11,16
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 16, ctx.xer);
	// bne cr6,0x826ae3a8
	if (!ctx.cr6.eq) goto loc_826AE3A8;
loc_826AE360:
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// ori r9,r11,57972
	ctx.r9.u64 = ctx.r11.u64 | 57972;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// lwz r3,32(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + 32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,336(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 336);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826AE384;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lis r6,0
	ctx.r6.s64 = 0;
	// addi r5,r11,14443
	ctx.r5.s64 = ctx.r11.s64 + 14443;
	// ori r4,r6,57768
	ctx.r4.u64 = ctx.r6.u64 | 57768;
	// rlwinm r11,r5,2,0,29
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r5.u32 | (ctx.r5.u64 << 32), 2) & 0xFFFFFFFC;
	// li r10,11
	ctx.r10.s64 = 11;
	// stwx r3,r11,r31
	PPC_STORE_U32(ctx.r11.u32 + ctx.r31.u32, ctx.r3.u32);
	// stwx r10,r31,r4
	PPC_STORE_U32(ctx.r31.u32 + ctx.r4.u32, ctx.r10.u32);
	// b 0x826ae3ec
	goto loc_826AE3EC;
loc_826AE3A8:
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// ori r9,r11,57972
	ctx.r9.u64 = ctx.r11.u64 | 57972;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// bl 0x8268da78
	ctx.lr = 0x826AE3C8;
	sub_8268DA78(ctx, base);
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lwz r7,4(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r6,r11,14443
	ctx.r6.s64 = ctx.r11.s64 + 14443;
	// ori r5,r8,57768
	ctx.r5.u64 = ctx.r8.u64 | 57768;
	// rlwinm r4,r6,2,0,29
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 2) & 0xFFFFFFFC;
	// li r3,11
	ctx.r3.s64 = 11;
	// stwx r7,r4,r31
	PPC_STORE_U32(ctx.r4.u32 + ctx.r31.u32, ctx.r7.u32);
	// stwx r3,r31,r5
	PPC_STORE_U32(ctx.r31.u32 + ctx.r5.u32, ctx.r3.u32);
loc_826AE3EC:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AE3FC;
	sub_8268DA78(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// ori r8,r11,49428
	ctx.r8.u64 = ctx.r11.u64 | 49428;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-19624
	ctx.r4.s64 = ctx.r9.s64 + -19624;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stwx r10,r31,r8
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, ctx.r10.u32);
	// bl 0x8268da78
	ctx.lr = 0x826AE420;
	sub_8268DA78(ctx, base);
	// lis r7,0
	ctx.r7.s64 = 0;
	// lwz r6,4(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r5,-32125
	ctx.r5.s64 = -2105344000;
	// ori r3,r7,49424
	ctx.r3.u64 = ctx.r7.u64 | 49424;
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// addi r10,r5,-29032
	ctx.r10.s64 = ctx.r5.s64 + -29032;
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// li r4,128
	ctx.r4.s64 = 128;
	// stwx r6,r31,r3
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, ctx.r6.u32);
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// addi r5,r8,9572
	ctx.r5.s64 = ctx.r8.s64 + 9572;
	// addi r3,r3,-16104
	ctx.r3.s64 = ctx.r3.s64 + -16104;
	// lwzx r6,r9,r10
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// bl 0x82137a08
	ctx.lr = 0x826AE45C;
	sub_82137A08(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE46C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE470:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r11,-27236
	ctx.r4.s64 = ctx.r11.s64 + -27236;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8268da78
	ctx.lr = 0x826AE484;
	sub_8268DA78(ctx, base);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// lwz r8,4(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// ori r11,r10,39524
	ctx.r11.u64 = ctx.r10.u64 | 39524;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// mr r6,r11
	ctx.r6.u64 = ctx.r11.u64;
	// mr r5,r11
	ctx.r5.u64 = ctx.r11.u64;
	// lwz r11,-29340(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -29340);
	// addi r3,r7,-23196
	ctx.r3.s64 = ctx.r7.s64 + -23196;
	// stwx r8,r11,r6
	PPC_STORE_U32(ctx.r11.u32 + ctx.r6.u32, ctx.r8.u32);
	// lwz r11,-29340(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -29340);
	// lwzx r4,r11,r5
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r5.u32);
	// bl 0x82130000
	ctx.lr = 0x826AE4B8;
	sub_82130000(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE4C8;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE4CC:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r30,r31,-12
	ctx.r30.s64 = ctx.r31.s64 + -12;
	// li r6,-1
	ctx.r6.s64 = -1;
	// addi r5,r11,-27048
	ctx.r5.s64 = ctx.r11.s64 + -27048;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269ff90
	ctx.lr = 0x826AE4E8;
	sub_8269FF90(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r31,9
	ctx.r31.s64 = 9;
	// addi r29,r11,-23212
	ctx.r29.s64 = ctx.r11.s64 + -23212;
loc_826AE4F4:
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// addi r6,r31,-9
	ctx.r6.s64 = ctx.r31.s64 + -9;
	// li r4,32
	ctx.r4.s64 = 32;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82137a08
	ctx.lr = 0x826AE508;
	sub_82137A08(ctx, base);
	// li r6,-1
	ctx.r6.s64 = -1;
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8269ff90
	ctx.lr = 0x826AE51C;
	sub_8269FF90(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,14
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 14, ctx.xer);
	// ble cr6,0x826ae4f4
	if (!ctx.cr6.gt) goto loc_826AE4F4;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE538;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE53C:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a2268
	ctx.lr = 0x826AE544;
	sub_826A2268(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE554;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE558:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269e118
	ctx.lr = 0x826AE560;
	sub_8269E118(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE570;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE574:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE580;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r10,1
	ctx.r10.s64 = 1;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r9,r11,57764
	ctx.r9.u64 = ctx.r11.u64 | 57764;
	// beq cr6,0x826ae59c
	if (ctx.cr6.eq) goto loc_826AE59C;
	// li r10,0
	ctx.r10.s64 = 0;
loc_826AE59C:
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// lis r11,-32125
	ctx.r11.s64 = -2105344000;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,-29212(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29212);
	// bl 0x826b34f8
	ctx.lr = 0x826AE5B4;
	sub_826B34F8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE5C4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE5C8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE5D4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x826ae5ec
	if (!ctx.cr6.gt) goto loc_826AE5EC;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lfs f31,-3072(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -3072);
	ctx.f31.f64 = double(temp.f32);
	// b 0x826ae5f4
	goto loc_826AE5F4;
loc_826AE5EC:
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lfs f31,-3068(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -3068);
	ctx.f31.f64 = double(temp.f32);
loc_826AE5F4:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AE600;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lis r9,-32252
	ctx.r9.s64 = -2113667072;
	// li r3,0
	ctx.r3.s64 = 0;
	// lwz r8,124(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,-12084(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -12084);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,31932(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 31932);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,192(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 192);
	ctx.f12.f64 = double(temp.f32);
	// fadds f11,f31,f12
	ctx.f11.f64 = double(float(ctx.f31.f64 + ctx.f12.f64));
	// fsubs f10,f11,f0
	ctx.f10.f64 = double(float(ctx.f11.f64 - ctx.f0.f64));
	// fsel f9,f10,f11,f0
	ctx.f9.f64 = ctx.f10.f64 >= 0.0 ? ctx.f11.f64 : ctx.f0.f64;
	// fsubs f8,f9,f13
	ctx.f8.f64 = double(float(ctx.f9.f64 - ctx.f13.f64));
	// fsel f7,f8,f13,f9
	ctx.f7.f64 = ctx.f8.f64 >= 0.0 ? ctx.f13.f64 : ctx.f9.f64;
	// stfs f7,192(r8)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r8.u32 + 192, temp.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE644;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE648:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x8269e080
	ctx.lr = 0x826AE650;
	sub_8269E080(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE660;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE664:
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// addi r31,r11,64
	ctx.r31.s64 = ctx.r11.s64 + 64;
	// addi r10,r10,24484
	ctx.r10.s64 = ctx.r10.s64 + 24484;
	// addi r11,r11,8109
	ctx.r11.s64 = ctx.r11.s64 + 8109;
loc_826AE678:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826ae69c
	if (ctx.cr6.eq) goto loc_826AE69C;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826ae678
	if (ctx.cr6.eq) goto loc_826AE678;
loc_826AE69C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// addi r3,r11,-26184
	ctx.r3.s64 = ctx.r11.s64 + -26184;
	// bne cr6,0x826ae6d8
	if (!ctx.cr6.eq) goto loc_826AE6D8;
	// bl 0x821fa230
	ctx.lr = 0x826AE6B0;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AE6C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-23228
	ctx.r3.s64 = ctx.r8.s64 + -23228;
	// bl 0x821fa230
	ctx.lr = 0x826AE6CC;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,80(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 80);
	// b 0x826ae700
	goto loc_826AE700;
loc_826AE6D8:
	// bl 0x821fa230
	ctx.lr = 0x826AE6DC;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AE6EC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-23228
	ctx.r3.s64 = ctx.r8.s64 + -23228;
	// bl 0x821fa230
	ctx.lr = 0x826AE6F8;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,84(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 84);
loc_826AE700:
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826AE708;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE714;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// cntlzw r9,r10
	ctx.r9.u64 = ctx.r10.u32 == 0 ? 32 : __builtin_clz(ctx.r10.u32);
	// rlwinm r8,r9,27,31,31
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// xori r4,r8,1
	ctx.r4.u64 = ctx.r8.u64 ^ 1;
	// bl 0x82392558
	ctx.lr = 0x826AE730;
	sub_82392558(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826aed98
	if (ctx.cr6.eq) goto loc_826AED98;
loc_826AE740:
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE748;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE764;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE768:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82332098
	ctx.lr = 0x826AE770;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826ae79c
	if (ctx.cr6.eq) goto loc_826AE79C;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// addi r3,r11,-15540
	ctx.r3.s64 = ctx.r11.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AE788;
	sub_821E6800(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE798;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE79C:
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// addi r3,r11,-988
	ctx.r3.s64 = ctx.r11.s64 + -988;
	// bl 0x821e6800
	ctx.lr = 0x826AE7A8;
	sub_821E6800(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-26788
	ctx.r3.s64 = ctx.r10.s64 + -26788;
	// bl 0x821fa230
	ctx.lr = 0x826AE7B4;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE7C0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE7C4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AE7D8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826AE7E0;
	sub_82387B90(ctx, base);
	// mulli r11,r31,8176
	ctx.r11.s64 = ctx.r31.s64 * 8176;
	// add r11,r11,r3
	ctx.r11.u64 = ctx.r11.u64 + ctx.r3.u64;
	// addi r3,r11,1360
	ctx.r3.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238f1e8
	ctx.lr = 0x826AE7F0;
	sub_8238F1E8(ctx, base);
	// lis r9,-32115
	ctx.r9.s64 = -2104688640;
	// mulli r8,r3,104
	ctx.r8.s64 = ctx.r3.s64 * 104;
	// lwz r11,-12120(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -12120);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// li r4,64
	ctx.r4.s64 = 64;
	// lwzx r6,r8,r11
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r11.u32);
	// addi r5,r7,-23236
	ctx.r5.s64 = ctx.r7.s64 + -23236;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x82137a08
	ctx.lr = 0x826AE814;
	sub_82137A08(ctx, base);
	// lwz r11,-10236(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// addi r5,r1,96
	ctx.r5.s64 = ctx.r1.s64 + 96;
	// li r4,15
	ctx.r4.s64 = 15;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213b80
	ctx.lr = 0x826AE828;
	sub_82213B80(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE838;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE83C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE848;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,21660(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21660, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE860;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE864:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE870;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826a7d58
	ctx.lr = 0x826AE880;
	sub_826A7D58(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE890;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE894:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE8A0;
	sub_8268C9F0(ctx, base);
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// lwz r9,4(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,-29148(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -29148);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826ae8bc
	if (ctx.cr6.eq) goto loc_826AE8BC;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bne cr6,0x826ae8c4
	if (!ctx.cr6.eq) goto loc_826AE8C4;
loc_826AE8BC:
	// cmpwi cr6,r9,4
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 4, ctx.xer);
	// beq cr6,0x826ae920
	if (ctx.cr6.eq) goto loc_826AE920;
loc_826AE8C4:
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826ae8d4
	if (!ctx.cr6.eq) goto loc_826AE8D4;
	// cmpwi cr6,r9,2
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 2, ctx.xer);
	// b 0x826ae900
	goto loc_826AE900;
loc_826AE8D4:
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x826ae8e4
	if (ctx.cr6.eq) goto loc_826AE8E4;
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// bne cr6,0x826ae8ec
	if (!ctx.cr6.eq) goto loc_826AE8EC;
loc_826AE8E4:
	// cmpwi cr6,r9,6
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 6, ctx.xer);
	// beq cr6,0x826ae920
	if (ctx.cr6.eq) goto loc_826AE920;
loc_826AE8EC:
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// beq cr6,0x826ae8fc
	if (ctx.cr6.eq) goto loc_826AE8FC;
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// bne cr6,0x826ae904
	if (!ctx.cr6.eq) goto loc_826AE904;
loc_826AE8FC:
	// cmpwi cr6,r9,9
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 9, ctx.xer);
loc_826AE900:
	// beq cr6,0x826ae920
	if (ctx.cr6.eq) goto loc_826AE920;
loc_826AE904:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,-29148(r10)
	PPC_STORE_U32(ctx.r10.u32 + -29148, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE91C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE920:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,-29148(r10)
	PPC_STORE_U32(ctx.r10.u32 + -29148, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE938;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE93C:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lwz r3,-10236(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// addi r4,r11,-21664
	ctx.r4.s64 = ctx.r11.s64 + -21664;
	// bl 0x821f9fb8
	ctx.lr = 0x826AE94C;
	sub_821F9FB8(ctx, base);
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// li r5,42
	ctx.r5.s64 = 42;
	// lwz r3,56(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// addi r4,r10,-13268
	ctx.r4.s64 = ctx.r10.s64 + -13268;
	// bl 0x825ee0e0
	ctx.lr = 0x826AE960;
	sub_825EE0E0(ctx, base);
	// lis r9,0
	ctx.r9.s64 = 0;
	// li r8,0
	ctx.r8.s64 = 0;
	// ori r7,r9,57756
	ctx.r7.u64 = ctx.r9.u64 | 57756;
	// li r3,0
	ctx.r3.s64 = 0;
	// stwx r8,r31,r7
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, ctx.r8.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE980;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE984:
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-23244
	ctx.r4.s64 = ctx.r10.s64 + -23244;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,-12440(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12440);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,48(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826AE9AC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826aa6b0
	ctx.lr = 0x826AE9B4;
	sub_826AA6B0(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AE9C0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AE9C4:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AE9D0;
	sub_8268C9F0(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// ori r9,r11,39336
	ctx.r9.u64 = ctx.r11.u64 | 39336;
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// lis r11,0
	ctx.r11.s64 = 0;
	// stwx r10,r31,r9
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u32);
	// blt cr6,0x826aea08
	if (ctx.cr6.lt) goto loc_826AEA08;
	// ori r10,r11,39340
	ctx.r10.u64 = ctx.r11.u64 | 39340;
	// li r3,0
	ctx.r3.s64 = 0;
	// stwx r29,r31,r10
	PPC_STORE_U32(ctx.r31.u32 + ctx.r10.u32, ctx.r29.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEA04;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEA08:
	// ori r9,r11,39340
	ctx.r9.u64 = ctx.r11.u64 | 39340;
	// li r10,0
	ctx.r10.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stwx r10,r31,r9
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEA24;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEA28:
	// bl 0x82387b90
	ctx.lr = 0x826AEA2C;
	sub_82387B90(ctx, base);
	// lwz r11,1340(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1340);
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// bgt cr6,0x826aea54
	if (ctx.cr6.gt) goto loc_826AEA54;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23264
	ctx.r3.s64 = ctx.r11.s64 + -23264;
	// bl 0x821fa230
	ctx.lr = 0x826AEA44;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEA50;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEA54:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AEA60;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEA7C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEA80:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r3,-10020(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10020);
	// bl 0x826bce48
	ctx.lr = 0x826AEA8C;
	sub_826BCE48(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826aeabc
	if (!ctx.cr6.eq) goto loc_826AEABC;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aeabc
	if (!ctx.cr6.eq) goto loc_826AEABC;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23284
	ctx.r3.s64 = ctx.r11.s64 + -23284;
	// bl 0x821fa230
	ctx.lr = 0x826AEAB0;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r9,r10,16
	ctx.r9.u64 = ctx.r10.u64 | 16;
	// b 0x826aead0
	goto loc_826AEAD0;
loc_826AEABC:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23284
	ctx.r3.s64 = ctx.r11.s64 + -23284;
	// bl 0x821fa230
	ctx.lr = 0x826AEAC8;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
loc_826AEAD0:
	// lis r10,-32115
	ctx.r10.s64 = -2104688640;
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// lis r11,-32129
	ctx.r11.s64 = -2105606144;
	// lis r8,-32252
	ctx.r8.s64 = -2113667072;
	// addi r9,r11,-28304
	ctx.r9.s64 = ctx.r11.s64 + -28304;
	// li r29,1
	ctx.r29.s64 = 1;
	// lwz r3,-12440(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12440);
	// addi r4,r8,-18024
	ctx.r4.s64 = ctx.r8.s64 + -18024;
	// li r27,1
	ctx.r27.s64 = 1;
	// li r26,1
	ctx.r26.s64 = 1;
	// lwz r11,4(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// rlwinm r7,r11,0,29,29
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// subfic r11,r7,0
	ctx.xer.ca = ctx.r7.u32 <= 0;
	ctx.r11.s64 = 0 - ctx.r7.s64;
	// li r5,2
	ctx.r5.s64 = 2;
	// subfe r10,r11,r11
	temp.u8 = (~ctx.r11.u32 + ctx.r11.u32 < ~ctx.r11.u32) | (~ctx.r11.u32 + ctx.r11.u32 + ctx.xer.ca < ctx.xer.ca);
	ctx.r10.u64 = ~ctx.r11.u64 + ctx.r11.u64 + ctx.xer.ca;
	ctx.xer.ca = temp.u8;
	// clrlwi r30,r10,31
	ctx.r30.u64 = ctx.r10.u32 & 0x1;
	// lwz r9,76(r6)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r6.u32 + 76);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AEB20;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cntlzw r8,r3
	ctx.r8.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// rlwinm r7,r8,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 27) & 0x1;
	// xori r6,r7,1
	ctx.r6.u64 = ctx.r7.u64 ^ 1;
	// or r30,r6,r30
	ctx.r30.u64 = ctx.r6.u64 | ctx.r30.u64;
	// bl 0x82332098
	ctx.lr = 0x826AEB38;
	sub_82332098(ctx, base);
	// clrlwi r5,r3,24
	ctx.r5.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// beq cr6,0x826aeb48
	if (ctx.cr6.eq) goto loc_826AEB48;
	// li r30,0
	ctx.r30.s64 = 0;
loc_826AEB48:
	// lwz r11,76(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// bne cr6,0x826aeb60
	if (!ctx.cr6.eq) goto loc_826AEB60;
	// li r3,0
	ctx.r3.s64 = 0;
	// b 0x826aeb74
	goto loc_826AEB74;
loc_826AEB60:
	// lis r9,-32115
	ctx.r9.s64 = -2104688640;
	// mulli r10,r11,104
	ctx.r10.s64 = ctx.r11.s64 * 104;
	// lwz r11,-12120(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -12120);
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x823960f8
	ctx.lr = 0x826AEB74;
	sub_823960F8(ctx, base);
loc_826AEB74:
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826aeb90
	if (ctx.cr6.eq) goto loc_826AEB90;
	// li r30,0
	ctx.r30.s64 = 0;
	// li r29,0
	ctx.r29.s64 = 0;
	// li r27,0
	ctx.r27.s64 = 0;
	// li r26,0
	ctx.r26.s64 = 0;
loc_826AEB90:
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aebc0
	if (!ctx.cr6.eq) goto loc_826AEBC0;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aebc0
	if (!ctx.cr6.eq) goto loc_826AEBC0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23304
	ctx.r3.s64 = ctx.r11.s64 + -23304;
	// bl 0x821fa230
	ctx.lr = 0x826AEBB4;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r9,r10,16
	ctx.r9.u64 = ctx.r10.u64 | 16;
	// b 0x826aebd4
	goto loc_826AEBD4;
loc_826AEBC0:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23304
	ctx.r3.s64 = ctx.r11.s64 + -23304;
	// bl 0x821fa230
	ctx.lr = 0x826AEBCC;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
loc_826AEBD4:
	// clrlwi r11,r29,24
	ctx.r11.u64 = ctx.r29.u32 & 0xFF;
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23320
	ctx.r3.s64 = ctx.r11.s64 + -23320;
	// beq cr6,0x826aebfc
	if (ctx.cr6.eq) goto loc_826AEBFC;
	// bl 0x821fa230
	ctx.lr = 0x826AEBF0;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// b 0x826aec08
	goto loc_826AEC08;
loc_826AEBFC:
	// bl 0x821fa230
	ctx.lr = 0x826AEC00;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r9,r10,16
	ctx.r9.u64 = ctx.r10.u64 | 16;
loc_826AEC08:
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23336
	ctx.r3.s64 = ctx.r11.s64 + -23336;
	// beq cr6,0x826aec30
	if (ctx.cr6.eq) goto loc_826AEC30;
	// bl 0x821fa230
	ctx.lr = 0x826AEC24;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// b 0x826aec3c
	goto loc_826AEC3C;
loc_826AEC30:
	// bl 0x821fa230
	ctx.lr = 0x826AEC34;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r9,r10,16
	ctx.r9.u64 = ctx.r10.u64 | 16;
loc_826AEC3C:
	// clrlwi r11,r26,24
	ctx.r11.u64 = ctx.r26.u32 & 0xFF;
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23352
	ctx.r3.s64 = ctx.r11.s64 + -23352;
	// beq cr6,0x826aec64
	if (ctx.cr6.eq) goto loc_826AEC64;
	// bl 0x821fa230
	ctx.lr = 0x826AEC58;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// rlwinm r9,r10,0,28,26
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// b 0x826aec70
	goto loc_826AEC70;
loc_826AEC64:
	// bl 0x821fa230
	ctx.lr = 0x826AEC68;
	sub_821FA230(ctx, base);
	// lwz r10,16(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// ori r9,r10,16
	ctx.r9.u64 = ctx.r10.u64 | 16;
loc_826AEC70:
	// stw r9,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r9.u32);
	// addi r31,r31,-12
	ctx.r31.s64 = ctx.r31.s64 + -12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826AEC80;
	sub_826A7A28(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r5,r10,-14556
	ctx.r5.s64 = ctx.r10.s64 + -14556;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r11,18508(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826AECA4;
	sub_826A6140(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AECB4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AECB8:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AECC4;
	sub_822A3998(ctx, base);
	// lwz r3,52(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x8238f1e8
	ctx.lr = 0x826AECCC;
	sub_8238F1E8(ctx, base);
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// mulli r10,r3,104
	ctx.r10.s64 = ctx.r3.s64 * 104;
	// lwz r11,-12120(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12120);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// addi r5,r9,-25080
	ctx.r5.s64 = ctx.r9.s64 + -25080;
	// addi r4,r8,-21664
	ctx.r4.s64 = ctx.r8.s64 + -21664;
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// lwz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x826a6140
	ctx.lr = 0x826AECF8;
	sub_826A6140(ctx, base);
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// lis r7,-32251
	ctx.r7.s64 = -2113601536;
	// addi r3,r11,8109
	ctx.r3.s64 = ctx.r11.s64 + 8109;
	// addi r4,r7,-2716
	ctx.r4.s64 = ctx.r7.s64 + -2716;
	// bl 0x823d90b0
	ctx.lr = 0x826AED0C;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826aed40
	if (ctx.cr6.eq) goto loc_826AED40;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AED20;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AED3C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AED40:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82332098
	ctx.lr = 0x826AED48;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826ae740
	if (ctx.cr6.eq) goto loc_826AE740;
	// li r4,2
	ctx.r4.s64 = 2;
	// bl 0x8268c9f0
	ctx.lr = 0x826AED60;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AED7C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AED80:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x82332098
	ctx.lr = 0x826AED88;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826ae740
	if (ctx.cr6.eq) goto loc_826AE740;
loc_826AED98:
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8268c9f0
	ctx.lr = 0x826AEDA0;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEDBC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEDC0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AEDCC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x822a3998
	ctx.lr = 0x826AEDE0;
	sub_822A3998(ctx, base);
	// lwz r3,52(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x8238f1e8
	ctx.lr = 0x826AEDE8;
	sub_8238F1E8(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826AEDF0;
	sub_82387B90(ctx, base);
	// mulli r10,r29,84
	ctx.r10.s64 = ctx.r29.s64 * 84;
	// add r9,r3,r10
	ctx.r9.u64 = ctx.r3.u64 + ctx.r10.u64;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// addis r3,r9,4
	ctx.r3.s64 = ctx.r9.s64 + 262144;
	// addi r3,r3,-15504
	ctx.r3.s64 = ctx.r3.s64 + -15504;
	// bne cr6,0x826aee78
	if (!ctx.cr6.eq) goto loc_826AEE78;
	// li r6,1000
	ctx.r6.s64 = 1000;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x823900e0
	ctx.lr = 0x826AEE18;
	sub_823900E0(ctx, base);
	// li r11,3
	ctx.r11.s64 = 3;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// stw r11,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r11.u32);
	// li r4,1000
	ctx.r4.s64 = 1000;
	// lwz r3,18508(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// bl 0x826b94a8
	ctx.lr = 0x826AEE30;
	sub_826B94A8(ctx, base);
	// addi r31,r31,-12
	ctx.r31.s64 = ctx.r31.s64 + -12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826AEE3C;
	sub_826A7A28(ctx, base);
	// lwz r11,18508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r5,r10,-14556
	ctx.r5.s64 = ctx.r10.s64 + -14556;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826AEE5C;
	sub_826A6140(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-23368
	ctx.r3.s64 = ctx.r8.s64 + -23368;
	// bl 0x821fa230
	ctx.lr = 0x826AEE68;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEE74;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEE78:
	// cmpwi cr6,r30,1
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1, ctx.xer);
	// bne cr6,0x826abc88
	if (!ctx.cr6.eq) goto loc_826ABC88;
	// li r6,1000
	ctx.r6.s64 = 1000;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,6
	ctx.r4.s64 = 6;
	// bl 0x823900e0
	ctx.lr = 0x826AEE90;
	sub_823900E0(ctx, base);
	// li r11,4
	ctx.r11.s64 = 4;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// stw r11,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r11.u32);
	// li r4,1000
	ctx.r4.s64 = 1000;
	// lwz r3,18508(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// bl 0x826b94a8
	ctx.lr = 0x826AEEA8;
	sub_826B94A8(ctx, base);
	// addi r31,r31,-12
	ctx.r31.s64 = ctx.r31.s64 + -12;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a7a28
	ctx.lr = 0x826AEEB4;
	sub_826A7A28(ctx, base);
	// lwz r11,18508(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 18508);
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// addi r5,r10,-14556
	ctx.r5.s64 = ctx.r10.s64 + -14556;
	// addi r4,r9,-21664
	ctx.r4.s64 = ctx.r9.s64 + -21664;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826AEED4;
	sub_826A6140(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r3,r8,-23384
	ctx.r3.s64 = ctx.r8.s64 + -23384;
	// bl 0x821fa230
	ctx.lr = 0x826AEEE0;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AEEEC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AEEF0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AEEFC;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// lwz r30,4(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x822a3998
	ctx.lr = 0x826AEF10;
	sub_822A3998(ctx, base);
	// lwz r3,52(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// bl 0x8238f1e8
	ctx.lr = 0x826AEF18;
	sub_8238F1E8(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826AEF20;
	sub_82387B90(ctx, base);
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// mulli r9,r29,84
	ctx.r9.s64 = ctx.r29.s64 * 84;
	// lwz r11,18508(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 18508);
	// add r8,r3,r9
	ctx.r8.u64 = ctx.r3.u64 + ctx.r9.u64;
	// li r4,1000
	ctx.r4.s64 = 1000;
	// addis r29,r8,4
	ctx.r29.s64 = ctx.r8.s64 + 262144;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// addi r29,r29,-15504
	ctx.r29.s64 = ctx.r29.s64 + -15504;
	// bl 0x826b94e8
	ctx.lr = 0x826AEF44;
	sub_826B94E8(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// bne cr6,0x826af0a8
	if (!ctx.cr6.eq) goto loc_826AF0A8;
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// lbz r10,2203(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + 2203);
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// cmplwi cr6,r10,1
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 1, ctx.xer);
	// addi r3,r11,-5196
	ctx.r3.s64 = ctx.r11.s64 + -5196;
	// bne cr6,0x826aefb0
	if (!ctx.cr6.eq) goto loc_826AEFB0;
	// bl 0x821fa230
	ctx.lr = 0x826AEF6C;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,80(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 80);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AEF7C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32251
	ctx.r8.s64 = -2113601536;
	// addi r3,r8,-5172
	ctx.r3.s64 = ctx.r8.s64 + -5172;
	// bl 0x821fa230
	ctx.lr = 0x826AEF88;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,80(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 80);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826AEF98;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r5,-32251
	ctx.r5.s64 = -2113601536;
	// addi r3,r5,-5212
	ctx.r3.s64 = ctx.r5.s64 + -5212;
	// bl 0x821fa230
	ctx.lr = 0x826AEFA4;
	sub_821FA230(ctx, base);
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,80(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 80);
	// b 0x826aeff4
	goto loc_826AEFF4;
loc_826AEFB0:
	// bl 0x821fa230
	ctx.lr = 0x826AEFB4;
	sub_821FA230(ctx, base);
	// lwz r10,0(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r9,84(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 84);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AEFC4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32251
	ctx.r8.s64 = -2113601536;
	// addi r3,r8,-5172
	ctx.r3.s64 = ctx.r8.s64 + -5172;
	// bl 0x821fa230
	ctx.lr = 0x826AEFD0;
	sub_821FA230(ctx, base);
	// lwz r7,0(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r6,84(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 84);
	// mtctr r6
	ctx.ctr.u64 = ctx.r6.u64;
	// bctrl 
	ctx.lr = 0x826AEFE0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r5,-32251
	ctx.r5.s64 = -2113601536;
	// addi r3,r5,-5212
	ctx.r3.s64 = ctx.r5.s64 + -5212;
	// bl 0x821fa230
	ctx.lr = 0x826AEFEC;
	sub_821FA230(ctx, base);
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r11,84(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 84);
loc_826AEFF4:
	// mtctr r11
	ctx.ctr.u64 = ctx.r11.u64;
	// bctrl 
	ctx.lr = 0x826AEFFC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x823901c0
	ctx.lr = 0x826AF00C;
	sub_823901C0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af078
	if (!ctx.cr6.eq) goto loc_826AF078;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lbz r10,-29346(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29346);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826af078
	if (!ctx.cr6.eq) goto loc_826AF078;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af078
	if (!ctx.cr6.eq) goto loc_826AF078;
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af05c
	if (!ctx.cr6.eq) goto loc_826AF05C;
loc_826AF040:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23408
	ctx.r3.s64 = ctx.r11.s64 + -23408;
	// bl 0x821fa230
	ctx.lr = 0x826AF04C;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF058;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF05C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23428
	ctx.r3.s64 = ctx.r11.s64 + -23428;
	// bl 0x821fa230
	ctx.lr = 0x826AF068;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF074;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF078:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23452
	ctx.r3.s64 = ctx.r11.s64 + -23452;
	// bl 0x821e6800
	ctx.lr = 0x826AF084;
	sub_821E6800(ctx, base);
	// li r10,3
	ctx.r10.s64 = 3;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// stw r10,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r10.u32);
	// addi r3,r9,-23468
	ctx.r3.s64 = ctx.r9.s64 + -23468;
	// bl 0x821fa230
	ctx.lr = 0x826AF098;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF0A4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF0A8:
	// cmpwi cr6,r30,1
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1, ctx.xer);
	// bne cr6,0x826abc88
	if (!ctx.cr6.eq) goto loc_826ABC88;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x823901c0
	ctx.lr = 0x826AF0C0;
	sub_823901C0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af110
	if (!ctx.cr6.eq) goto loc_826AF110;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lbz r10,-29346(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29346);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826af110
	if (!ctx.cr6.eq) goto loc_826AF110;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af110
	if (!ctx.cr6.eq) goto loc_826AF110;
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af040
	if (ctx.cr6.eq) goto loc_826AF040;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23488
	ctx.r3.s64 = ctx.r11.s64 + -23488;
	// bl 0x821fa230
	ctx.lr = 0x826AF100;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF10C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF110:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23508
	ctx.r3.s64 = ctx.r11.s64 + -23508;
	// bl 0x821e6800
	ctx.lr = 0x826AF11C;
	sub_821E6800(ctx, base);
	// li r10,4
	ctx.r10.s64 = 4;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// stw r10,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r10.u32);
	// addi r3,r9,-23384
	ctx.r3.s64 = ctx.r9.s64 + -23384;
	// bl 0x821fa230
	ctx.lr = 0x826AF130;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF13C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF140:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826a1838
	ctx.lr = 0x826AF148;
	sub_826A1838(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF158;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF15C:
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// ori r9,r11,39508
	ctx.r9.u64 = ctx.r11.u64 | 39508;
	// li r3,0
	ctx.r3.s64 = 0;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF17C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF180:
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x826994b0
	ctx.lr = 0x826AF188;
	sub_826994B0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF198;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF19C:
	// lwz r11,-10236(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// li r4,8
	ctx.r4.s64 = 8;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213338
	ctx.lr = 0x826AF1AC;
	sub_82213338(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF1BC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF1C0:
	// li r31,0
	ctx.r31.s64 = 0;
loc_826AF1C4:
	// lwz r11,-10236(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// addi r4,r31,18
	ctx.r4.s64 = ctx.r31.s64 + 18;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213338
	ctx.lr = 0x826AF1D4;
	sub_82213338(ctx, base);
	// addi r31,r31,1
	ctx.r31.s64 = ctx.r31.s64 + 1;
	// cmpwi cr6,r31,26
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 26, ctx.xer);
	// blt cr6,0x826af1c4
	if (ctx.cr6.lt) goto loc_826AF1C4;
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF1F0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF1F4:
	// lwz r11,-10236(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10236);
	// li r4,15
	ctx.r4.s64 = 15;
	// lwz r3,56(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 56);
	// bl 0x82213338
	ctx.lr = 0x826AF204;
	sub_82213338(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF214;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF218:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r29,132(r28)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AF228;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r28,4(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826AF23C;
	sub_8268C9F0(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// addi r30,r29,20
	ctx.r30.s64 = ctx.r29.s64 + 20;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// lwz r6,4(r10)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// bl 0x82397f60
	ctx.lr = 0x826AF258;
	sub_82397F60(ctx, base);
	// addis r3,r31,1
	ctx.r3.s64 = ctx.r31.s64 + 65536;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r3,-15956
	ctx.r3.s64 = ctx.r3.s64 + -15956;
	// bl 0x82397e88
	ctx.lr = 0x826AF268;
	sub_82397E88(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF278;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF27C:
	// bl 0x82387b90
	ctx.lr = 0x826AF280;
	sub_82387B90(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AF290;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,4(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// clrlwi r4,r10,24
	ctx.r4.u64 = ctx.r10.u32 & 0xFF;
	// bl 0x8238c048
	ctx.lr = 0x826AF2A4;
	sub_8238C048(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF2B4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF2B8:
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,39524
	ctx.r9.u64 = ctx.r10.u64 | 39524;
	// lwz r11,-29340(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// lwzx r8,r11,r9
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r9.u32);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// cmpwi cr6,r8,1
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 1, ctx.xer);
	// lwz r3,-10028(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10028);
	// bne cr6,0x826af2f8
	if (!ctx.cr6.eq) goto loc_826AF2F8;
	// li r4,148
	ctx.r4.s64 = 148;
	// bl 0x8220f040
	ctx.lr = 0x826AF2E4;
	sub_8220F040(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF2F4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF2F8:
	// li r4,101
	ctx.r4.s64 = 101;
	// bl 0x8220f040
	ctx.lr = 0x826AF300;
	sub_8220F040(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF310;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF314:
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-23516
	ctx.r4.s64 = ctx.r10.s64 + -23516;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r3,-12440(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12440);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,48(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826AF33C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r3,r31,-12
	ctx.r3.s64 = ctx.r31.s64 + -12;
	// bl 0x82699888
	ctx.lr = 0x826AF344;
	sub_82699888(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// addi r3,r11,-26468
	ctx.r3.s64 = ctx.r11.s64 + -26468;
	// beq cr6,0x826af3a0
	if (ctx.cr6.eq) goto loc_826AF3A0;
	// bl 0x821fa230
	ctx.lr = 0x826AF35C;
	sub_821FA230(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-26492
	ctx.r3.s64 = ctx.r9.s64 + -26492;
	// lwz r8,16(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// rlwinm r7,r8,0,28,26
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// stw r7,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r7.u32);
	// bl 0x821fa230
	ctx.lr = 0x826AF378;
	sub_821FA230(ctx, base);
	// lwz r6,16(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// li r11,4
	ctx.r11.s64 = 4;
	// rlwinm r5,r6,0,28,26
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 0) & 0xFFFFFFFFFFFFFFEF;
	// stw r5,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r5.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF39C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF3A0:
	// bl 0x821fa230
	ctx.lr = 0x826AF3A4;
	sub_821FA230(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-26492
	ctx.r3.s64 = ctx.r9.s64 + -26492;
	// lwz r8,16(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 16);
	// ori r7,r8,16
	ctx.r7.u64 = ctx.r8.u64 | 16;
	// stw r7,16(r10)
	PPC_STORE_U32(ctx.r10.u32 + 16, ctx.r7.u32);
	// bl 0x821fa230
	ctx.lr = 0x826AF3C0;
	sub_821FA230(ctx, base);
	// lwz r6,16(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 16);
	// li r11,4
	ctx.r11.s64 = 4;
	// ori r5,r6,16
	ctx.r5.u64 = ctx.r6.u64 | 16;
	// stw r5,16(r3)
	PPC_STORE_U32(ctx.r3.u32 + 16, ctx.r5.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,21664(r31)
	PPC_STORE_U32(ctx.r31.u32 + 21664, ctx.r11.u32);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF3E4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF3E8:
	// bl 0x82387b90
	ctx.lr = 0x826AF3EC;
	sub_82387B90(ctx, base);
	// lwz r11,132(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 132);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// addi r31,r11,20
	ctx.r31.s64 = ctx.r11.s64 + 20;
	// li r5,1
	ctx.r5.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x82398018
	ctx.lr = 0x826AF408;
	sub_82398018(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,5
	ctx.r4.s64 = 5;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82398018
	ctx.lr = 0x826AF41C;
	sub_82398018(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lbz r31,1324(r30)
	ctx.r31.u64 = PPC_LOAD_U8(ctx.r30.u32 + 1324);
	// addi r3,r11,-23536
	ctx.r3.s64 = ctx.r11.s64 + -23536;
	// clrlwi r30,r10,24
	ctx.r30.u64 = ctx.r10.u32 & 0xFF;
	// bl 0x821fa230
	ctx.lr = 0x826AF434;
	sub_821FA230(ctx, base);
	// stw r30,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r30.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-23560
	ctx.r3.s64 = ctx.r9.s64 + -23560;
	// bl 0x821fa230
	ctx.lr = 0x826AF444;
	sub_821FA230(ctx, base);
	// clrlwi r8,r29,24
	ctx.r8.u64 = ctx.r29.u32 & 0xFF;
	// stw r31,12(r3)
	PPC_STORE_U32(ctx.r3.u32 + 12, ctx.r31.u32);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826af470
	if (ctx.cr6.eq) goto loc_826AF470;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23580
	ctx.r3.s64 = ctx.r11.s64 + -23580;
	// bl 0x821fa230
	ctx.lr = 0x826AF460;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF46C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF470:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-23600
	ctx.r3.s64 = ctx.r11.s64 + -23600;
	// bl 0x821fa230
	ctx.lr = 0x826AF47C;
	sub_821FA230(ctx, base);
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF488;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF48C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r28,r10,-28272
	ctx.r28.s64 = ctx.r10.s64 + -28272;
	// lwz r9,328(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF4A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826AF4B4;
	sub_8268DA78(ctx, base);
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x82396f58
	ctx.lr = 0x826AF4BC;
	sub_82396F58(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r3,r8,-23616
	ctx.r3.s64 = ctx.r8.s64 + -23616;
	// bl 0x821fa230
	ctx.lr = 0x826AF4CC;
	sub_821FA230(ctx, base);
	// lis r28,-32115
	ctx.r28.s64 = -2104688640;
	// mulli r27,r27,104
	ctx.r27.s64 = ctx.r27.s64 * 104;
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// add r3,r27,r11
	ctx.r3.u64 = ctx.r27.u64 + ctx.r11.u64;
	// bl 0x82396110
	ctx.lr = 0x826AF4E4;
	sub_82396110(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// lis r25,-32121
	ctx.r25.s64 = -2105081856;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826af558
	if (ctx.cr6.eq) goto loc_826AF558;
	// li r4,15
	ctx.r4.s64 = 15;
	// lwz r3,-10020(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AF500;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af558
	if (!ctx.cr6.eq) goto loc_826AF558;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af558
	if (!ctx.cr6.eq) goto loc_826AF558;
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF534;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r8,-23648
	ctx.r4.s64 = ctx.r8.s64 + -23648;
	// bl 0x82637dd8
	ctx.lr = 0x826AF544;
	sub_82637DD8(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF554;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF558:
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// add r3,r27,r11
	ctx.r3.u64 = ctx.r27.u64 + ctx.r11.u64;
	// bl 0x82396130
	ctx.lr = 0x826AF564;
	sub_82396130(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af5e0
	if (ctx.cr6.eq) goto loc_826AF5E0;
	// li r4,10
	ctx.r4.s64 = 10;
	// lwz r3,-10020(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AF57C;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af5e0
	if (!ctx.cr6.eq) goto loc_826AF5E0;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af5e0
	if (!ctx.cr6.eq) goto loc_826AF5E0;
loc_826AF594:
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF5B0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r8,-23648
	ctx.r4.s64 = ctx.r8.s64 + -23648;
	// bl 0x82637dd8
	ctx.lr = 0x826AF5C0;
	sub_82637DD8(ctx, base);
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r3,r7,-15540
	ctx.r3.s64 = ctx.r7.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AF5CC;
	sub_821E6800(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF5DC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF5E0:
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// add r3,r27,r11
	ctx.r3.u64 = ctx.r27.u64 + ctx.r11.u64;
	// bl 0x82396158
	ctx.lr = 0x826AF5EC;
	sub_82396158(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af61c
	if (ctx.cr6.eq) goto loc_826AF61C;
	// li r4,5
	ctx.r4.s64 = 5;
	// lwz r3,-10020(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AF604;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af61c
	if (!ctx.cr6.eq) goto loc_826AF61C;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af594
	if (ctx.cr6.eq) goto loc_826AF594;
loc_826AF61C:
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// add r3,r27,r11
	ctx.r3.u64 = ctx.r27.u64 + ctx.r11.u64;
	// bl 0x82396180
	ctx.lr = 0x826AF628;
	sub_82396180(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af658
	if (ctx.cr6.eq) goto loc_826AF658;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,-10020(r25)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r25.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AF640;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af658
	if (!ctx.cr6.eq) goto loc_826AF658;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af594
	if (ctx.cr6.eq) goto loc_826AF594;
loc_826AF658:
	// bl 0x82387b90
	ctx.lr = 0x826AF65C;
	sub_82387B90(ctx, base);
	// lwz r11,1340(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1340);
	// cmpwi cr6,r11,30
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 30, ctx.xer);
	// blt cr6,0x826af6b4
	if (ctx.cr6.lt) goto loc_826AF6B4;
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF684;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r8,-23668
	ctx.r4.s64 = ctx.r8.s64 + -23668;
	// bl 0x82637dd8
	ctx.lr = 0x826AF694;
	sub_82637DD8(ctx, base);
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r3,r7,-15540
	ctx.r3.s64 = ctx.r7.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AF6A0;
	sub_821E6800(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF6B0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF6B4:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AF6C0;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r3,132(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 132);
	// bl 0x8238f1e8
	ctx.lr = 0x826AF6CC;
	sub_8238F1E8(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// lwz r11,-12120(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -12120);
	// mulli r10,r27,104
	ctx.r10.s64 = ctx.r27.s64 * 104;
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r28,44(r10)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r10.u32 + 44);
	// bl 0x82387b90
	ctx.lr = 0x826AF6E4;
	sub_82387B90(ctx, base);
	// mulli r11,r27,84
	ctx.r11.s64 = ctx.r27.s64 * 84;
	// lwz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lwz r8,328(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 328);
	// lis r7,3
	ctx.r7.s64 = 196608;
	// add r6,r11,r3
	ctx.r6.u64 = ctx.r11.u64 + ctx.r3.u64;
	// ori r5,r7,50114
	ctx.r5.u64 = ctx.r7.u64 | 50114;
	// lis r4,-32255
	ctx.r4.s64 = -2113863680;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lhzx r11,r6,r5
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r6.u32 + ctx.r5.u32);
	// lfs f0,-32032(r4)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + -32032);
	ctx.f0.f64 = double(temp.f32);
	// add r11,r11,r28
	ctx.r11.u64 = ctx.r11.u64 + ctx.r28.u64;
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// extsw r10,r11
	ctx.r10.s64 = ctx.r11.s32;
	// std r10,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r10.u64);
	// lfd f13,80(r1)
	ctx.f13.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f12,f13
	ctx.f12.f64 = double(ctx.f13.s64);
	// frsp f11,f12
	ctx.f11.f64 = double(float(ctx.f12.f64));
	// fmuls f31,f11,f0
	ctx.f31.f64 = double(float(ctx.f11.f64 * ctx.f0.f64));
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826AF734;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r29,152
	ctx.r29.s64 = 9961472;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-25448
	ctx.r4.s64 = ctx.r9.s64 + -25448;
	// ori r29,r29,38528
	ctx.r29.u64 = ctx.r29.u64 | 38528;
	// bl 0x8268da78
	ctx.lr = 0x826AF74C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826af758
	if (ctx.cr6.eq) goto loc_826AF758;
	// lwz r29,4(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_826AF758:
	// fctiwz f0,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.s64 = (ctx.f31.f64 > double(INT_MAX)) ? INT_MAX : _mm_cvttsd_si32(_mm_load_sd(&ctx.f31.f64));
	// stfd f0,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.f0.u64);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r3,18508(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// lwz r10,84(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	// subf r4,r10,r29
	ctx.r4.s64 = ctx.r29.s64 - ctx.r10.s64;
	// bl 0x826b94e8
	ctx.lr = 0x826AF774;
	sub_826B94E8(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826aea54
	if (!ctx.cr6.eq) goto loc_826AEA54;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aea54
	if (!ctx.cr6.eq) goto loc_826AEA54;
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF7A8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r4,r8,-23696
	ctx.r4.s64 = ctx.r8.s64 + -23696;
	// bl 0x82637dd8
	ctx.lr = 0x826AF7B8;
	sub_82637DD8(ctx, base);
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r3,r7,-15540
	ctx.r3.s64 = ctx.r7.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AF7C4;
	sub_821E6800(ctx, base);
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF7D4;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF7D8:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AF7E4;
	sub_822A3998(ctx, base);
	// lwz r3,48(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// bl 0x82332098
	ctx.lr = 0x826AF7EC;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af838
	if (ctx.cr6.eq) goto loc_826AF838;
loc_826AF7F8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826AF804;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,80(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 80);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826AF824;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF834;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF838:
	// lis r11,-32129
	ctx.r11.s64 = -2105606144;
	// addi r10,r11,-28304
	ctx.r10.s64 = ctx.r11.s64 + -28304;
	// lwz r11,4(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// rlwinm r9,r11,0,29,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 0) & 0x4;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826af85c
	if (!ctx.cr6.eq) goto loc_826AF85C;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af7f8
	if (ctx.cr6.eq) goto loc_826AF7F8;
loc_826AF85C:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_826AF864:
	// bl 0x8268c9f0
	ctx.lr = 0x826AF868;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r23)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r23.u32 + 76);
	// rlwinm r9,r11,2,0,29
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r3,r9,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r10.u32);
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,84(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 84);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826AF888;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF898;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF89C:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r28,r10,-28272
	ctx.r28.s64 = ctx.r10.s64 + -28272;
	// lwz r9,328(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF8B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// bl 0x8268da78
	ctx.lr = 0x826AF8C4;
	sub_8268DA78(ctx, base);
	// lwz r3,4(r3)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// bl 0x82396f58
	ctx.lr = 0x826AF8CC;
	sub_82396F58(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addi r3,r8,-23616
	ctx.r3.s64 = ctx.r8.s64 + -23616;
	// bl 0x821fa230
	ctx.lr = 0x826AF8DC;
	sub_821FA230(ctx, base);
	// lis r27,-32115
	ctx.r27.s64 = -2104688640;
	// mulli r28,r28,104
	ctx.r28.s64 = ctx.r28.s64 * 104;
	// lwz r11,-12120(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -12120);
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// add r3,r28,r11
	ctx.r3.u64 = ctx.r28.u64 + ctx.r11.u64;
	// bl 0x82396110
	ctx.lr = 0x826AF8F4;
	sub_82396110(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// lis r26,-32121
	ctx.r26.s64 = -2105081856;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826af968
	if (ctx.cr6.eq) goto loc_826AF968;
	// li r4,15
	ctx.r4.s64 = 15;
	// lwz r3,-10020(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AF910;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af968
	if (!ctx.cr6.eq) goto loc_826AF968;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af968
	if (!ctx.cr6.eq) goto loc_826AF968;
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF944;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r8,-23648
	ctx.r4.s64 = ctx.r8.s64 + -23648;
	// bl 0x82637dd8
	ctx.lr = 0x826AF954;
	sub_82637DD8(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF964;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF968:
	// lwz r11,-12120(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -12120);
	// add r3,r28,r11
	ctx.r3.u64 = ctx.r28.u64 + ctx.r11.u64;
	// bl 0x82396130
	ctx.lr = 0x826AF974;
	sub_82396130(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af9f0
	if (ctx.cr6.eq) goto loc_826AF9F0;
	// li r4,10
	ctx.r4.s64 = 10;
	// lwz r3,-10020(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AF98C;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af9f0
	if (!ctx.cr6.eq) goto loc_826AF9F0;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826af9f0
	if (!ctx.cr6.eq) goto loc_826AF9F0;
loc_826AF9A4:
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AF9C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r8,-23648
	ctx.r4.s64 = ctx.r8.s64 + -23648;
	// bl 0x82637dd8
	ctx.lr = 0x826AF9D0;
	sub_82637DD8(ctx, base);
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r3,r7,-15540
	ctx.r3.s64 = ctx.r7.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AF9DC;
	sub_821E6800(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AF9EC;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AF9F0:
	// lwz r11,-12120(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -12120);
	// add r3,r28,r11
	ctx.r3.u64 = ctx.r28.u64 + ctx.r11.u64;
	// bl 0x82396158
	ctx.lr = 0x826AF9FC;
	sub_82396158(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826afa2c
	if (ctx.cr6.eq) goto loc_826AFA2C;
	// li r4,5
	ctx.r4.s64 = 5;
	// lwz r3,-10020(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AFA14;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826afa2c
	if (!ctx.cr6.eq) goto loc_826AFA2C;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af9a4
	if (ctx.cr6.eq) goto loc_826AF9A4;
loc_826AFA2C:
	// lwz r11,-12120(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -12120);
	// add r3,r28,r11
	ctx.r3.u64 = ctx.r28.u64 + ctx.r11.u64;
	// bl 0x82396180
	ctx.lr = 0x826AFA38;
	sub_82396180(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826afa68
	if (ctx.cr6.eq) goto loc_826AFA68;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,-10020(r26)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r26.u32 + -10020);
	// bl 0x826bcd90
	ctx.lr = 0x826AFA50;
	sub_826BCD90(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826afa68
	if (!ctx.cr6.eq) goto loc_826AFA68;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826af9a4
	if (ctx.cr6.eq) goto loc_826AF9A4;
loc_826AFA68:
	// bl 0x82387b90
	ctx.lr = 0x826AFA6C;
	sub_82387B90(ctx, base);
	// lwz r11,1340(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1340);
	// cmpwi cr6,r11,30
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 30, ctx.xer);
	// blt cr6,0x826afac4
	if (ctx.cr6.lt) goto loc_826AFAC4;
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AFA94;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r8,-23668
	ctx.r4.s64 = ctx.r8.s64 + -23668;
	// bl 0x82637dd8
	ctx.lr = 0x826AFAA4;
	sub_82637DD8(ctx, base);
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r3,r7,-15540
	ctx.r3.s64 = ctx.r7.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AFAB0;
	sub_821E6800(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AFAC0;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826AFAC4:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r10,328(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 328);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AFAD8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r29,152
	ctx.r29.s64 = 9961472;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r9,-25448
	ctx.r4.s64 = ctx.r9.s64 + -25448;
	// ori r29,r29,38528
	ctx.r29.u64 = ctx.r29.u64 | 38528;
	// bl 0x8268da78
	ctx.lr = 0x826AFAF0;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826afafc
	if (ctx.cr6.eq) goto loc_826AFAFC;
	// lwz r29,4(r3)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
loc_826AFAFC:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// lwz r3,18508(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18508);
	// bl 0x826b94e8
	ctx.lr = 0x826AFB0C;
	sub_826B94E8(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826aea54
	if (!ctx.cr6.eq) goto loc_826AEA54;
	// lbz r11,21658(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 21658);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826aea54
	if (!ctx.cr6.eq) goto loc_826AEA54;
	// lwz r11,0(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + 0);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r10,-23632
	ctx.r4.s64 = ctx.r10.s64 + -23632;
	// lwz r9,656(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 656);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826AFB40;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r4,r8,-23696
	ctx.r4.s64 = ctx.r8.s64 + -23696;
	// bl 0x82637dd8
	ctx.lr = 0x826AFB50;
	sub_82637DD8(ctx, base);
	// lis r7,-32253
	ctx.r7.s64 = -2113732608;
	// addi r3,r7,-15540
	ctx.r3.s64 = ctx.r7.s64 + -15540;
	// bl 0x821e6800
	ctx.lr = 0x826AFB5C;
	sub_821E6800(ctx, base);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// addi r12,r1,-80
	ctx.r12.s64 = ctx.r1.s64 + -80;
	// bl 0x823dba24
	ctx.lr = 0x826AFB6C;
	__restfpr_28(ctx, base);
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AFB70"))) PPC_WEAK_FUNC(sub_826AFB70);
PPC_FUNC_IMPL(__imp__sub_826AFB70) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32125
	ctx.r31.s64 = -2105344000;
	// lwz r4,-29212(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29212);
	// bl 0x826b32b8
	ctx.lr = 0x826AFB8C;
	sub_826B32B8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826afba8
	if (!ctx.cr6.eq) goto loc_826AFBA8;
	// lwz r11,-29212(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29212);
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// li r11,0
	ctx.r11.s64 = 0;
	// bne cr6,0x826afbac
	if (!ctx.cr6.eq) goto loc_826AFBAC;
loc_826AFBA8:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826AFBAC:
	// clrlwi r3,r11,24
	ctx.r3.u64 = ctx.r11.u32 & 0xFF;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFBC4"))) PPC_WEAK_FUNC(sub_826AFBC4);
PPC_FUNC_IMPL(__imp__sub_826AFBC4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826AFBC8"))) PPC_WEAK_FUNC(sub_826AFBC8);
PPC_FUNC_IMPL(__imp__sub_826AFBC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,884(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826afbf4
	if (!ctx.cr6.eq) goto loc_826AFBF4;
	// li r3,8192
	ctx.r3.s64 = 8192;
	// bl 0x82130528
	ctx.lr = 0x826AFBF0;
	sub_82130528(ctx, base);
	// stw r3,884(r31)
	PPC_STORE_U32(ctx.r31.u32 + 884, ctx.r3.u32);
loc_826AFBF4:
	// li r5,8192
	ctx.r5.s64 = 8192;
	// lwz r3,884(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// addi r4,r31,888
	ctx.r4.s64 = ctx.r31.s64 + 888;
	// bl 0x823da950
	ctx.lr = 0x826AFC04;
	sub_823DA950(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFC18"))) PPC_WEAK_FUNC(sub_826AFC18);
PPC_FUNC_IMPL(__imp__sub_826AFC18) {
	PPC_FUNC_PROLOGUE();
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// blt cr6,0x826afc40
	if (ctx.cr6.lt) goto loc_826AFC40;
	// lwz r11,724(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 724);
	// cmpw cr6,r11,r4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r4.s32, ctx.xer);
	// ble cr6,0x826afc40
	if (!ctx.cr6.gt) goto loc_826AFC40;
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// mulli r11,r4,152
	ctx.r11.s64 = ctx.r4.s64 * 152;
	// addi r10,r10,-29096
	ctx.r10.s64 = ctx.r10.s64 + -29096;
	// add r3,r11,r10
	ctx.r3.u64 = ctx.r11.u64 + ctx.r10.u64;
	// blr 
	return;
loc_826AFC40:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFC48"))) PPC_WEAK_FUNC(sub_826AFC48);
PPC_FUNC_IMPL(__imp__sub_826AFC48) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AFC68;
	sub_822A3998(ctx, base);
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,-29340(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -29340);
	// bl 0x826990d8
	ctx.lr = 0x826AFC78;
	sub_826990D8(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826afcb0
	if (ctx.cr6.eq) goto loc_826AFCB0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822a8710
	ctx.lr = 0x826AFC8C;
	sub_822A8710(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826afcb0
	if (ctx.cr6.eq) goto loc_826AFCB0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822a86e8
	ctx.lr = 0x826AFCA0;
	sub_822A86E8(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// li r3,1
	ctx.r3.s64 = 1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826afcb4
	if (!ctx.cr6.eq) goto loc_826AFCB4;
loc_826AFCB0:
	// li r3,0
	ctx.r3.s64 = 0;
loc_826AFCB4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFCC8"))) PPC_WEAK_FUNC(sub_826AFCC8);
PPC_FUNC_IMPL(__imp__sub_826AFCC8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmpwi cr6,r30,0
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 0, ctx.xer);
	// beq cr6,0x826afd08
	if (ctx.cr6.eq) goto loc_826AFD08;
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826afd00
	if (ctx.cr6.eq) goto loc_826AFD00;
	// li r4,0
	ctx.r4.s64 = 0;
	// bl 0x826afcc8
	ctx.lr = 0x826AFD00;
	sub_826AFCC8(ctx, base);
loc_826AFD00:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
loc_826AFD08:
	// li r3,1
	ctx.r3.s64 = 1;
	// stw r30,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFD28"))) PPC_WEAK_FUNC(sub_826AFD28);
PPC_FUNC_IMPL(__imp__sub_826AFD28) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// mr r11,r6
	ctx.r11.u64 = ctx.r6.u64;
	// addi r10,r10,-22132
	ctx.r10.s64 = ctx.r10.s64 + -22132;
loc_826AFD4C:
	// lbz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r11.u32 + 0);
	// lbz r8,0(r10)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// subf r9,r8,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r8.s64;
	// beq cr6,0x826afd70
	if (ctx.cr6.eq) goto loc_826AFD70;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826afd4c
	if (ctx.cr6.eq) goto loc_826AFD4C;
loc_826AFD70:
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// bne cr6,0x826afd9c
	if (!ctx.cr6.eq) goto loc_826AFD9C;
	// mr r4,r7
	ctx.r4.u64 = ctx.r7.u64;
	// bl 0x82691650
	ctx.lr = 0x826AFD80;
	sub_82691650(ctx, base);
	// stw r3,76(r31)
	PPC_STORE_U32(ctx.r31.u32 + 76, ctx.r3.u32);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
loc_826AFD9C:
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82639498
	ctx.lr = 0x826AFDA8;
	sub_82639498(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFDBC"))) PPC_WEAK_FUNC(sub_826AFDBC);
PPC_FUNC_IMPL(__imp__sub_826AFDBC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826AFDC0"))) PPC_WEAK_FUNC(sub_826AFDC0);
PPC_FUNC_IMPL(__imp__sub_826AFDC0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826AFDC8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AFDE0;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r3,84(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// bl 0x8233b608
	ctx.lr = 0x826AFDEC;
	sub_8233B608(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826afe50
	if (!ctx.cr6.eq) goto loc_826AFE50;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AFE04;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r3,84(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// bl 0x8233eef0
	ctx.lr = 0x826AFE10;
	sub_8233EEF0(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826afe50
	if (!ctx.cr6.eq) goto loc_826AFE50;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AFE28;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// li r30,1
	ctx.r30.s64 = 1;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r10,84(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// stb r30,2153(r10)
	PPC_STORE_U8(ctx.r10.u32 + 2153, ctx.r30.u8);
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AFE44;
	sub_822A3998(ctx, base);
	// lwz r9,48(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r8,84(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 84);
	// stb r30,2155(r8)
	PPC_STORE_U8(ctx.r8.u32 + 2155, ctx.r30.u8);
loc_826AFE50:
	// lis r31,-32111
	ctx.r31.s64 = -2104426496;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// bl 0x82699418
	ctx.lr = 0x826AFE5C;
	sub_82699418(ctx, base);
	// lwz r11,-29340(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// stb r10,21668(r11)
	PPC_STORE_U8(ctx.r11.u32 + 21668, ctx.r10.u8);
	// lwz r4,68(r29)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r29.u32 + 68);
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// bl 0x826b34f8
	ctx.lr = 0x826AFE78;
	sub_826B34F8(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AFE80"))) PPC_WEAK_FUNC(sub_826AFE80);
PPC_FUNC_IMPL(__imp__sub_826AFE80) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lwz r10,520(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 520);
	// addi r11,r4,1
	ctx.r11.s64 = ctx.r4.s64 + 1;
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x826afef0
	if (!ctx.cr6.lt) goto loc_826AFEF0;
loc_826AFE90:
	// lwz r10,516(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 516);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + ctx.r11.u64;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// addi r9,r10,1
	ctx.r9.s64 = ctx.r10.s64 + 1;
	// mr r8,r10
	ctx.r8.u64 = ctx.r10.u64;
	// srawi r7,r9,5
	ctx.xer.ca = (ctx.r9.s32 < 0) & ((ctx.r9.u32 & 0x1F) != 0);
	ctx.r7.s64 = ctx.r9.s32 >> 5;
	// addze r6,r7
	temp.s64 = ctx.r7.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r7.u32;
	ctx.r6.s64 = temp.s64;
	// srawi r5,r8,5
	ctx.xer.ca = (ctx.r8.s32 < 0) & ((ctx.r8.u32 & 0x1F) != 0);
	ctx.r5.s64 = ctx.r8.s32 >> 5;
	// rlwinm r4,r6,5,0,26
	ctx.r4.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 5) & 0xFFFFFFE0;
	// addze r10,r5
	temp.s64 = ctx.r5.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r5.u32;
	ctx.r10.s64 = temp.s64;
	// subf r9,r4,r9
	ctx.r9.s64 = ctx.r9.s64 - ctx.r4.s64;
	// rlwinm r7,r10,5,0,26
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 5) & 0xFFFFFFE0;
	// rlwinm r10,r9,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// subf r6,r7,r8
	ctx.r6.s64 = ctx.r8.s64 - ctx.r7.s64;
	// add r5,r10,r3
	ctx.r5.u64 = ctx.r10.u64 + ctx.r3.u64;
	// rlwinm r10,r6,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// add r4,r10,r3
	ctx.r4.u64 = ctx.r10.u64 + ctx.r3.u64;
	// ld r9,0(r5)
	ctx.r9.u64 = PPC_LOAD_U64(ctx.r5.u32 + 0);
	// stdx r9,r10,r3
	PPC_STORE_U64(ctx.r10.u32 + ctx.r3.u32, ctx.r9.u64);
	// ld r8,8(r5)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r5.u32 + 8);
	// std r8,8(r4)
	PPC_STORE_U64(ctx.r4.u32 + 8, ctx.r8.u64);
	// lwz r7,520(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 520);
	// cmpw cr6,r11,r7
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r7.s32, ctx.xer);
	// blt cr6,0x826afe90
	if (ctx.cr6.lt) goto loc_826AFE90;
loc_826AFEF0:
	// lwz r11,520(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 520);
	// addi r10,r11,-1
	ctx.r10.s64 = ctx.r11.s64 + -1;
	// lwz r11,512(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 512);
	// stw r10,520(r3)
	PPC_STORE_U32(ctx.r3.u32 + 520, ctx.r10.u32);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826aff14
	if (!ctx.cr6.eq) goto loc_826AFF14;
	// li r11,31
	ctx.r11.s64 = 31;
	// stw r11,512(r3)
	PPC_STORE_U32(ctx.r3.u32 + 512, ctx.r11.u32);
	// blr 
	return;
loc_826AFF14:
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// stw r11,512(r3)
	PPC_STORE_U32(ctx.r3.u32 + 512, ctx.r11.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826AFF20"))) PPC_WEAK_FUNC(sub_826AFF20);
PPC_FUNC_IMPL(__imp__sub_826AFF20) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826AFF28;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// stb r30,16(r31)
	PPC_STORE_U8(ctx.r31.u32 + 16, ctx.r30.u8);
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// bl 0x8226ced8
	ctx.lr = 0x826AFF44;
	sub_8226CED8(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826AFF48;
	sub_82387B90(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,1344(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1344);
	// lwz r3,17268(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + 17268);
	// mulli r10,r9,8176
	ctx.r10.s64 = ctx.r9.s64 * 8176;
	// add r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lbz r29,9468(r8)
	ctx.r29.u64 = PPC_LOAD_U8(ctx.r8.u32 + 9468);
	// bl 0x822a3998
	ctx.lr = 0x826AFF6C;
	sub_822A3998(ctx, base);
	// lwz r28,52(r3)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r3.u32 + 52);
	// li r4,16512
	ctx.r4.s64 = 16512;
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x8238ef30
	ctx.lr = 0x826AFF7C;
	sub_8238EF30(ctx, base);
	// stb r29,8108(r28)
	PPC_STORE_U8(ctx.r28.u32 + 8108, ctx.r29.u8);
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// addi r3,r7,-14720
	ctx.r3.s64 = ctx.r7.s64 + -14720;
	// bl 0x821fa230
	ctx.lr = 0x826AFF8C;
	sub_821FA230(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826affa8
	if (ctx.cr6.eq) goto loc_826AFFA8;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,1
	ctx.r4.s64 = 1;
	// lwz r10,120(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 120);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826AFFA8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826AFFA8:
	// lwz r3,884(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826affb8
	if (ctx.cr6.eq) goto loc_826AFFB8;
	// bl 0x82130588
	ctx.lr = 0x826AFFB8;
	sub_82130588(ctx, base);
loc_826AFFB8:
	// stw r30,884(r31)
	PPC_STORE_U32(ctx.r31.u32 + 884, ctx.r30.u32);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,8
	ctx.r4.s64 = 8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826AFFD0;
	sub_8268EE10(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826AFFD8"))) PPC_WEAK_FUNC(sub_826AFFD8);
PPC_FUNC_IMPL(__imp__sub_826AFFD8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826AFFE0;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r26,r4
	ctx.r26.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826AFFFC;
	sub_822A3998(ctx, base);
	// lwz r10,48(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lwz r29,132(r10)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r10.u32 + 132);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x8238f998
	ctx.lr = 0x826B000C;
	sub_8238F998(ctx, base);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r9,720(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// addi r28,r11,-29096
	ctx.r28.s64 = ctx.r11.s64 + -29096;
	// mulli r10,r9,152
	ctx.r10.s64 = ctx.r9.s64 * 152;
	// addi r11,r28,16
	ctx.r11.s64 = ctx.r28.s64 + 16;
	// li r3,0
	ctx.r3.s64 = 0;
	// add r30,r10,r11
	ctx.r30.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x82388580
	ctx.lr = 0x826B0030;
	sub_82388580(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// lwz r4,4(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	// lwz r3,-10240(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B0044;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7118
	ctx.lr = 0x826B004C;
	sub_824E7118(ctx, base);
loc_826B004C:
	// lbz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// lbz r10,0(r30)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r30.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// subf r11,r10,r11
	ctx.r11.s64 = ctx.r11.s64 - ctx.r10.s64;
	// beq cr6,0x826b0070
	if (ctx.cr6.eq) goto loc_826B0070;
	// addi r3,r3,1
	ctx.r3.s64 = ctx.r3.s64 + 1;
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b004c
	if (ctx.cr6.eq) goto loc_826B004C;
loc_826B0070:
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826b0084
	if (!ctx.cr6.eq) goto loc_826B0084;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-22016
	ctx.r4.s64 = ctx.r11.s64 + -22016;
	// b 0x826b0164
	goto loc_826B0164;
loc_826B0084:
	// lis r11,-32129
	ctx.r11.s64 = -2105606144;
	// lwz r10,52(r27)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r27.u32 + 52);
	// addi r9,r11,-28304
	ctx.r9.s64 = ctx.r11.s64 + -28304;
	// lwz r11,4(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// and r8,r10,r11
	ctx.r8.u64 = ctx.r10.u64 & ctx.r11.u64;
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// bne cr6,0x826b00ac
	if (!ctx.cr6.eq) goto loc_826B00AC;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-22048
	ctx.r4.s64 = ctx.r11.s64 + -22048;
	// b 0x826b0164
	goto loc_826B0164;
loc_826B00AC:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r4,r27
	ctx.r4.u64 = ctx.r27.u64;
	// lwz r3,-10020(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10020);
	// bl 0x826bf068
	ctx.lr = 0x826B00BC;
	sub_826BF068(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b00d4
	if (!ctx.cr6.eq) goto loc_826B00D4;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-22072
	ctx.r4.s64 = ctx.r11.s64 + -22072;
	// b 0x826b0164
	goto loc_826B0164;
loc_826B00D4:
	// bl 0x82387b90
	ctx.lr = 0x826B00D8;
	sub_82387B90(ctx, base);
	// lwz r11,1340(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1340);
	// cmpwi cr6,r11,30
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 30, ctx.xer);
	// blt cr6,0x826b00f0
	if (ctx.cr6.lt) goto loc_826B00F0;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-22088
	ctx.r4.s64 = ctx.r11.s64 + -22088;
	// b 0x826b0164
	goto loc_826B0164;
loc_826B00F0:
	// lwz r10,720(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// addi r11,r28,76
	ctx.r11.s64 = ctx.r28.s64 + 76;
	// addi r30,r31,732
	ctx.r30.s64 = ctx.r31.s64 + 732;
	// mulli r10,r10,152
	ctx.r10.s64 = ctx.r10.s64 * 152;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r9,0(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// stw r9,732(r31)
	PPC_STORE_U32(ctx.r31.u32 + 732, ctx.r9.u32);
	// lwz r8,4(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// stw r8,736(r31)
	PPC_STORE_U32(ctx.r31.u32 + 736, ctx.r8.u32);
	// lwz r7,8(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	// stw r7,740(r31)
	PPC_STORE_U32(ctx.r31.u32 + 740, ctx.r7.u32);
	// lwz r6,12(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// stw r6,744(r31)
	PPC_STORE_U32(ctx.r31.u32 + 744, ctx.r6.u32);
	// lwz r5,16(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// rotlwi r4,r5,0
	ctx.r4.u64 = __builtin_rotateleft32(ctx.r5.u32, 0);
	// stw r5,748(r31)
	PPC_STORE_U32(ctx.r31.u32 + 748, ctx.r5.u32);
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// bne cr6,0x826b0144
	if (!ctx.cr6.eq) goto loc_826B0144;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-22108
	ctx.r4.s64 = ctx.r11.s64 + -22108;
	// b 0x826b0164
	goto loc_826B0164;
loc_826B0144:
	// lis r27,-32121
	ctx.r27.s64 = -2105081856;
	// lwz r10,736(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 736);
	// lwz r11,18508(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 18508);
	// lwz r9,508(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// cmpw cr6,r9,r10
	ctx.cr6.compare<int32_t>(ctx.r9.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x826b0188
	if (!ctx.cr6.lt) goto loc_826B0188;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-22124
	ctx.r4.s64 = ctx.r11.s64 + -22124;
loc_826B0164:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x82637dd8
	ctx.lr = 0x826B016C;
	sub_82637DD8(ctx, base);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B0180;
	sub_8268EE10(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826B0188:
	// addi r3,r29,20
	ctx.r3.s64 = ctx.r29.s64 + 20;
	// bl 0x82397f10
	ctx.lr = 0x826B0190;
	sub_82397F10(ctx, base);
	// bl 0x82387b90
	ctx.lr = 0x826B0194;
	sub_82387B90(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x8238b6e8
	ctx.lr = 0x826B019C;
	sub_8238B6E8(ctx, base);
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// bl 0x82387b90
	ctx.lr = 0x826B01A4;
	sub_82387B90(ctx, base);
	// mulli r11,r26,84
	ctx.r11.s64 = ctx.r26.s64 * 84;
	// lis r10,3
	ctx.r10.s64 = 196608;
	// add r9,r11,r3
	ctx.r9.u64 = ctx.r11.u64 + ctx.r3.u64;
	// ori r8,r10,50114
	ctx.r8.u64 = ctx.r10.u64 | 50114;
	// lhzx r11,r9,r8
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r9.u32 + ctx.r8.u32);
	// addi r29,r11,-1
	ctx.r29.s64 = ctx.r11.s64 + -1;
	// bl 0x82387b90
	ctx.lr = 0x826B01C0;
	sub_82387B90(ctx, base);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x8238ac80
	ctx.lr = 0x826B01CC;
	sub_8238AC80(ctx, base);
	// lwz r3,18508(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 18508);
	// lwz r4,736(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 736);
	// bl 0x826b94a8
	ctx.lr = 0x826B01D8;
	sub_826B94A8(ctx, base);
	// lwz r10,740(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 740);
	// lis r7,-32121
	ctx.r7.s64 = -2105081856;
	// lwz r11,744(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 744);
	// addi r6,r10,1
	ctx.r6.s64 = ctx.r10.s64 + 1;
	// addi r5,r11,1
	ctx.r5.s64 = ctx.r11.s64 + 1;
	// stw r6,740(r31)
	PPC_STORE_U32(ctx.r31.u32 + 740, ctx.r6.u32);
	// stw r5,744(r31)
	PPC_STORE_U32(ctx.r31.u32 + 744, ctx.r5.u32);
	// lwz r3,-3624(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + -3624);
	// bl 0x8226ce68
	ctx.lr = 0x826B01FC;
	sub_8226CE68(ctx, base);
	// lwz r4,720(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// mulli r11,r4,152
	ctx.r11.s64 = ctx.r4.s64 * 152;
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// add r8,r11,r28
	ctx.r8.u64 = ctx.r11.u64 + ctx.r28.u64;
	// addi r9,r31,28
	ctx.r9.s64 = ctx.r31.s64 + 28;
	// li r7,64
	ctx.r7.s64 = 64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r5,r8
	ctx.r5.u64 = ctx.r8.u64;
	// lwz r4,-27868(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + -27868);
	// bl 0x824f7638
	ctx.lr = 0x826B0224;
	sub_824F7638(ctx, base);
	// lwz r9,20(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r9,0
	ctx.cr6.compare<int32_t>(ctx.r9.s32, 0, ctx.xer);
	// beq cr6,0x826b023c
	if (ctx.cr6.eq) goto loc_826B023C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B023C;
	sub_826AFCC8(ctx, base);
loc_826B023C:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,5
	ctx.r10.s64 = 5;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B0254"))) PPC_WEAK_FUNC(sub_826B0254);
PPC_FUNC_IMPL(__imp__sub_826B0254) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B0258"))) PPC_WEAK_FUNC(sub_826B0258);
PPC_FUNC_IMPL(__imp__sub_826B0258) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B0260;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// bl 0x8226ce68
	ctx.lr = 0x826B0278;
	sub_8226CE68(ctx, base);
	// lis r10,-32115
	ctx.r10.s64 = -2104688640;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lis r9,-32252
	ctx.r9.s64 = -2113667072;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r9,-19060
	ctx.r4.s64 = ctx.r9.s64 + -19060;
	// lwz r3,-12440(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -12440);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r7,48(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 48);
	// mtctr r7
	ctx.ctr.u64 = ctx.r7.u64;
	// bctrl 
	ctx.lr = 0x826B02A4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lwz r6,0(r30)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// lwz r5,336(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 336);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x826B02B8;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r4,-32111
	ctx.r4.s64 = -2104426496;
	// clrlwi r29,r3,24
	ctx.r29.u64 = ctx.r3.u32 & 0xFF;
	// addi r30,r4,-29096
	ctx.r30.s64 = ctx.r4.s64 + -29096;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// addi r4,r30,16
	ctx.r4.s64 = ctx.r30.s64 + 16;
	// addi r3,r3,-21928
	ctx.r3.s64 = ctx.r3.s64 + -21928;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// bl 0x82130000
	ctx.lr = 0x826B02D8;
	sub_82130000(ctx, base);
	// lis r11,-32125
	ctx.r11.s64 = -2105344000;
	// addi r10,r29,1
	ctx.r10.s64 = ctx.r29.s64 + 1;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r8,r31,28
	ctx.r8.s64 = ctx.r31.s64 + 28;
	// clrlwi r6,r10,24
	ctx.r6.u64 = ctx.r10.u32 & 0xFF;
	// lwz r4,-27868(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + -27868);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// bl 0x824f7188
	ctx.lr = 0x826B02FC;
	sub_824F7188(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,4
	ctx.r5.s64 = 4;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r9,-21988
	ctx.r3.s64 = ctx.r9.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B0310;
	sub_82130000(ctx, base);
	// lwz r8,20(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// beq cr6,0x826b0328
	if (ctx.cr6.eq) goto loc_826B0328;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B0328;
	sub_826AFCC8(ctx, base);
loc_826B0328:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,4
	ctx.r10.s64 = 4;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B0340"))) PPC_WEAK_FUNC(sub_826B0340);
PPC_FUNC_IMPL(__imp__sub_826B0340) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826B0348;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826B0360;
	sub_8238F1E8(ctx, base);
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mulli r10,r10,104
	ctx.r10.s64 = ctx.r10.s64 * 104;
	// lwz r11,-12120(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12120);
	// add r9,r10,r11
	ctx.r9.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r11,44(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + 44);
	// addi r8,r11,10000
	ctx.r8.s64 = ctx.r11.s64 + 10000;
	// stw r8,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r8.u32);
	// bl 0x8238f998
	ctx.lr = 0x826B0388;
	sub_8238F998(ctx, base);
	// lwz r7,4(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r11,0
	ctx.r11.s64 = 0;
	// clrlwi r6,r29,24
	ctx.r6.u64 = ctx.r29.u32 & 0xFF;
	// stw r11,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r11.u32);
	// stw r11,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r11.u32);
	// stw r6,16(r31)
	PPC_STORE_U32(ctx.r31.u32 + 16, ctx.r6.u32);
	// stw r7,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r7.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B03AC"))) PPC_WEAK_FUNC(sub_826B03AC);
PPC_FUNC_IMPL(__imp__sub_826B03AC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B03B0"))) PPC_WEAK_FUNC(sub_826B03B0);
PPC_FUNC_IMPL(__imp__sub_826B03B0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// bl 0x8226ce68
	ctx.lr = 0x826B03D8;
	sub_8226CE68(ctx, base);
	// lis r7,-32125
	ctx.r7.s64 = -2105344000;
	// lwz r11,876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 876);
	// lis r6,-32111
	ctx.r6.s64 = -2104426496;
	// addi r10,r31,28
	ctx.r10.s64 = ctx.r31.s64 + 28;
	// addi r8,r6,-29096
	ctx.r8.s64 = ctx.r6.s64 + -29096;
	// addi r9,r31,724
	ctx.r9.s64 = ctx.r31.s64 + 724;
	// lwz r4,-27868(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + -27868);
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// li r6,3
	ctx.r6.s64 = 3;
	// addi r5,r11,1
	ctx.r5.s64 = ctx.r11.s64 + 1;
	// bl 0x824f70a8
	ctx.lr = 0x826B0404;
	sub_824F70A8(ctx, base);
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r3,-21988
	ctx.r3.s64 = ctx.r3.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B0418;
	sub_82130000(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b0430
	if (ctx.cr6.eq) goto loc_826B0430;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B0430;
	sub_826AFCC8(ctx, base);
loc_826B0430:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B0458"))) PPC_WEAK_FUNC(sub_826B0458);
PPC_FUNC_IMPL(__imp__sub_826B0458) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// bl 0x8226ce68
	ctx.lr = 0x826B0478;
	sub_8226CE68(ctx, base);
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// addi r8,r31,28
	ctx.r8.s64 = ctx.r31.s64 + 28;
	// addi r7,r31,880
	ctx.r7.s64 = ctx.r31.s64 + 880;
	// li r6,0
	ctx.r6.s64 = 0;
	// li r5,3
	ctx.r5.s64 = 3;
	// lwz r4,-27868(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + -27868);
	// bl 0x824f6de8
	ctx.lr = 0x826B0494;
	sub_824F6DE8(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// li r5,6
	ctx.r5.s64 = 6;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r9,-21988
	ctx.r3.s64 = ctx.r9.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B04A8;
	sub_82130000(ctx, base);
	// lwz r8,20(r31)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r8,0
	ctx.cr6.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// beq cr6,0x826b04c0
	if (ctx.cr6.eq) goto loc_826B04C0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B04C0;
	sub_826AFCC8(ctx, base);
loc_826B04C0:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,6
	ctx.r10.s64 = 6;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B04E4"))) PPC_WEAK_FUNC(sub_826B04E4);
PPC_FUNC_IMPL(__imp__sub_826B04E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B04E8"))) PPC_WEAK_FUNC(sub_826B04E8);
PPC_FUNC_IMPL(__imp__sub_826B04E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B04F0;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// cmplwi cr6,r29,0
	ctx.cr6.compare<uint32_t>(ctx.r29.u32, 0, ctx.xer);
	// beq cr6,0x826b05a4
	if (ctx.cr6.eq) goto loc_826B05A4;
	// addic. r11,r29,76
	ctx.xer.ca = ctx.r29.u32 > 4294967219;
	ctx.r11.s64 = ctx.r29.s64 + 76;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq 0x826b05a4
	if (ctx.cr0.eq) goto loc_826B05A4;
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// bl 0x82396f58
	ctx.lr = 0x826B0514;
	sub_82396F58(ctx, base);
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r4,r11,-21900
	ctx.r4.s64 = ctx.r11.s64 + -21900;
	// lwz r3,-10244(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10244);
	// bl 0x82218310
	ctx.lr = 0x826B052C;
	sub_82218310(ctx, base);
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x826b0550
	if (ctx.cr6.lt) goto loc_826B0550;
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lwz r3,-10244(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + -10244);
	// mulli r10,r31,104
	ctx.r10.s64 = ctx.r31.s64 * 104;
	// lwz r11,-12120(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12120);
	// add r10,r10,r11
	ctx.r10.u64 = ctx.r10.u64 + ctx.r11.u64;
	// lwz r4,8(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 8);
	// bl 0x822183a8
	ctx.lr = 0x826B0550;
	sub_822183A8(ctx, base);
loc_826B0550:
	// lis r11,-32245
	ctx.r11.s64 = -2113208320;
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// addi r5,r11,-17836
	ctx.r5.s64 = ctx.r11.s64 + -17836;
	// addi r6,r29,16
	ctx.r6.s64 = ctx.r29.s64 + 16;
	// li r4,52
	ctx.r4.s64 = 52;
	// addi r3,r28,4
	ctx.r3.s64 = ctx.r28.s64 + 4;
	// bl 0x82137a08
	ctx.lr = 0x826B056C;
	sub_82137A08(ctx, base);
	// lfs f1,68(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 68);
	ctx.f1.f64 = double(temp.f32);
	// stfd f1,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// li r4,6
	ctx.r4.s64 = 6;
	// addi r5,r10,-21640
	ctx.r5.s64 = ctx.r10.s64 + -21640;
	// addi r3,r28,60
	ctx.r3.s64 = ctx.r28.s64 + 60;
	// bl 0x82137a08
	ctx.lr = 0x826B058C;
	sub_82137A08(ctx, base);
	// lwz r9,64(r29)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r29.u32 + 64);
	// stw r9,56(r28)
	PPC_STORE_U32(ctx.r28.u32 + 56, ctx.r9.u32);
	// lwz r8,72(r29)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r29.u32 + 72);
	// stw r8,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r8.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826B05A4:
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r11,0(r28)
	PPC_STORE_U32(ctx.r28.u32 + 0, ctx.r11.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B05B4"))) PPC_WEAK_FUNC(sub_826B05B4);
PPC_FUNC_IMPL(__imp__sub_826B05B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B05B8"))) PPC_WEAK_FUNC(sub_826B05B8);
PPC_FUNC_IMPL(__imp__sub_826B05B8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826B05C0;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r11,724(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b064c
	if (ctx.cr6.eq) goto loc_826B064C;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// li r30,0
	ctx.r30.s64 = 0;
	// addi r27,r11,-29096
	ctx.r27.s64 = ctx.r11.s64 + -29096;
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// mr r31,r27
	ctx.r31.u64 = ctx.r27.u64;
loc_826B05E8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B05F0;
	sub_82388580(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r3,-10240(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10240);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82270170
	ctx.lr = 0x826B0600;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B0608;
	sub_824E7110(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x824f92f8
	ctx.lr = 0x826B0614;
	sub_824F92F8(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b063c
	if (!ctx.cr6.eq) goto loc_826B063C;
	// lwz r11,724(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + 724);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// addi r31,r31,152
	ctx.r31.s64 = ctx.r31.s64 + 152;
	// cmplw cr6,r30,r11
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, ctx.r11.u32, ctx.xer);
	// bne cr6,0x826b05e8
	if (!ctx.cr6.eq) goto loc_826B05E8;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B063C:
	// mulli r11,r30,152
	ctx.r11.s64 = ctx.r30.s64 * 152;
	// addi r3,r28,796
	ctx.r3.s64 = ctx.r28.s64 + 796;
	// add r4,r11,r27
	ctx.r4.u64 = ctx.r11.u64 + ctx.r27.u64;
	// bl 0x826b04e8
	ctx.lr = 0x826B064C;
	sub_826B04E8(ctx, base);
loc_826B064C:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B0654"))) PPC_WEAK_FUNC(sub_826B0654);
PPC_FUNC_IMPL(__imp__sub_826B0654) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B0658"))) PPC_WEAK_FUNC(sub_826B0658);
PPC_FUNC_IMPL(__imp__sub_826B0658) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826B0660;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// addi r28,r31,28
	ctx.r28.s64 = ctx.r31.s64 + 28;
	// lwz r30,-27868(r10)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r10.u32 + -27868);
	// addi r27,r9,-29096
	ctx.r27.s64 = ctx.r9.s64 + -29096;
	// addi r26,r31,724
	ctx.r26.s64 = ctx.r31.s64 + 724;
	// bl 0x8226ce68
	ctx.lr = 0x826B0690;
	sub_8226CE68(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r8,r26
	ctx.r8.u64 = ctx.r26.u64;
	// mr r9,r28
	ctx.r9.u64 = ctx.r28.u64;
	// bl 0x824f6ea0
	ctx.lr = 0x826B06AC;
	sub_824F6EA0(ctx, base);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r8,-21988
	ctx.r3.s64 = ctx.r8.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B06C0;
	sub_82130000(ctx, base);
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r7,0
	ctx.cr6.compare<int32_t>(ctx.r7.s32, 0, ctx.xer);
	// beq cr6,0x826b06d8
	if (ctx.cr6.eq) goto loc_826B06D8;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B06D8;
	sub_826AFCC8(ctx, base);
loc_826B06D8:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B06F0"))) PPC_WEAK_FUNC(sub_826B06F0);
PPC_FUNC_IMPL(__imp__sub_826B06F0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e8
	ctx.lr = 0x826B06F8;
	__savegprlr_24(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32129
	ctx.r11.s64 = -2105606144;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// lwz r30,-28304(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + -28304);
	// bl 0x82388580
	ctx.lr = 0x826B0714;
	sub_82388580(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lwz r4,4(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lwz r3,-10240(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B0728;
	sub_82270170(ctx, base);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// lis r7,-32111
	ctx.r7.s64 = -2104426496;
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// addi r27,r7,-29096
	ctx.r27.s64 = ctx.r7.s64 + -29096;
	// addi r26,r31,28
	ctx.r26.s64 = ctx.r31.s64 + 28;
	// lwz r29,-3624(r8)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r8.u32 + -3624);
	// addi r25,r31,724
	ctx.r25.s64 = ctx.r31.s64 + 724;
	// bl 0x824e7110
	ctx.lr = 0x826B0748;
	sub_824E7110(ctx, base);
	// lis r6,-32125
	ctx.r6.s64 = -2105344000;
	// mr r24,r3
	ctx.r24.u64 = ctx.r3.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// lwz r29,-27868(r6)
	ctx.r29.u64 = PPC_LOAD_U32(ctx.r6.u32 + -27868);
	// bl 0x8226ce68
	ctx.lr = 0x826B075C;
	sub_8226CE68(ctx, base);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// stw r26,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r26.u32);
	// mr r5,r24
	ctx.r5.u64 = ctx.r24.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r8,r30
	ctx.r8.u64 = ctx.r30.u64;
	// mr r9,r27
	ctx.r9.u64 = ctx.r27.u64;
	// mr r10,r25
	ctx.r10.u64 = ctx.r25.u64;
	// bl 0x824f6fa0
	ctx.lr = 0x826B0780;
	sub_824F6FA0(ctx, base);
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r3,-21988
	ctx.r3.s64 = ctx.r3.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B0794;
	sub_82130000(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b07ac
	if (ctx.cr6.eq) goto loc_826B07AC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B07AC;
	sub_826AFCC8(ctx, base);
loc_826B07AC:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9238
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B07C4"))) PPC_WEAK_FUNC(sub_826B07C4);
PPC_FUNC_IMPL(__imp__sub_826B07C4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B07C8"))) PPC_WEAK_FUNC(sub_826B07C8);
PPC_FUNC_IMPL(__imp__sub_826B07C8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91c8
	ctx.lr = 0x826B07D0;
	__savegprlr_16(ctx, base);
	// stwu r1,-368(r1)
	ea = -368 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// addi r11,r9,-29096
	ctx.r11.s64 = ctx.r9.s64 + -29096;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// lwz r10,720(r29)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r29.u32 + 720);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// li r5,152
	ctx.r5.s64 = 152;
	// mulli r10,r10,152
	ctx.r10.s64 = ctx.r10.s64 * 152;
	// add r4,r10,r11
	ctx.r4.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x823da950
	ctx.lr = 0x826B0800;
	sub_823DA950(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826B080C;
	sub_8268DCB0(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826B081C;
	sub_8268DCB0(ctx, base);
	// li r17,0
	ctx.r17.s64 = 0;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b0840
	if (ctx.cr6.eq) goto loc_826B0840;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268dcb0
	ctx.lr = 0x826B0834;
	sub_8268DCB0(ctx, base);
	// bl 0x8268dc70
	ctx.lr = 0x826B0838;
	sub_8268DC70(ctx, base);
	// lwz r16,40(r3)
	ctx.r16.u64 = PPC_LOAD_U32(ctx.r3.u32 + 40);
	// b 0x826b0844
	goto loc_826B0844;
loc_826B0840:
	// mr r16,r17
	ctx.r16.u64 = ctx.r17.u64;
loc_826B0844:
	// lwz r11,172(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// li r24,1
	ctx.r24.s64 = 1;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b0894
	if (ctx.cr6.eq) goto loc_826B0894;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B085C;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B0870;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B0878;
	sub_824E7110(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x824f9388
	ctx.lr = 0x826B0884;
	sub_824F9388(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826b0898
	if (!ctx.cr6.eq) goto loc_826B0898;
loc_826B0894:
	// mr r11,r17
	ctx.r11.u64 = ctx.r17.u64;
loc_826B0898:
	// lwz r6,172(r1)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r1.u32 + 172);
	// clrlwi r18,r11,24
	ctx.r18.u64 = ctx.r11.u32 & 0xFF;
	// lwz r10,156(r1)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r1.u32 + 156);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r9,160(r1)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r1.u32 + 160);
	// rotlwi r5,r6,0
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r6.u32, 0);
	// lwz r8,164(r1)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r1.u32 + 164);
	// lwz r7,168(r1)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r1.u32 + 168);
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// stw r6,748(r29)
	PPC_STORE_U32(ctx.r29.u32 + 748, ctx.r6.u32);
	// stw r10,732(r29)
	PPC_STORE_U32(ctx.r29.u32 + 732, ctx.r10.u32);
	// stw r9,736(r29)
	PPC_STORE_U32(ctx.r29.u32 + 736, ctx.r9.u32);
	// stw r8,740(r29)
	PPC_STORE_U32(ctx.r29.u32 + 740, ctx.r8.u32);
	// stw r7,744(r29)
	PPC_STORE_U32(ctx.r29.u32 + 744, ctx.r7.u32);
	// beq cr6,0x826b08f0
	if (ctx.cr6.eq) goto loc_826B08F0;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r3,-10244(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// rotlwi r5,r9,0
	ctx.r5.u64 = __builtin_rotateleft32(ctx.r9.u32, 0);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-21868
	ctx.r4.s64 = ctx.r10.s64 + -21868;
	// bl 0x82218788
	ctx.lr = 0x826B08EC;
	sub_82218788(ctx, base);
	// b 0x826b0918
	goto loc_826B0918;
loc_826B08F0:
	// lwz r31,-10244(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-21884
	ctx.r4.s64 = ctx.r10.s64 + -21884;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82218310
	ctx.lr = 0x826B0904;
	sub_82218310(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r9,-21868
	ctx.r4.s64 = ctx.r9.s64 + -21868;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822183b0
	ctx.lr = 0x826B0918;
	sub_822183B0(ctx, base);
loc_826B0918:
	// mr r28,r17
	ctx.r28.u64 = ctx.r17.u64;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// beq cr6,0x826b0a60
	if (ctx.cr6.eq) goto loc_826B0A60;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// li r20,5
	ctx.r20.s64 = 5;
	// li r19,51
	ctx.r19.s64 = 51;
	// li r21,6
	ctx.r21.s64 = 6;
	// addi r23,r11,-21640
	ctx.r23.s64 = ctx.r11.s64 + -21640;
	// addi r22,r10,-14304
	ctx.r22.s64 = ctx.r10.s64 + -14304;
	// addi r26,r9,18884
	ctx.r26.s64 = ctx.r9.s64 + 18884;
	// addi r25,r8,-19624
	ctx.r25.s64 = ctx.r8.s64 + -19624;
loc_826B0950:
	// mulli r11,r28,68
	ctx.r11.s64 = ctx.r28.s64 * 68;
	// add r11,r11,r29
	ctx.r11.u64 = ctx.r11.u64 + ctx.r29.u64;
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// addi r30,r11,44
	ctx.r30.s64 = ctx.r11.s64 + 44;
	// bl 0x8268da78
	ctx.lr = 0x826B096C;
	sub_8268DA78(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x8268da78
	ctx.lr = 0x826B0980;
	sub_8268DA78(ctx, base);
	// cmpwi cr6,r28,1
	ctx.cr6.compare<int32_t>(ctx.r28.s32, 1, ctx.xer);
	// ble cr6,0x826b09b0
	if (!ctx.cr6.gt) goto loc_826B09B0;
	// lwz r11,748(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 748);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826b09b0
	if (!ctx.cr6.eq) goto loc_826B09B0;
	// stw r22,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r22.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// stw r20,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r20.u32);
	// beq cr6,0x826b0a50
	if (ctx.cr6.eq) goto loc_826B0A50;
	// stw r17,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r17.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
	// b 0x826b0a50
	goto loc_826B0A50;
loc_826B09B0:
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b09c0
	if (ctx.cr6.eq) goto loc_826B09C0;
	// stw r19,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r19.u32);
	// stw r24,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r24.u32);
loc_826B09C0:
	// cmplwi cr6,r28,4
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 4, ctx.xer);
	// bgt cr6,0x826b0a50
	if (ctx.cr6.gt) goto loc_826B0A50;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,2528
	ctx.r12.s64 = ctx.r12.s64 + 2528;
	// rlwinm r0,r28,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r28.u32 | (ctx.r28.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r28.u64) {
	case 0:
		goto loc_826B09F4;
	case 1:
		goto loc_826B0A1C;
	case 2:
		goto loc_826B0A28;
	case 3:
		goto loc_826B0A34;
	case 4:
		goto loc_826B0A40;
	default:
		__builtin_unreachable();
	}
	// lwz r19,2548(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2548);
	// lwz r19,2588(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2588);
	// lwz r19,2600(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2600);
	// lwz r19,2612(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2612);
	// lwz r19,2624(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 2624);
loc_826B09F4:
	// lfs f1,148(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 148);
	ctx.f1.f64 = double(temp.f32);
	// mr r5,r23
	ctx.r5.u64 = ctx.r23.u64;
	// stfd f1,40(r1)
	PPC_STORE_U64(ctx.r1.u32 + 40, ctx.f1.u64);
	// ld r6,40(r1)
	ctx.r6.u64 = PPC_LOAD_U64(ctx.r1.u32 + 40);
	// li r4,52
	ctx.r4.s64 = 52;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82137a08
	ctx.lr = 0x826B0A10;
	sub_82137A08(ctx, base);
	// stw r30,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r30.u32);
	// stw r21,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r21.u32);
	// b 0x826b0a50
	goto loc_826B0A50;
loc_826B0A1C:
	// lwz r11,144(r1)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r1.u32 + 144);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// b 0x826b0a4c
	goto loc_826B0A4C;
loc_826B0A28:
	// lwz r11,736(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 736);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// b 0x826b0a4c
	goto loc_826B0A4C;
loc_826B0A34:
	// lwz r11,740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 740);
	// stw r11,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r11.u32);
	// b 0x826b0a4c
	goto loc_826B0A4C;
loc_826B0A40:
	// lwz r11,740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 740);
	// mulli r10,r11,10000
	ctx.r10.s64 = ctx.r11.s64 * 10000;
	// stw r10,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r10.u32);
loc_826B0A4C:
	// stw r24,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r24.u32);
loc_826B0A50:
	// lwz r27,36(r27)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r27.u32 + 36);
	// addi r28,r28,1
	ctx.r28.s64 = ctx.r28.s64 + 1;
	// cmplwi cr6,r27,0
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, 0, ctx.xer);
	// bne cr6,0x826b0950
	if (!ctx.cr6.eq) goto loc_826B0950;
loc_826B0A60:
	// cmplwi cr6,r16,0
	ctx.cr6.compare<uint32_t>(ctx.r16.u32, 0, ctx.xer);
	// beq cr6,0x826b0a80
	if (ctx.cr6.eq) goto loc_826B0A80;
	// lwz r11,0(r16)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r16.u32 + 0);
	// mr r4,r18
	ctx.r4.u64 = ctx.r18.u64;
	// mr r3,r16
	ctx.r3.u64 = ctx.r16.u64;
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B0A80;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826B0A80:
	// lis r31,-32111
	ctx.r31.s64 = -2104426496;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// bl 0x826a7a28
	ctx.lr = 0x826B0A8C;
	sub_826A7A28(ctx, base);
	// clrlwi r11,r18,24
	ctx.r11.u64 = ctx.r18.u32 & 0xFF;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// cntlzw r9,r11
	ctx.r9.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// addi r30,r10,-10256
	ctx.r30.s64 = ctx.r10.s64 + -10256;
	// rlwinm r7,r9,27,31,31
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r5,r8,-10268
	ctx.r5.s64 = ctx.r8.s64 + -10268;
	// xori r6,r7,1
	ctx.r6.u64 = ctx.r7.u64 ^ 1;
	// bl 0x826a6140
	ctx.lr = 0x826B0AB8;
	sub_826A6140(ctx, base);
	// lis r6,-32121
	ctx.r6.s64 = -2105081856;
	// lis r5,-32247
	ctx.r5.s64 = -2113339392;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r5,r5,-14556
	ctx.r5.s64 = ctx.r5.s64 + -14556;
	// lwz r11,18508(r6)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r6.u32 + 18508);
	// lwz r6,508(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 508);
	// bl 0x826a6140
	ctx.lr = 0x826B0AD8;
	sub_826A6140(ctx, base);
	// addi r1,r1,368
	ctx.r1.s64 = ctx.r1.s64 + 368;
	// b 0x823d9218
	__restgprlr_16(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B0AE0"))) PPC_WEAK_FUNC(sub_826B0AE0);
PPC_FUNC_IMPL(__imp__sub_826B0AE0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r4
	ctx.r3.u64 = ctx.r4.u64;
	// lwz r10,720(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 720);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x826b0b14
	if (!ctx.cr6.eq) goto loc_826B0B14;
	// lwz r11,724(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 724);
	// cmplwi cr6,r11,1
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 1, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// beq cr6,0x826b0b18
	if (ctx.cr6.eq) goto loc_826B0B18;
loc_826B0B14:
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B0B18:
	// li r4,3
	ctx.r4.s64 = 3;
	// clrlwi r31,r11,24
	ctx.r31.u64 = ctx.r11.u32 & 0xFF;
	// bl 0x8268dcb0
	ctx.lr = 0x826B0B24;
	sub_8268DCB0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B0B38;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826b0b4c
	if (ctx.cr6.eq) goto loc_826B0B4C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-21808
	ctx.r4.s64 = ctx.r11.s64 + -21808;
	// b 0x826b0b54
	goto loc_826B0B54;
loc_826B0B4C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r4,r11,-21828
	ctx.r4.s64 = ctx.r11.s64 + -21828;
loc_826B0B54:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r31,-10244(r11)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82218310
	ctx.lr = 0x826B0B64;
	sub_82218310(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r10,-21844
	ctx.r4.s64 = ctx.r10.s64 + -21844;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x822183b0
	ctx.lr = 0x826B0B78;
	sub_822183B0(ctx, base);
	// lis r9,-32121
	ctx.r9.s64 = -2105081856;
	// lis r8,5
	ctx.r8.s64 = 327680;
	// ori r7,r8,4944
	ctx.r7.u64 = ctx.r8.u64 | 4944;
	// lwz r11,-10236(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -10236);
	// lwz r11,48(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 48);
	// lbzx r6,r11,r7
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r11.u32 + ctx.r7.u32);
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// beq cr6,0x826b0ba4
	if (ctx.cr6.eq) goto loc_826B0BA4;
	// addis r3,r11,5
	ctx.r3.s64 = ctx.r11.s64 + 327680;
	// addi r3,r3,4672
	ctx.r3.s64 = ctx.r3.s64 + 4672;
	// bl 0x8221b790
	ctx.lr = 0x826B0BA4;
	sub_8221B790(ctx, base);
loc_826B0BA4:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B0BB8"))) PPC_WEAK_FUNC(sub_826B0BB8);
PPC_FUNC_IMPL(__imp__sub_826B0BB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826B0BC0;
	__savegprlr_26(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,724(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// ble cr6,0x826b0d34
	if (!ctx.cr6.gt) goto loc_826B0D34;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B0BDC;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B0BF0;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B0BF8;
	sub_824E7110(ctx, base);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r29,r11,-29096
	ctx.r29.s64 = ctx.r11.s64 + -29096;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x824f92f8
	ctx.lr = 0x826B0C0C;
	sub_824F92F8(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826b0d34
	if (ctx.cr6.eq) goto loc_826B0D34;
	// lwz r11,76(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 76);
	// addi r30,r31,732
	ctx.r30.s64 = ctx.r31.s64 + 732;
	// stw r11,732(r31)
	PPC_STORE_U32(ctx.r31.u32 + 732, ctx.r11.u32);
	// lwz r11,80(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 80);
	// stw r11,736(r31)
	PPC_STORE_U32(ctx.r31.u32 + 736, ctx.r11.u32);
	// lwz r11,84(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 84);
	// stw r11,740(r31)
	PPC_STORE_U32(ctx.r31.u32 + 740, ctx.r11.u32);
	// lwz r11,88(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 88);
	// stw r11,744(r31)
	PPC_STORE_U32(ctx.r31.u32 + 744, ctx.r11.u32);
	// lwz r11,92(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 92);
	// stw r11,748(r31)
	PPC_STORE_U32(ctx.r31.u32 + 748, ctx.r11.u32);
	// lwz r11,744(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 744);
	// mulli r6,r11,10000
	ctx.r6.s64 = ctx.r11.s64 * 10000;
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// ble cr6,0x826b0d2c
	if (!ctx.cr6.gt) goto loc_826B0D2C;
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r4,r10,-21792
	ctx.r4.s64 = ctx.r10.s64 + -21792;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r28,-12440(r11)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12440);
	// lwz r27,0(r28)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r28.u32 + 0);
	// bl 0x8238dbb0
	ctx.lr = 0x826B0C74;
	sub_8238DBB0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// lwz r9,40(r27)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r27.u32 + 40);
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826B0C88;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32121
	ctx.r8.s64 = -2105081856;
	// lwz r7,744(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 744);
	// mulli r4,r7,10000
	ctx.r4.s64 = ctx.r7.s64 * 10000;
	// lwz r3,18508(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 18508);
	// bl 0x826b93e0
	ctx.lr = 0x826B0C9C;
	sub_826B93E0(ctx, base);
	// li r27,0
	ctx.r27.s64 = 0;
	// lis r6,-32121
	ctx.r6.s64 = -2105081856;
	// stw r27,744(r31)
	PPC_STORE_U32(ctx.r31.u32 + 744, ctx.r27.u32);
	// lis r5,-32125
	ctx.r5.s64 = -2105344000;
	// addi r26,r31,28
	ctx.r26.s64 = ctx.r31.s64 + 28;
	// lwz r3,-3624(r6)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r6.u32 + -3624);
	// lwz r28,-27868(r5)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r5.u32 + -27868);
	// bl 0x8226ce68
	ctx.lr = 0x826B0CBC;
	sub_8226CE68(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// li r7,64
	ctx.r7.s64 = 64;
	// mr r8,r29
	ctx.r8.u64 = ctx.r29.u64;
	// mr r9,r26
	ctx.r9.u64 = ctx.r26.u64;
	// bl 0x824f7638
	ctx.lr = 0x826B0CD8;
	sub_824F7638(ctx, base);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,6
	ctx.r4.s64 = 6;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B0CEC;
	sub_8268EE10(ctx, base);
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// li r5,5
	ctx.r5.s64 = 5;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r3,-21988
	ctx.r3.s64 = ctx.r3.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B0D00;
	sub_82130000(ctx, base);
	// lwz r11,20(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b0d18
	if (ctx.cr6.eq) goto loc_826B0D18;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B0D18;
	sub_826AFCC8(ctx, base);
loc_826B0D18:
	// li r11,5
	ctx.r11.s64 = 5;
	// stw r27,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r27.u32);
	// stw r11,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r11.u32);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826B0D2C:
	// li r4,3
	ctx.r4.s64 = 3;
	// b 0x826b0d38
	goto loc_826B0D38;
loc_826B0D34:
	// li r4,1
	ctx.r4.s64 = 1;
loc_826B0D38:
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B0D48;
	sub_8268EE10(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B0D50"))) PPC_WEAK_FUNC(sub_826B0D50);
PPC_FUNC_IMPL(__imp__sub_826B0D50) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e4
	ctx.lr = 0x826B0D58;
	__savegprlr_23(ctx, base);
	// stwu r1,-272(r1)
	ea = -272 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r4
	ctx.r31.u64 = ctx.r4.u64;
	// addi r11,r11,-21292
	ctx.r11.s64 = ctx.r11.s64 + -21292;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lis r30,-32244
	ctx.r30.s64 = -2113142784;
	// stw r11,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r11.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// lis r4,-32244
	ctx.r4.s64 = -2113142784;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// addi r10,r10,-21308
	ctx.r10.s64 = ctx.r10.s64 + -21308;
	// addi r11,r30,-21336
	ctx.r11.s64 = ctx.r30.s64 + -21336;
	// addi r8,r8,-21372
	ctx.r8.s64 = ctx.r8.s64 + -21372;
	// stw r10,88(r1)
	PPC_STORE_U32(ctx.r1.u32 + 88, ctx.r10.u32);
	// addi r7,r7,-21412
	ctx.r7.s64 = ctx.r7.s64 + -21412;
	// stw r11,144(r1)
	PPC_STORE_U32(ctx.r1.u32 + 144, ctx.r11.u32);
	// addi r6,r6,-21464
	ctx.r6.s64 = ctx.r6.s64 + -21464;
	// stw r8,96(r1)
	PPC_STORE_U32(ctx.r1.u32 + 96, ctx.r8.u32);
	// addi r5,r5,-21516
	ctx.r5.s64 = ctx.r5.s64 + -21516;
	// stw r7,104(r1)
	PPC_STORE_U32(ctx.r1.u32 + 104, ctx.r7.u32);
	// addi r4,r4,-21532
	ctx.r4.s64 = ctx.r4.s64 + -21532;
	// stw r6,112(r1)
	PPC_STORE_U32(ctx.r1.u32 + 112, ctx.r6.u32);
	// lis r29,-32244
	ctx.r29.s64 = -2113142784;
	// stw r5,120(r1)
	PPC_STORE_U32(ctx.r1.u32 + 120, ctx.r5.u32);
	// addi r3,r3,-21564
	ctx.r3.s64 = ctx.r3.s64 + -21564;
	// stw r4,128(r1)
	PPC_STORE_U32(ctx.r1.u32 + 128, ctx.r4.u32);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// lis r28,-32244
	ctx.r28.s64 = -2113142784;
	// stw r3,136(r1)
	PPC_STORE_U32(ctx.r1.u32 + 136, ctx.r3.u32);
	// lis r27,-32244
	ctx.r27.s64 = -2113142784;
	// lis r26,-32244
	ctx.r26.s64 = -2113142784;
	// lis r25,-32244
	ctx.r25.s64 = -2113142784;
	// lis r24,-32244
	ctx.r24.s64 = -2113142784;
	// lis r23,-32244
	ctx.r23.s64 = -2113142784;
	// addi r10,r29,-21600
	ctx.r10.s64 = ctx.r29.s64 + -21600;
	// addi r9,r9,-21616
	ctx.r9.s64 = ctx.r9.s64 + -21616;
	// addi r8,r28,-21660
	ctx.r8.s64 = ctx.r28.s64 + -21660;
	// stw r10,152(r1)
	PPC_STORE_U32(ctx.r1.u32 + 152, ctx.r10.u32);
	// addi r7,r27,-21676
	ctx.r7.s64 = ctx.r27.s64 + -21676;
	// stw r9,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r9.u32);
	// addi r6,r26,-21716
	ctx.r6.s64 = ctx.r26.s64 + -21716;
	// stw r9,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r9.u32);
	// addi r5,r25,-21732
	ctx.r5.s64 = ctx.r25.s64 + -21732;
	// stw r9,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r9.u32);
	// addi r4,r24,-21752
	ctx.r4.s64 = ctx.r24.s64 + -21752;
	// stw r9,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r9.u32);
	// li r11,0
	ctx.r11.s64 = 0;
	// stw r9,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r9.u32);
	// lis r30,-32130
	ctx.r30.s64 = -2105671680;
	// stw r9,132(r1)
	PPC_STORE_U32(ctx.r1.u32 + 132, ctx.r9.u32);
	// lis r29,-32130
	ctx.r29.s64 = -2105671680;
	// stw r9,140(r1)
	PPC_STORE_U32(ctx.r1.u32 + 140, ctx.r9.u32);
	// addi r3,r23,-21772
	ctx.r3.s64 = ctx.r23.s64 + -21772;
	// stw r9,148(r1)
	PPC_STORE_U32(ctx.r1.u32 + 148, ctx.r9.u32);
	// addi r30,r30,-17888
	ctx.r30.s64 = ctx.r30.s64 + -17888;
	// stw r11,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r11.u32);
	// addi r29,r29,-22108
	ctx.r29.s64 = ctx.r29.s64 + -22108;
	// stw r9,156(r1)
	PPC_STORE_U32(ctx.r1.u32 + 156, ctx.r9.u32);
	// stw r8,160(r1)
	PPC_STORE_U32(ctx.r1.u32 + 160, ctx.r8.u32);
	// stw r7,164(r1)
	PPC_STORE_U32(ctx.r1.u32 + 164, ctx.r7.u32);
	// stw r6,168(r1)
	PPC_STORE_U32(ctx.r1.u32 + 168, ctx.r6.u32);
	// stw r9,172(r1)
	PPC_STORE_U32(ctx.r1.u32 + 172, ctx.r9.u32);
	// stw r5,176(r1)
	PPC_STORE_U32(ctx.r1.u32 + 176, ctx.r5.u32);
	// stw r9,180(r1)
	PPC_STORE_U32(ctx.r1.u32 + 180, ctx.r9.u32);
	// stw r4,184(r1)
	PPC_STORE_U32(ctx.r1.u32 + 184, ctx.r4.u32);
	// stw r9,188(r1)
	PPC_STORE_U32(ctx.r1.u32 + 188, ctx.r9.u32);
	// bl 0x821fa230
	ctx.lr = 0x826B0E70;
	sub_821FA230(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r5,r29
	ctx.r5.u64 = ctx.r29.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x823dedd8
	ctx.lr = 0x826B0E84;
	sub_823DEDD8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// cmpwi cr6,r31,-1
	ctx.cr6.compare<int32_t>(ctx.r31.s32, -1, ctx.xer);
	// bne cr6,0x826b0e98
	if (!ctx.cr6.eq) goto loc_826B0E98;
	// li r31,13
	ctx.r31.s64 = 13;
	// b 0x826b0ea8
	goto loc_826B0EA8;
loc_826B0E98:
	// cmpwi cr6,r31,0
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// blt cr6,0x826b0ee0
	if (ctx.cr6.lt) goto loc_826B0EE0;
	// cmpwi cr6,r31,14
	ctx.cr6.compare<int32_t>(ctx.r31.s32, 14, ctx.xer);
	// bgt cr6,0x826b0ee0
	if (ctx.cr6.gt) goto loc_826B0EE0;
loc_826B0EA8:
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// rlwinm r31,r31,3,0,28
	ctx.r31.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 3) & 0xFFFFFFF8;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r3,r10,-21784
	ctx.r3.s64 = ctx.r10.s64 + -21784;
	// lwzx r4,r31,r11
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	// bl 0x82130000
	ctx.lr = 0x826B0EC0;
	sub_82130000(ctx, base);
	// addi r9,r1,84
	ctx.r9.s64 = ctx.r1.s64 + 84;
	// lwzx r4,r31,r9
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	// cmplwi cr6,r4,0
	ctx.cr6.compare<uint32_t>(ctx.r4.u32, 0, ctx.xer);
	// beq cr6,0x826b0ee0
	if (ctx.cr6.eq) goto loc_826B0EE0;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826b0ee0
	if (ctx.cr6.eq) goto loc_826B0EE0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82637dd8
	ctx.lr = 0x826B0EE0;
	sub_82637DD8(ctx, base);
loc_826B0EE0:
	// addi r1,r1,272
	ctx.r1.s64 = ctx.r1.s64 + 272;
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B0EE8"))) PPC_WEAK_FUNC(sub_826B0EE8);
PPC_FUNC_IMPL(__imp__sub_826B0EE8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B0F08;
	sub_82388580(ctx, base);
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// lwz r4,4(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r3,-10240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B0F18;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e70e0
	ctx.lr = 0x826B0F20;
	sub_824E70E0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b0f5c
	if (ctx.cr6.eq) goto loc_826B0F5C;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B0F34;
	sub_82388580(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r3,-10240(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10240);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x82270170
	ctx.lr = 0x826B0F44;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e70f0
	ctx.lr = 0x826B0F4C;
	sub_824E70F0(ctx, base);
	// clrlwi r10,r3,24
	ctx.r10.u64 = ctx.r3.u32 & 0xFF;
	// li r4,0
	ctx.r4.s64 = 0;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b0f60
	if (!ctx.cr6.eq) goto loc_826B0F60;
loc_826B0F5C:
	// li r4,10
	ctx.r4.s64 = 10;
loc_826B0F60:
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B0F70;
	sub_8268EE10(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B0F88"))) PPC_WEAK_FUNC(sub_826B0F88);
PPC_FUNC_IMPL(__imp__sub_826B0F88) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d8
	ctx.lr = 0x826B0F90;
	__savegprlr_20(ctx, base);
	// stwu r1,-256(r1)
	ea = -256 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r20,r4
	ctx.r20.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B0FAC;
	sub_822A3998(ctx, base);
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// lwz r31,48(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// li r25,0
	ctx.r25.s64 = 0;
	// stb r25,72(r27)
	PPC_STORE_U8(ctx.r27.u32 + 72, ctx.r25.u8);
	// lwz r11,-29212(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -29212);
	// stw r11,68(r27)
	PPC_STORE_U32(ctx.r27.u32 + 68, ctx.r11.u32);
	// lwz r3,84(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// bl 0x8233b608
	ctx.lr = 0x826B0FCC;
	sub_8233B608(ctx, base);
	// lis r9,-32111
	ctx.r9.s64 = -2104426496;
	// stb r3,73(r27)
	PPC_STORE_U8(ctx.r27.u32 + 73, ctx.r3.u8);
	// li r26,1
	ctx.r26.s64 = 1;
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,-29340(r9)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r9.u32 + -29340);
	// stb r26,21668(r11)
	PPC_STORE_U8(ctx.r11.u32 + 21668, ctx.r26.u8);
	// lwz r3,-29340(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + -29340);
	// bl 0x826b34f8
	ctx.lr = 0x826B0FF0;
	sub_826B34F8(ctx, base);
	// lwz r8,76(r27)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r27.u32 + 76);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b1218
	if (ctx.cr6.eq) goto loc_826B1218;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r24,r25
	ctx.r24.u64 = ctx.r25.u64;
	// mr r23,r25
	ctx.r23.u64 = ctx.r25.u64;
	// mr r21,r25
	ctx.r21.u64 = ctx.r25.u64;
	// bl 0x82332098
	ctx.lr = 0x826B1010;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1050
	if (!ctx.cr6.eq) goto loc_826B1050;
	// lwz r11,84(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b103c
	if (ctx.cr6.eq) goto loc_826B103C;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// bne cr6,0x826b1040
	if (!ctx.cr6.eq) goto loc_826B1040;
loc_826B103C:
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_826B1040:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// mr r22,r26
	ctx.r22.u64 = ctx.r26.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1054
	if (!ctx.cr6.eq) goto loc_826B1054;
loc_826B1050:
	// mr r22,r25
	ctx.r22.u64 = ctx.r25.u64;
loc_826B1054:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x82332098
	ctx.lr = 0x826B105C;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1098
	if (!ctx.cr6.eq) goto loc_826B1098;
	// lwz r11,84(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 84);
	// lwz r11,84(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b1088
	if (ctx.cr6.eq) goto loc_826B1088;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// bne cr6,0x826b108c
	if (!ctx.cr6.eq) goto loc_826B108C;
loc_826B1088:
	// mr r11,r25
	ctx.r11.u64 = ctx.r25.u64;
loc_826B108C:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b109c
	if (!ctx.cr6.eq) goto loc_826B109C;
loc_826B1098:
	// mr r26,r25
	ctx.r26.u64 = ctx.r25.u64;
loc_826B109C:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,76(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 76);
	// bl 0x8268dcb0
	ctx.lr = 0x826B10A8;
	sub_8268DCB0(ctx, base);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826b1200
	if (ctx.cr6.eq) goto loc_826B1200;
	// lis r11,-32251
	ctx.r11.s64 = -2113601536;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lis r9,-32249
	ctx.r9.s64 = -2113470464;
	// addi r29,r11,2656
	ctx.r29.s64 = ctx.r11.s64 + 2656;
	// addi r28,r10,-21284
	ctx.r28.s64 = ctx.r10.s64 + -21284;
	// addi r30,r9,-4516
	ctx.r30.s64 = ctx.r9.s64 + -4516;
loc_826B10CC:
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r10,332(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 332);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B10E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// li r8,63
	ctx.r8.s64 = 63;
loc_826B10E8:
	// lbz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r3.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826b1140
	if (ctx.cr6.eq) goto loc_826B1140;
	// stb r9,0(r11)
	PPC_STORE_U8(ctx.r11.u32 + 0, ctx.r9.u8);
	// addi r10,r3,1
	ctx.r10.s64 = ctx.r3.s64 + 1;
	// lbz r9,1(r3)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r3.u32 + 1);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826b1134
	if (ctx.cr6.eq) goto loc_826B1134;
	// stb r9,1(r11)
	PPC_STORE_U8(ctx.r11.u32 + 1, ctx.r9.u8);
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// lbz r9,0(r10)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r10.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826b113c
	if (ctx.cr6.eq) goto loc_826B113C;
	// stb r9,2(r11)
	PPC_STORE_U8(ctx.r11.u32 + 2, ctx.r9.u8);
	// addic. r8,r8,-3
	ctx.xer.ca = ctx.r8.u32 > 2;
	ctx.r8.s64 = ctx.r8.s64 + -3;
	ctx.cr0.compare<int32_t>(ctx.r8.s32, 0, ctx.xer);
	// addi r3,r10,1
	ctx.r3.s64 = ctx.r10.s64 + 1;
	// addi r11,r11,3
	ctx.r11.s64 = ctx.r11.s64 + 3;
	// bgt 0x826b10e8
	if (ctx.cr0.gt) goto loc_826B10E8;
	// b 0x826b1140
	goto loc_826B1140;
loc_826B1134:
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// b 0x826b1140
	goto loc_826B1140;
loc_826B113C:
	// addi r11,r11,2
	ctx.r11.s64 = ctx.r11.s64 + 2;
loc_826B1140:
	// stb r25,0(r11)
	PPC_STORE_U8(ctx.r11.u32 + 0, ctx.r25.u8);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823defc8
	ctx.lr = 0x826B114C;
	sub_823DEFC8(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823d90b0
	ctx.lr = 0x826B1158;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b1164
	if (ctx.cr6.eq) goto loc_826B1164;
	// mr r24,r31
	ctx.r24.u64 = ctx.r31.u64;
loc_826B1164:
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823d90b0
	ctx.lr = 0x826B1170;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b117c
	if (ctx.cr6.eq) goto loc_826B117C;
	// mr r23,r31
	ctx.r23.u64 = ctx.r31.u64;
loc_826B117C:
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x823d90b0
	ctx.lr = 0x826B1188;
	sub_823D90B0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b1194
	if (ctx.cr6.eq) goto loc_826B1194;
	// mr r21,r31
	ctx.r21.u64 = ctx.r31.u64;
loc_826B1194:
	// lwz r31,36(r31)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r31.u32 + 36);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// bne cr6,0x826b10cc
	if (!ctx.cr6.eq) goto loc_826B10CC;
	// cmplwi cr6,r24,0
	ctx.cr6.compare<uint32_t>(ctx.r24.u32, 0, ctx.xer);
	// beq cr6,0x826b11c0
	if (ctx.cr6.eq) goto loc_826B11C0;
	// lwz r11,0(r24)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// mr r3,r24
	ctx.r3.u64 = ctx.r24.u64;
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B11C0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826B11C0:
	// cmplwi cr6,r23,0
	ctx.cr6.compare<uint32_t>(ctx.r23.u32, 0, ctx.xer);
	// beq cr6,0x826b11e0
	if (ctx.cr6.eq) goto loc_826B11E0;
	// lwz r11,0(r23)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r23.u32 + 0);
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// mr r3,r23
	ctx.r3.u64 = ctx.r23.u64;
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B11E0;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826B11E0:
	// cmplwi cr6,r21,0
	ctx.cr6.compare<uint32_t>(ctx.r21.u32, 0, ctx.xer);
	// beq cr6,0x826b1200
	if (ctx.cr6.eq) goto loc_826B1200;
	// lwz r11,0(r21)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r21.u32 + 0);
	// mr r4,r22
	ctx.r4.u64 = ctx.r22.u64;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// lwz r10,76(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B1200;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826B1200:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,76(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 76);
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r11,-10236(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// lwz r3,52(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// bl 0x82220b30
	ctx.lr = 0x826B1218;
	sub_82220B30(ctx, base);
loc_826B1218:
	// mr r4,r20
	ctx.r4.u64 = ctx.r20.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x82635178
	ctx.lr = 0x826B1224;
	sub_82635178(ctx, base);
	// addi r1,r1,256
	ctx.r1.s64 = ctx.r1.s64 + 256;
	// b 0x823d9228
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B122C"))) PPC_WEAK_FUNC(sub_826B122C);
PPC_FUNC_IMPL(__imp__sub_826B122C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B1230"))) PPC_WEAK_FUNC(sub_826B1230);
PPC_FUNC_IMPL(__imp__sub_826B1230) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826B1238;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// mr r31,r5
	ctx.r31.u64 = ctx.r5.u64;
	// mr r29,r7
	ctx.r29.u64 = ctx.r7.u64;
	// bl 0x82635be0
	ctx.lr = 0x826B124C;
	sub_82635BE0(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B1260;
	sub_822A3998(ctx, base);
	// lwz r30,48(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// li r26,1
	ctx.r26.s64 = 1;
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826b12c0
	if (ctx.cr6.eq) goto loc_826B12C0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82332098
	ctx.lr = 0x826B1278;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b12c0
	if (!ctx.cr6.eq) goto loc_826B12C0;
	// lwz r11,84(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 84);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b12c0
	if (ctx.cr6.eq) goto loc_826B12C0;
	// lwz r11,12(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b12ac
	if (ctx.cr6.eq) goto loc_826B12AC;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// bne cr6,0x826b12b0
	if (!ctx.cr6.eq) goto loc_826B12B0;
loc_826B12AC:
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B12B0:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// bne cr6,0x826b12c4
	if (!ctx.cr6.eq) goto loc_826B12C4;
loc_826B12C0:
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B12C4:
	// clrlwi r10,r28,24
	ctx.r10.u64 = ctx.r28.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b1494
	if (!ctx.cr6.eq) goto loc_826B1494;
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b1494
	if (ctx.cr6.eq) goto loc_826B1494;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r11,-10236(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// lwz r10,52(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// addis r9,r10,4
	ctx.r9.s64 = ctx.r10.s64 + 262144;
	// addi r9,r9,976
	ctx.r9.s64 = ctx.r9.s64 + 976;
	// cmplw cr6,r31,r9
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, ctx.r9.u32, ctx.xer);
	// bne cr6,0x826b1494
	if (!ctx.cr6.eq) goto loc_826B1494;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82332098
	ctx.lr = 0x826B1300;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1340
	if (!ctx.cr6.eq) goto loc_826B1340;
	// lwz r11,84(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 84);
	// lwz r11,84(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 84);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b132c
	if (ctx.cr6.eq) goto loc_826B132C;
	// lwz r11,76(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 76);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r26
	ctx.r11.u64 = ctx.r26.u64;
	// bne cr6,0x826b1330
	if (!ctx.cr6.eq) goto loc_826B1330;
loc_826B132C:
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B1330:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// mr r10,r26
	ctx.r10.u64 = ctx.r26.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1344
	if (!ctx.cr6.eq) goto loc_826B1344;
loc_826B1340:
	// li r10,0
	ctx.r10.s64 = 0;
loc_826B1344:
	// lwz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	// cmpwi cr6,r11,10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 10, ctx.xer);
	// beq cr6,0x826b1418
	if (ctx.cr6.eq) goto loc_826B1418;
	// cmpwi cr6,r11,11
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 11, ctx.xer);
	// beq cr6,0x826b13c0
	if (ctx.cr6.eq) goto loc_826B13C0;
	// cmpwi cr6,r11,57
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 57, ctx.xer);
	// bne cr6,0x826b147c
	if (!ctx.cr6.eq) goto loc_826B147C;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82332098
	ctx.lr = 0x826B1368;
	sub_82332098(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1478
	if (!ctx.cr6.eq) goto loc_826B1478;
	// lis r31,-32111
	ctx.r31.s64 = -2104426496;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// bl 0x826afb70
	ctx.lr = 0x826B1380;
	sub_826AFB70(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b13b0
	if (ctx.cr6.eq) goto loc_826B13B0;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,68(r27)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r27.u32 + 68);
	// bl 0x826b34f8
	ctx.lr = 0x826B139C;
	sub_826B34F8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r3,-29340(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + -29340);
	// bl 0x826b34f8
	ctx.lr = 0x826B13AC;
	sub_826B34F8(ctx, base);
	// b 0x826b1478
	goto loc_826B1478;
loc_826B13B0:
	// li r4,3
	ctx.r4.s64 = 3;
	// li r5,1
	ctx.r5.s64 = 1;
	// bl 0x826b34f8
	ctx.lr = 0x826B13BC;
	sub_826B34F8(ctx, base);
	// b 0x826b1478
	goto loc_826B1478;
loc_826B13C0:
	// lwz r3,84(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 84);
	// bl 0x8233ef60
	ctx.lr = 0x826B13C8;
	sub_8233EF60(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b147c
	if (!ctx.cr6.eq) goto loc_826B147C;
	// lbz r11,72(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 72);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r3,-29340(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29340);
	// beq cr6,0x826b1400
	if (ctx.cr6.eq) goto loc_826B1400;
	// bl 0x82699418
	ctx.lr = 0x826B13EC;
	sub_82699418(ctx, base);
	// lbz r11,72(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 72);
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stb r9,72(r27)
	PPC_STORE_U8(ctx.r27.u32 + 72, ctx.r9.u8);
	// b 0x826b1478
	goto loc_826B1478;
loc_826B1400:
	// bl 0x82699380
	ctx.lr = 0x826B1404;
	sub_82699380(ctx, base);
	// lbz r11,72(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 72);
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stb r9,72(r27)
	PPC_STORE_U8(ctx.r27.u32 + 72, ctx.r9.u8);
	// b 0x826b1478
	goto loc_826B1478;
loc_826B1418:
	// clrlwi r11,r10,24
	ctx.r11.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b147c
	if (ctx.cr6.eq) goto loc_826B147C;
	// lwz r3,84(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 84);
	// bl 0x8233f010
	ctx.lr = 0x826B142C;
	sub_8233F010(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b147c
	if (!ctx.cr6.eq) goto loc_826B147C;
	// lwz r3,84(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 84);
	// bl 0x8233eef0
	ctx.lr = 0x826B1440;
	sub_8233EEF0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b147c
	if (!ctx.cr6.eq) goto loc_826B147C;
	// lbz r11,73(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 73);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lwz r11,84(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 84);
	// beq cr6,0x826b1464
	if (ctx.cr6.eq) goto loc_826B1464;
	// stb r26,2159(r11)
	PPC_STORE_U8(ctx.r11.u32 + 2159, ctx.r26.u8);
	// b 0x826b1468
	goto loc_826B1468;
loc_826B1464:
	// stb r26,2160(r11)
	PPC_STORE_U8(ctx.r11.u32 + 2160, ctx.r26.u8);
loc_826B1468:
	// lbz r11,73(r27)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r27.u32 + 73);
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r9,r10,27,31,31
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
	// stb r9,73(r27)
	PPC_STORE_U8(ctx.r27.u32 + 73, ctx.r9.u8);
loc_826B1478:
	// mr r28,r26
	ctx.r28.u64 = ctx.r26.u64;
loc_826B147C:
	// clrlwi r11,r28,24
	ctx.r11.u64 = ctx.r28.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b1494
	if (ctx.cr6.eq) goto loc_826B1494;
	// lis r11,-32126
	ctx.r11.s64 = -2105409536;
	// lwz r3,24588(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 24588);
	// bl 0x821e6800
	ctx.lr = 0x826B1494;
	sub_821E6800(ctx, base);
loc_826B1494:
	// mr r3,r28
	ctx.r3.u64 = ctx.r28.u64;
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B14A0"))) PPC_WEAK_FUNC(sub_826B14A0);
PPC_FUNC_IMPL(__imp__sub_826B14A0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r11,520(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b1508
	if (ctx.cr6.eq) goto loc_826B1508;
loc_826B14C8:
	// lwz r10,520(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// addi r10,r10,-1
	ctx.r10.s64 = ctx.r10.s64 + -1;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r10,520(r31)
	PPC_STORE_U32(ctx.r31.u32 + 520, ctx.r10.u32);
	// stw r11,516(r31)
	PPC_STORE_U32(ctx.r31.u32 + 516, ctx.r11.u32);
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// bne cr6,0x826b14ec
	if (!ctx.cr6.eq) goto loc_826B14EC;
	// stw r30,516(r31)
	PPC_STORE_U32(ctx.r31.u32 + 516, ctx.r30.u32);
loc_826B14EC:
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// rlwinm r11,r11,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r31
	ctx.r3.u64 = ctx.r11.u64 + ctx.r31.u64;
	// bl 0x824f9230
	ctx.lr = 0x826B14FC;
	sub_824F9230(ctx, base);
	// lwz r10,520(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// bne cr6,0x826b14c8
	if (!ctx.cr6.eq) goto loc_826B14C8;
loc_826B1508:
	// stw r30,520(r31)
	PPC_STORE_U32(ctx.r31.u32 + 520, ctx.r30.u32);
	// stw r30,516(r31)
	PPC_STORE_U32(ctx.r31.u32 + 516, ctx.r30.u32);
	// stw r30,512(r31)
	PPC_STORE_U32(ctx.r31.u32 + 512, ctx.r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B152C"))) PPC_WEAK_FUNC(sub_826B152C);
PPC_FUNC_IMPL(__imp__sub_826B152C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B1530"))) PPC_WEAK_FUNC(sub_826B1530);
PPC_FUNC_IMPL(__imp__sub_826B1530) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826B1538;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r30,0
	ctx.r30.s64 = 0;
	// lwz r11,520(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// ble cr6,0x826b159c
	if (!ctx.cr6.gt) goto loc_826B159C;
loc_826B1554:
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// add r11,r30,r11
	ctx.r11.u64 = ctx.r30.u64 + ctx.r11.u64;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// srawi r10,r11,5
	ctx.xer.ca = (ctx.r11.s32 < 0) & ((ctx.r11.u32 & 0x1F) != 0);
	ctx.r10.s64 = ctx.r11.s32 >> 5;
	// addze r9,r10
	temp.s64 = ctx.r10.s64 + ctx.xer.ca;
	ctx.xer.ca = temp.u32 < ctx.r10.u32;
	ctx.r9.s64 = temp.s64;
	// rlwinm r8,r9,5,0,26
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 5) & 0xFFFFFFE0;
	// subf r7,r8,r11
	ctx.r7.s64 = ctx.r11.s64 - ctx.r8.s64;
	// rlwinm r11,r7,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r31
	ctx.r3.u64 = ctx.r11.u64 + ctx.r31.u64;
	// bl 0x824f92f8
	ctx.lr = 0x826B1580;
	sub_824F92F8(ctx, base);
	// clrlwi r6,r3,24
	ctx.r6.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// bne cr6,0x826b15a8
	if (!ctx.cr6.eq) goto loc_826B15A8;
	// lwz r11,520(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// addi r30,r30,1
	ctx.r30.s64 = ctx.r30.s64 + 1;
	// cmpw cr6,r30,r11
	ctx.cr6.compare<int32_t>(ctx.r30.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x826b1554
	if (ctx.cr6.lt) goto loc_826B1554;
loc_826B159C:
	// li r3,-1
	ctx.r3.s64 = -1;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826B15A8:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B15B4"))) PPC_WEAK_FUNC(sub_826B15B4);
PPC_FUNC_IMPL(__imp__sub_826B15B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B15B8"))) PPC_WEAK_FUNC(sub_826B15B8);
PPC_FUNC_IMPL(__imp__sub_826B15B8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r11,-21276
	ctx.r3.s64 = ctx.r11.s64 + -21276;
	// bl 0x82130000
	ctx.lr = 0x826B15DC;
	sub_82130000(ctx, base);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lis r9,3
	ctx.r9.s64 = 196608;
	// li r30,0
	ctx.r30.s64 = 0;
	// ori r11,r9,8191
	ctx.r11.u64 = ctx.r9.u64 | 8191;
	// li r8,1
	ctx.r8.s64 = 1;
	// stw r30,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r30.u32);
	// lfs f0,3796(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// stw r30,724(r31)
	PPC_STORE_U32(ctx.r31.u32 + 724, ctx.r30.u32);
	// stfs f0,36(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 36, temp.u32);
	// stw r30,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r30.u32);
	// stw r30,9092(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9092, ctx.r30.u32);
	// stw r11,9096(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9096, ctx.r11.u32);
	// stw r11,9100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9100, ctx.r11.u32);
	// stw r30,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r30.u32);
	// stb r8,16(r31)
	PPC_STORE_U8(ctx.r31.u32 + 16, ctx.r8.u8);
	// stw r30,880(r31)
	PPC_STORE_U32(ctx.r31.u32 + 880, ctx.r30.u32);
	// bl 0x82387b90
	ctx.lr = 0x826B1620;
	sub_82387B90(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// addi r3,r6,-14720
	ctx.r3.s64 = ctx.r6.s64 + -14720;
	// lwz r5,1344(r7)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r7.u32 + 1344);
	// stw r5,17280(r31)
	PPC_STORE_U32(ctx.r31.u32 + 17280, ctx.r5.u32);
	// stw r30,796(r31)
	PPC_STORE_U32(ctx.r31.u32 + 796, ctx.r30.u32);
	// bl 0x821fa230
	ctx.lr = 0x826B163C;
	sub_821FA230(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b1658
	if (ctx.cr6.eq) goto loc_826B1658;
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r10,120(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 120);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B1658;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
loc_826B1658:
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,7
	ctx.r4.s64 = 7;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B166C;
	sub_8268EE10(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B1684"))) PPC_WEAK_FUNC(sub_826B1684);
PPC_FUNC_IMPL(__imp__sub_826B1684) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B1688"))) PPC_WEAK_FUNC(sub_826B1688);
PPC_FUNC_IMPL(__imp__sub_826B1688) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e4
	ctx.lr = 0x826B1690;
	__savegprlr_23(ctx, base);
	// stwu r1,-240(r1)
	ea = -240 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r27,r5
	ctx.r27.u64 = ctx.r5.u64;
	// mr r23,r6
	ctx.r23.u64 = ctx.r6.u64;
	// mr r26,r7
	ctx.r26.u64 = ctx.r7.u64;
	// mr r24,r8
	ctx.r24.u64 = ctx.r8.u64;
	// bl 0x82618750
	ctx.lr = 0x826B16B4;
	sub_82618750(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// bl 0x8226ce68
	ctx.lr = 0x826B16C0;
	sub_8226CE68(ctx, base);
	// addi r29,r31,888
	ctx.r29.s64 = ctx.r31.s64 + 888;
	// mr r25,r3
	ctx.r25.u64 = ctx.r3.u64;
	// li r5,8192
	ctx.r5.s64 = 8192;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x82618640
	ctx.lr = 0x826B16D8;
	sub_82618640(ctx, base);
	// addi r4,r1,128
	ctx.r4.s64 = ctx.r1.s64 + 128;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238fd38
	ctx.lr = 0x826B16E4;
	sub_8238FD38(ctx, base);
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// addi r28,r31,9092
	ctx.r28.s64 = ctx.r31.s64 + 9092;
	// bl 0x826186a0
	ctx.lr = 0x826B16F0;
	sub_826186A0(ctx, base);
	// stw r3,9092(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9092, ctx.r3.u32);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B16FC;
	sub_82388580(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// lis r10,-32121
	ctx.r10.s64 = -2105081856;
	// lwz r4,4(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 4);
	// lwz r3,-10240(r10)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r10.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B1710;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B1718;
	sub_824E7110(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x824f92f8
	ctx.lr = 0x826B1724;
	sub_824F92F8(ctx, base);
	// clrlwi r8,r3,24
	ctx.r8.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b1758
	if (ctx.cr6.eq) goto loc_826B1758;
	// lwz r11,884(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1748
	if (!ctx.cr6.eq) goto loc_826B1748;
	// li r3,8192
	ctx.r3.s64 = 8192;
	// bl 0x82130528
	ctx.lr = 0x826B1744;
	sub_82130528(ctx, base);
	// stw r3,884(r31)
	PPC_STORE_U32(ctx.r31.u32 + 884, ctx.r3.u32);
loc_826B1748:
	// li r5,8192
	ctx.r5.s64 = 8192;
	// lwz r3,884(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// bl 0x823da950
	ctx.lr = 0x826B1758;
	sub_823DA950(ctx, base);
loc_826B1758:
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x824f9270
	ctx.lr = 0x826B1760;
	sub_824F9270(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b18d0
	if (ctx.cr6.eq) goto loc_826B18D0;
	// addi r3,r1,128
	ctx.r3.s64 = ctx.r1.s64 + 128;
	// bl 0x826186a0
	ctx.lr = 0x826B1774;
	sub_826186A0(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// beq cr6,0x826b18d0
	if (ctx.cr6.eq) goto loc_826B18D0;
	// addi r29,r31,732
	ctx.r29.s64 = ctx.r31.s64 + 732;
	// mr r5,r27
	ctx.r5.u64 = ctx.r27.u64;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// bl 0x826b0340
	ctx.lr = 0x826B1790;
	sub_826B0340(ctx, base);
	// lis r27,-32121
	ctx.r27.s64 = -2105081856;
	// lwz r11,-10228(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -10228);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b17d8
	if (ctx.cr6.eq) goto loc_826B17D8;
	// lwz r10,456(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 456);
	// addi r3,r11,456
	ctx.r3.s64 = ctx.r11.s64 + 456;
	// lwz r9,312(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 312);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826B17B4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r8,r3,24
	ctx.r8.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b17d8
	if (ctx.cr6.eq) goto loc_826B17D8;
	// lwz r11,-10228(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -10228);
	// lwz r11,1152(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1152);
	// stw r11,9084(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9084, ctx.r11.u32);
	// lwz r11,-10228(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -10228);
	// lwz r10,1148(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1148);
	// stw r10,9088(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9088, ctx.r10.u32);
loc_826B17D8:
	// clrlwi r11,r23,24
	ctx.r11.u64 = ctx.r23.u32 & 0xFF;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// addi r27,r31,28
	ctx.r27.s64 = ctx.r31.s64 + 28;
	// addi r30,r11,-29096
	ctx.r30.s64 = ctx.r11.s64 + -29096;
	// beq cr6,0x826b183c
	if (ctx.cr6.eq) goto loc_826B183C;
	// addi r26,r31,36
	ctx.r26.s64 = ctx.r31.s64 + 36;
	// bl 0x8238f998
	ctx.lr = 0x826B17FC;
	sub_8238F998(ctx, base);
	// bl 0x82396248
	ctx.lr = 0x826B1800;
	sub_82396248(ctx, base);
	// lis r7,-32125
	ctx.r7.s64 = -2105344000;
	// stb r3,87(r1)
	PPC_STORE_U8(ctx.r1.u32 + 87, ctx.r3.u8);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// li r10,64
	ctx.r10.s64 = 64;
	// stw r30,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r30.u32);
	// mr r9,r29
	ctx.r9.u64 = ctx.r29.u64;
	// stw r26,100(r1)
	PPC_STORE_U32(ctx.r1.u32 + 100, ctx.r26.u32);
	// mr r8,r28
	ctx.r8.u64 = ctx.r28.u64;
	// stw r27,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r27.u32);
	// lwz r4,-27868(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + -27868);
	// addi r7,r31,9080
	ctx.r7.s64 = ctx.r31.s64 + 9080;
	// li r6,3
	ctx.r6.s64 = 3;
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824f7468
	ctx.lr = 0x826B1838;
	sub_824F7468(ctx, base);
	// b 0x826b188c
	goto loc_826B188C;
loc_826B183C:
	// addi r23,r31,36
	ctx.r23.s64 = ctx.r31.s64 + 36;
	// bl 0x8238f998
	ctx.lr = 0x826B1844;
	sub_8238F998(ctx, base);
	// bl 0x82396248
	ctx.lr = 0x826B1848;
	sub_82396248(ctx, base);
	// lis r7,-32125
	ctx.r7.s64 = -2105344000;
	// li r6,64
	ctx.r6.s64 = 64;
	// stb r3,103(r1)
	PPC_STORE_U8(ctx.r1.u32 + 103, ctx.r3.u8);
	// mr r10,r28
	ctx.r10.u64 = ctx.r28.u64;
	// stw r29,84(r1)
	PPC_STORE_U32(ctx.r1.u32 + 84, ctx.r29.u32);
	// stw r6,92(r1)
	PPC_STORE_U32(ctx.r1.u32 + 92, ctx.r6.u32);
	// addi r9,r31,9080
	ctx.r9.s64 = ctx.r31.s64 + 9080;
	// li r8,3
	ctx.r8.s64 = 3;
	// stw r30,108(r1)
	PPC_STORE_U32(ctx.r1.u32 + 108, ctx.r30.u32);
	// lwz r4,-27868(r7)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r7.u32 + -27868);
	// mr r7,r24
	ctx.r7.u64 = ctx.r24.u64;
	// mr r6,r26
	ctx.r6.u64 = ctx.r26.u64;
	// stw r23,116(r1)
	PPC_STORE_U32(ctx.r1.u32 + 116, ctx.r23.u32);
	// li r5,1
	ctx.r5.s64 = 1;
	// stw r27,124(r1)
	PPC_STORE_U32(ctx.r1.u32 + 124, ctx.r27.u32);
	// mr r3,r25
	ctx.r3.u64 = ctx.r25.u64;
	// bl 0x824f7308
	ctx.lr = 0x826B188C;
	sub_824F7308(ctx, base);
loc_826B188C:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// li r5,2
	ctx.r5.s64 = 2;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B18A0;
	sub_82130000(ctx, base);
	// lwz r10,20(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// beq cr6,0x826b18b8
	if (ctx.cr6.eq) goto loc_826B18B8;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B18B8;
	sub_826AFCC8(ctx, base);
loc_826B18B8:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,2
	ctx.r10.s64 = 2;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
loc_826B18D0:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ee8
	ctx.lr = 0x826B18D8;
	sub_826B0EE8(ctx, base);
	// addi r1,r1,240
	ctx.r1.s64 = ctx.r1.s64 + 240;
	// b 0x823d9234
	__restgprlr_23(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B18E0"))) PPC_WEAK_FUNC(sub_826B18E0);
PPC_FUNC_IMPL(__imp__sub_826B18E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d8
	ctx.lr = 0x826B18E8;
	__savegprlr_20(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r21,r4
	ctx.r21.u64 = ctx.r4.u64;
	// mr r22,r3
	ctx.r22.u64 = ctx.r3.u64;
	// li r20,1
	ctx.r20.s64 = 1;
	// cmplwi cr6,r21,0
	ctx.cr6.compare<uint32_t>(ctx.r21.u32, 0, ctx.xer);
	// beq cr6,0x826b1a38
	if (ctx.cr6.eq) goto loc_826B1A38;
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// lwz r31,724(r22)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r22.u32 + 724);
	// bl 0x8268daf8
	ctx.lr = 0x826B190C;
	sub_8268DAF8(ctx, base);
	// cmpw cr6,r3,r31
	ctx.cr6.compare<int32_t>(ctx.r3.s32, ctx.r31.s32, ctx.xer);
	// blt cr6,0x826b1a38
	if (ctx.cr6.lt) goto loc_826B1A38;
	// li r27,0
	ctx.r27.s64 = 0;
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826b1a38
	if (ctx.cr6.eq) goto loc_826B1A38;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lis r10,-32253
	ctx.r10.s64 = -2113732608;
	// addi r29,r11,-29096
	ctx.r29.s64 = ctx.r11.s64 + -29096;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// lis r9,-32254
	ctx.r9.s64 = -2113798144;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r31,r22,40
	ctx.r31.s64 = ctx.r22.s64 + 40;
	// li r28,6
	ctx.r28.s64 = 6;
	// addi r26,r11,-19612
	ctx.r26.s64 = ctx.r11.s64 + -19612;
	// addi r25,r10,2824
	ctx.r25.s64 = ctx.r10.s64 + 2824;
	// addi r24,r9,-19624
	ctx.r24.s64 = ctx.r9.s64 + -19624;
	// addi r23,r8,-27360
	ctx.r23.s64 = ctx.r8.s64 + -27360;
loc_826B1950:
	// mr r3,r21
	ctx.r3.u64 = ctx.r21.u64;
	// bl 0x8268db80
	ctx.lr = 0x826B1958;
	sub_8268DB80(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b04e8
	ctx.lr = 0x826B1968;
	sub_826B04E8(ctx, base);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826b1a38
	if (ctx.cr6.eq) goto loc_826B1A38;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
	// bgt cr6,0x826b1984
	if (ctx.cr6.gt) goto loc_826B1984;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B1984:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b1a38
	if (ctx.cr6.eq) goto loc_826B1A38;
	// mr r4,r23
	ctx.r4.u64 = ctx.r23.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826B19A0;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b19b4
	if (ctx.cr6.eq) goto loc_826B19B4;
	// lwz r11,0(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r20.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826B19B4:
	// mr r4,r24
	ctx.r4.u64 = ctx.r24.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826B19C4;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b19d8
	if (ctx.cr6.eq) goto loc_826B19D8;
	// addi r11,r31,4
	ctx.r11.s64 = ctx.r31.s64 + 4;
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826B19D8:
	// mr r4,r25
	ctx.r4.u64 = ctx.r25.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826B19E8;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b19fc
	if (ctx.cr6.eq) goto loc_826B19FC;
	// lwz r11,56(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 56);
	// stw r20,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r20.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826B19FC:
	// mr r4,r26
	ctx.r4.u64 = ctx.r26.u64;
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268da78
	ctx.lr = 0x826B1A0C;
	sub_8268DA78(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b1a20
	if (ctx.cr6.eq) goto loc_826B1A20;
	// addi r11,r31,60
	ctx.r11.s64 = ctx.r31.s64 + 60;
	// stw r28,0(r3)
	PPC_STORE_U32(ctx.r3.u32 + 0, ctx.r28.u32);
	// stw r11,4(r3)
	PPC_STORE_U32(ctx.r3.u32 + 4, ctx.r11.u32);
loc_826B1A20:
	// lwz r11,724(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 724);
	// addi r27,r27,1
	ctx.r27.s64 = ctx.r27.s64 + 1;
	// addi r29,r29,152
	ctx.r29.s64 = ctx.r29.s64 + 152;
	// addi r31,r31,68
	ctx.r31.s64 = ctx.r31.s64 + 68;
	// cmplw cr6,r27,r11
	ctx.cr6.compare<uint32_t>(ctx.r27.u32, ctx.r11.u32, ctx.xer);
	// blt cr6,0x826b1950
	if (ctx.cr6.lt) goto loc_826B1950;
loc_826B1A38:
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r4,r10,-21664
	ctx.r4.s64 = ctx.r10.s64 + -21664;
	// lwz r3,-10236(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826B1A4C;
	sub_821F9FB8(ctx, base);
	// lis r9,-32246
	ctx.r9.s64 = -2113273856;
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// addi r31,r9,14672
	ctx.r31.s64 = ctx.r9.s64 + 14672;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r30,56(r8)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + 56);
	// bl 0x821c9790
	ctx.lr = 0x826B1A68;
	sub_821C9790(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// mr r5,r31
	ctx.r5.u64 = ctx.r31.u64;
	// bl 0x825ed480
	ctx.lr = 0x826B1A78;
	sub_825ED480(ctx, base);
	// li r7,4
	ctx.r7.s64 = 4;
	// lis r6,-32255
	ctx.r6.s64 = -2113863680;
	// stw r7,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r7.u32);
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r6,-13284
	ctx.r4.s64 = ctx.r6.s64 + -13284;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x82722678
	ctx.lr = 0x826B1A94;
	sub_82722678(ctx, base);
	// lwz r4,796(r22)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r22.u32 + 796);
	// addi r5,r22,796
	ctx.r5.s64 = ctx.r22.s64 + 796;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
	// bgt cr6,0x826b1aac
	if (ctx.cr6.gt) goto loc_826B1AAC;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B1AAC:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b1b38
	if (ctx.cr6.eq) goto loc_826B1B38;
	// lwz r11,852(r22)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r22.u32 + 852);
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// bge cr6,0x826b1ae0
	if (!ctx.cr6.lt) goto loc_826B1AE0;
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r5,r11,-7580
	ctx.r5.s64 = ctx.r11.s64 + -7580;
	// addi r4,r10,20268
	ctx.r4.s64 = ctx.r10.s64 + 20268;
	// bl 0x827227b8
	ctx.lr = 0x826B1ADC;
	sub_827227B8(ctx, base);
	// b 0x826b1aec
	goto loc_826B1AEC;
loc_826B1AE0:
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// addi r4,r11,20268
	ctx.r4.s64 = ctx.r11.s64 + 20268;
	// bl 0x82722678
	ctx.lr = 0x826B1AEC;
	sub_82722678(ctx, base);
loc_826B1AEC:
	// lis r11,-32247
	ctx.r11.s64 = -2113339392;
	// addi r5,r22,800
	ctx.r5.s64 = ctx.r22.s64 + 800;
	// addi r4,r11,-11016
	ctx.r4.s64 = ctx.r11.s64 + -11016;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827227b8
	ctx.lr = 0x826B1B00;
	sub_827227B8(ctx, base);
	// lwz r9,852(r22)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r22.u32 + 852);
	// lis r10,-32247
	ctx.r10.s64 = -2113339392;
	// addi r5,r1,80
	ctx.r5.s64 = ctx.r1.s64 + 80;
	// addi r4,r10,-11024
	ctx.r4.s64 = ctx.r10.s64 + -11024;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r9,80(r1)
	PPC_STORE_U32(ctx.r1.u32 + 80, ctx.r9.u32);
	// bl 0x82722678
	ctx.lr = 0x826B1B1C;
	sub_82722678(ctx, base);
	// lis r8,-32247
	ctx.r8.s64 = -2113339392;
	// addi r5,r22,856
	ctx.r5.s64 = ctx.r22.s64 + 856;
	// addi r4,r8,-11032
	ctx.r4.s64 = ctx.r8.s64 + -11032;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827227b8
	ctx.lr = 0x826B1B30;
	sub_827227B8(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9228
	__restgprlr_20(ctx, base);
	return;
loc_826B1B38:
	// lis r11,-32250
	ctx.r11.s64 = -2113536000;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// addi r30,r11,-7580
	ctx.r30.s64 = ctx.r11.s64 + -7580;
	// addi r4,r10,20268
	ctx.r4.s64 = ctx.r10.s64 + 20268;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x827227b8
	ctx.lr = 0x826B1B50;
	sub_827227B8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B1B58;
	sub_82388580(ctx, base);
	// mr r8,r3
	ctx.r8.u64 = ctx.r3.u64;
	// lis r9,-32121
	ctx.r9.s64 = -2105081856;
	// lwz r4,4(r8)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r8.u32 + 4);
	// lwz r3,-10240(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B1B6C;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7118
	ctx.lr = 0x826B1B74;
	sub_824E7118(ctx, base);
	// lis r7,-32247
	ctx.r7.s64 = -2113339392;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r7,-11016
	ctx.r4.s64 = ctx.r7.s64 + -11016;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827227b8
	ctx.lr = 0x826B1B88;
	sub_827227B8(ctx, base);
	// lis r6,-32247
	ctx.r6.s64 = -2113339392;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r6,-11024
	ctx.r4.s64 = ctx.r6.s64 + -11024;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827227b8
	ctx.lr = 0x826B1B9C;
	sub_827227B8(ctx, base);
	// lis r4,-32247
	ctx.r4.s64 = -2113339392;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// addi r4,r4,-11032
	ctx.r4.s64 = ctx.r4.s64 + -11032;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x827227b8
	ctx.lr = 0x826B1BB0;
	sub_827227B8(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// b 0x823d9228
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B1BB8"))) PPC_WEAK_FUNC(sub_826B1BB8);
PPC_FUNC_IMPL(__imp__sub_826B1BB8) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826B1BC0;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,724(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 724);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b1c74
	if (ctx.cr6.eq) goto loc_826B1C74;
	// lwz r10,720(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// blt cr6,0x826b1c74
	if (ctx.cr6.lt) goto loc_826B1C74;
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x826b1c74
	if (!ctx.cr6.lt) goto loc_826B1C74;
	// lis r9,-32121
	ctx.r9.s64 = -2105081856;
	// lis r8,-32111
	ctx.r8.s64 = -2104426496;
	// lis r7,-32125
	ctx.r7.s64 = -2105344000;
	// addi r11,r8,-29096
	ctx.r11.s64 = ctx.r8.s64 + -29096;
	// mulli r10,r10,152
	ctx.r10.s64 = ctx.r10.s64 * 152;
	// lwz r3,-3624(r9)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r9.u32 + -3624);
	// lwz r28,-27868(r7)
	ctx.r28.u64 = PPC_LOAD_U32(ctx.r7.u32 + -27868);
	// add r30,r10,r11
	ctx.r30.u64 = ctx.r10.u64 + ctx.r11.u64;
	// addi r29,r31,728
	ctx.r29.s64 = ctx.r31.s64 + 728;
	// addi r27,r31,28
	ctx.r27.s64 = ctx.r31.s64 + 28;
	// bl 0x8226ce68
	ctx.lr = 0x826B1C14;
	sub_8226CE68(ctx, base);
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// mr r7,r30
	ctx.r7.u64 = ctx.r30.u64;
	// mr r8,r29
	ctx.r8.u64 = ctx.r29.u64;
	// mr r9,r27
	ctx.r9.u64 = ctx.r27.u64;
	// bl 0x824f6ea0
	ctx.lr = 0x826B1C30;
	sub_824F6EA0(ctx, base);
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r6,-21988
	ctx.r3.s64 = ctx.r6.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B1C44;
	sub_82130000(ctx, base);
	// lwz r5,20(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r5,0
	ctx.cr6.compare<int32_t>(ctx.r5.s32, 0, ctx.xer);
	// beq cr6,0x826b1c5c
	if (ctx.cr6.eq) goto loc_826B1C5C;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B1C5C;
	sub_826AFCC8(ctx, base);
loc_826B1C5C:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,1
	ctx.r10.s64 = 1;
	// stw r11,0(r29)
	PPC_STORE_U32(ctx.r29.u32 + 0, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B1C74:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ee8
	ctx.lr = 0x826B1C7C;
	sub_826B0EE8(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B1C84"))) PPC_WEAK_FUNC(sub_826B1C84);
PPC_FUNC_IMPL(__imp__sub_826B1C84) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B1C88"))) PPC_WEAK_FUNC(sub_826B1C88);
PPC_FUNC_IMPL(__imp__sub_826B1C88) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B1C90;
	__savegprlr_28(ctx, base);
	// ld r12,-4096(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// ld r12,-8192(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8192);
	// stwu r1,-8336(r1)
	ea = -8336 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// lwz r3,17268(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B1CB8;
	sub_822A3998(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238f550
	ctx.lr = 0x826B1CC4;
	sub_8238F550(ctx, base);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826b1cd8
	if (ctx.cr6.eq) goto loc_826B1CD8;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238ee58
	ctx.lr = 0x826B1CD8;
	sub_8238EE58(ctx, base);
loc_826B1CD8:
	// lwz r11,9092(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 9092);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// ble cr6,0x826b1e64
	if (!ctx.cr6.gt) goto loc_826B1E64;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82618750
	ctx.lr = 0x826B1CEC;
	sub_82618750(ctx, base);
	// addi r4,r31,888
	ctx.r4.s64 = ctx.r31.s64 + 888;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r5,9092(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 9092);
	// bl 0x826185e0
	ctx.lr = 0x826B1CFC;
	sub_826185E0(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x82390940
	ctx.lr = 0x826B1D08;
	sub_82390940(ctx, base);
	// clrlwi r11,r29,24
	ctx.r11.u64 = ctx.r29.u32 & 0xFF;
	// li r29,0
	ctx.r29.s64 = 0;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b1d1c
	if (!ctx.cr6.eq) goto loc_826B1D1C;
	// stw r29,8212(r1)
	PPC_STORE_U32(ctx.r1.u32 + 8212, ctx.r29.u32);
loc_826B1D1C:
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238f998
	ctx.lr = 0x826B1D24;
	sub_8238F998(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,0(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r30,-10244(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82218310
	ctx.lr = 0x826B1D38;
	sub_82218310(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r10,-21204
	ctx.r4.s64 = ctx.r10.s64 + -21204;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822183b0
	ctx.lr = 0x826B1D4C;
	sub_822183B0(ctx, base);
	// lwz r11,720(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x826b1db8
	if (ctx.cr6.lt) goto loc_826B1DB8;
	// lwz r10,724(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 724);
	// cmpw cr6,r11,r10
	ctx.cr6.compare<int32_t>(ctx.r11.s32, ctx.r10.s32, ctx.xer);
	// bge cr6,0x826b1db8
	if (!ctx.cr6.lt) goto loc_826B1DB8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B1D6C;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B1D80;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B1D88;
	sub_824E7110(ctx, base);
	// lwz r9,720(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// lis r8,-32111
	ctx.r8.s64 = -2104426496;
	// mulli r10,r9,152
	ctx.r10.s64 = ctx.r9.s64 * 152;
	// addi r11,r8,-29096
	ctx.r11.s64 = ctx.r8.s64 + -29096;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x824f92f8
	ctx.lr = 0x826B1DA4;
	sub_824F92F8(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826b1db8
	if (ctx.cr6.eq) goto loc_826B1DB8;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afbc8
	ctx.lr = 0x826B1DB8;
	sub_826AFBC8(ctx, base);
loc_826B1DB8:
	// addi r30,r31,9104
	ctx.r30.s64 = ctx.r31.s64 + 9104;
	// addi r4,r1,112
	ctx.r4.s64 = ctx.r1.s64 + 112;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238ee58
	ctx.lr = 0x826B1DC8;
	sub_8238EE58(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8269a1e0
	ctx.lr = 0x826B1DD4;
	sub_8269A1E0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8238f1e8
	ctx.lr = 0x826B1DDC;
	sub_8238F1E8(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r11,-21248
	ctx.r3.s64 = ctx.r11.s64 + -21248;
	// bl 0x82130000
	ctx.lr = 0x826B1DEC;
	sub_82130000(ctx, base);
	// lwz r10,48(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 48);
	// lwz r11,12(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + 12);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r11,r11,-16
	ctx.r11.s64 = ctx.r11.s64 + -16;
	// bne cr6,0x826b1e04
	if (!ctx.cr6.eq) goto loc_826B1E04;
	// mr r11,r29
	ctx.r11.u64 = ctx.r29.u64;
loc_826B1E04:
	// lwz r10,16(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 16);
	// addi r3,r11,16
	ctx.r3.s64 = ctx.r11.s64 + 16;
	// lwz r9,4(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// mtctr r9
	ctx.ctr.u64 = ctx.r9.u64;
	// bctrl 
	ctx.lr = 0x826B1E18;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// li r5,7
	ctx.r5.s64 = 7;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r8,-21988
	ctx.r3.s64 = ctx.r8.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B1E2C;
	sub_82130000(ctx, base);
	// lwz r7,20(r31)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r7,0
	ctx.cr6.compare<int32_t>(ctx.r7.s32, 0, ctx.xer);
	// beq cr6,0x826b1e44
	if (ctx.cr6.eq) goto loc_826B1E44;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B1E44;
	sub_826AFCC8(ctx, base);
loc_826B1E44:
	// li r11,7
	ctx.r11.s64 = 7;
	// stw r29,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r29.u32);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// stw r11,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r11.u32);
	// bl 0x8238ed78
	ctx.lr = 0x826B1E58;
	sub_8238ED78(ctx, base);
	// li r3,1
	ctx.r3.s64 = 1;
	// addi r1,r1,8336
	ctx.r1.s64 = ctx.r1.s64 + 8336;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826B1E64:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ee8
	ctx.lr = 0x826B1E6C;
	sub_826B0EE8(ctx, base);
	// addi r3,r1,112
	ctx.r3.s64 = ctx.r1.s64 + 112;
	// bl 0x8238ed78
	ctx.lr = 0x826B1E74;
	sub_8238ED78(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,8336
	ctx.r1.s64 = ctx.r1.s64 + 8336;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B1E80"))) PPC_WEAK_FUNC(sub_826B1E80);
PPC_FUNC_IMPL(__imp__sub_826B1E80) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826B1E88;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r31,31
	ctx.r31.s64 = 31;
	// mr r30,r29
	ctx.r30.u64 = ctx.r29.u64;
loc_826B1E98:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x824f9438
	ctx.lr = 0x826B1EA0;
	sub_824F9438(ctx, base);
	// addic. r31,r31,-1
	ctx.xer.ca = ctx.r31.u32 > 0;
	ctx.r31.s64 = ctx.r31.s64 + -1;
	ctx.cr0.compare<int32_t>(ctx.r31.s32, 0, ctx.xer);
	// addi r30,r30,16
	ctx.r30.s64 = ctx.r30.s64 + 16;
	// bge 0x826b1e98
	if (!ctx.cr0.lt) goto loc_826B1E98;
	// li r11,0
	ctx.r11.s64 = 0;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// stw r11,520(r29)
	PPC_STORE_U32(ctx.r29.u32 + 520, ctx.r11.u32);
	// stw r11,516(r29)
	PPC_STORE_U32(ctx.r29.u32 + 516, ctx.r11.u32);
	// stw r11,512(r29)
	PPC_STORE_U32(ctx.r29.u32 + 512, ctx.r11.u32);
	// bl 0x826b14a0
	ctx.lr = 0x826B1EC4;
	sub_826B14A0(ctx, base);
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B1ED0"))) PPC_WEAK_FUNC(sub_826B1ED0);
PPC_FUNC_IMPL(__imp__sub_826B1ED0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826B1ED8;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x826b1530
	ctx.lr = 0x826B1EE8;
	sub_826B1530(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// cmpwi cr6,r4,0
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 0, ctx.xer);
	// blt cr6,0x826b1efc
	if (ctx.cr6.lt) goto loc_826B1EFC;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afe80
	ctx.lr = 0x826B1EFC;
	sub_826AFE80(ctx, base);
loc_826B1EFC:
	// lwz r11,520(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// li r29,0
	ctx.r29.s64 = 0;
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// bne cr6,0x826b1f3c
	if (!ctx.cr6.eq) goto loc_826B1F3C;
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// li r10,31
	ctx.r10.s64 = 31;
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r10,520(r31)
	PPC_STORE_U32(ctx.r31.u32 + 520, ctx.r10.u32);
	// stw r11,516(r31)
	PPC_STORE_U32(ctx.r31.u32 + 516, ctx.r11.u32);
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// bne cr6,0x826b1f2c
	if (!ctx.cr6.eq) goto loc_826B1F2C;
	// stw r29,516(r31)
	PPC_STORE_U32(ctx.r31.u32 + 516, ctx.r29.u32);
loc_826B1F2C:
	// lwz r11,516(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 516);
	// rlwinm r11,r11,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 4) & 0xFFFFFFF0;
	// add r3,r11,r31
	ctx.r3.u64 = ctx.r11.u64 + ctx.r31.u64;
	// bl 0x824f9230
	ctx.lr = 0x826B1F3C;
	sub_824F9230(ctx, base);
loc_826B1F3C:
	// lwz r11,512(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 512);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,512(r31)
	PPC_STORE_U32(ctx.r31.u32 + 512, ctx.r11.u32);
	// cmpwi cr6,r11,32
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 32, ctx.xer);
	// bne cr6,0x826b1f54
	if (!ctx.cr6.eq) goto loc_826B1F54;
	// stw r29,512(r31)
	PPC_STORE_U32(ctx.r31.u32 + 512, ctx.r29.u32);
loc_826B1F54:
	// lwz r11,512(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 512);
	// lwz r10,520(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 520);
	// rlwinm r11,r11,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 4) & 0xFFFFFFF0;
	// addi r10,r10,1
	ctx.r10.s64 = ctx.r10.s64 + 1;
	// add r9,r11,r31
	ctx.r9.u64 = ctx.r11.u64 + ctx.r31.u64;
	// stw r10,520(r31)
	PPC_STORE_U32(ctx.r31.u32 + 520, ctx.r10.u32);
	// ld r8,0(r30)
	ctx.r8.u64 = PPC_LOAD_U64(ctx.r30.u32 + 0);
	// stdx r8,r11,r31
	PPC_STORE_U64(ctx.r11.u32 + ctx.r31.u32, ctx.r8.u64);
	// ld r7,8(r30)
	ctx.r7.u64 = PPC_LOAD_U64(ctx.r30.u32 + 8);
	// std r7,8(r9)
	PPC_STORE_U64(ctx.r9.u32 + 8, ctx.r7.u64);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B1F84"))) PPC_WEAK_FUNC(sub_826B1F84);
PPC_FUNC_IMPL(__imp__sub_826B1F84) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B1F88"))) PPC_WEAK_FUNC(sub_826B1F88);
PPC_FUNC_IMPL(__imp__sub_826B1F88) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826B1F90;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// lis r9,-32125
	ctx.r9.s64 = -2105344000;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// li r30,0
	ctx.r30.s64 = 0;
	// addi r3,r8,-21180
	ctx.r3.s64 = ctx.r8.s64 + -21180;
	// addi r6,r11,-21172
	ctx.r6.s64 = ctx.r11.s64 + -21172;
	// stb r30,16(r31)
	PPC_STORE_U8(ctx.r31.u32 + 16, ctx.r30.u8);
	// addi r5,r10,-27816
	ctx.r5.s64 = ctx.r10.s64 + -27816;
	// stw r3,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r3.u32);
	// addi r4,r9,-27864
	ctx.r4.s64 = ctx.r9.s64 + -27864;
	// stw r6,4(r31)
	PPC_STORE_U32(ctx.r31.u32 + 4, ctx.r6.u32);
	// li r29,-1
	ctx.r29.s64 = -1;
	// stw r5,8(r31)
	PPC_STORE_U32(ctx.r31.u32 + 8, ctx.r5.u32);
	// stw r4,12(r31)
	PPC_STORE_U32(ctx.r31.u32 + 12, ctx.r4.u32);
	// lfs f0,3796(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// stw r30,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r30.u32);
	// li r3,528
	ctx.r3.s64 = 528;
	// stw r30,24(r31)
	PPC_STORE_U32(ctx.r31.u32 + 24, ctx.r30.u32);
	// stw r30,28(r31)
	PPC_STORE_U32(ctx.r31.u32 + 28, ctx.r30.u32);
	// stw r30,32(r31)
	PPC_STORE_U32(ctx.r31.u32 + 32, ctx.r30.u32);
	// stfs f0,36(r31)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + 36, temp.u32);
	// stw r29,720(r31)
	PPC_STORE_U32(ctx.r31.u32 + 720, ctx.r29.u32);
	// stw r30,724(r31)
	PPC_STORE_U32(ctx.r31.u32 + 724, ctx.r30.u32);
	// stw r30,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r30.u32);
	// bl 0x82130528
	ctx.lr = 0x826B2004;
	sub_82130528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b2014
	if (ctx.cr6.eq) goto loc_826B2014;
	// bl 0x826b1e80
	ctx.lr = 0x826B2010;
	sub_826B1E80(ctx, base);
	// b 0x826b2018
	goto loc_826B2018;
loc_826B2014:
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
loc_826B2018:
	// stw r3,864(r31)
	PPC_STORE_U32(ctx.r31.u32 + 864, ctx.r3.u32);
	// addi r3,r31,9104
	ctx.r3.s64 = ctx.r31.s64 + 9104;
	// stw r30,880(r31)
	PPC_STORE_U32(ctx.r31.u32 + 880, ctx.r30.u32);
	// stw r30,884(r31)
	PPC_STORE_U32(ctx.r31.u32 + 884, ctx.r30.u32);
	// bl 0x8238f550
	ctx.lr = 0x826B202C;
	sub_8238F550(ctx, base);
	// stw r29,17280(r31)
	PPC_STORE_U32(ctx.r31.u32 + 17280, ctx.r29.u32);
	// stw r30,796(r31)
	PPC_STORE_U32(ctx.r31.u32 + 796, ctx.r30.u32);
	// lwz r3,864(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 864);
	// bl 0x826b14a0
	ctx.lr = 0x826B203C;
	sub_826B14A0(ctx, base);
	// addi r11,r31,888
	ctx.r11.s64 = ctx.r31.s64 + 888;
	// stw r11,9080(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9080, ctx.r11.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stw r30,9084(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9084, ctx.r30.u32);
	// stw r30,9088(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9088, ctx.r30.u32);
	// stw r30,9092(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9092, ctx.r30.u32);
	// stw r30,9096(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9096, ctx.r30.u32);
	// stw r30,9100(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9100, ctx.r30.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B2064"))) PPC_WEAK_FUNC(sub_826B2064);
PPC_FUNC_IMPL(__imp__sub_826B2064) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B2068"))) PPC_WEAK_FUNC(sub_826B2068);
PPC_FUNC_IMPL(__imp__sub_826B2068) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B2070;
	__savegprlr_28(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r29,r4
	ctx.r29.u64 = ctx.r4.u64;
	// bl 0x82387b90
	ctx.lr = 0x826B2080;
	sub_82387B90(ctx, base);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mulli r10,r29,8176
	ctx.r10.s64 = ctx.r29.s64 * 8176;
	// lwz r11,17268(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 17268);
	// add r10,r3,r10
	ctx.r10.u64 = ctx.r3.u64 + ctx.r10.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r11
	ctx.r3.u64 = ctx.r11.u64;
	// addi r30,r10,1360
	ctx.r30.s64 = ctx.r10.s64 + 1360;
	// bl 0x822a3998
	ctx.lr = 0x826B20A0;
	sub_822A3998(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r8,-1
	ctx.r8.s64 = -1;
	// stw r9,724(r31)
	PPC_STORE_U32(ctx.r31.u32 + 724, ctx.r9.u32);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// stw r8,720(r31)
	PPC_STORE_U32(ctx.r31.u32 + 720, ctx.r8.u32);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82618750
	ctx.lr = 0x826B20BC;
	sub_82618750(ctx, base);
	// addi r4,r31,888
	ctx.r4.s64 = ctx.r31.s64 + 888;
	// li r5,8192
	ctx.r5.s64 = 8192;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x82618640
	ctx.lr = 0x826B20CC;
	sub_82618640(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// bl 0x8238fd38
	ctx.lr = 0x826B20D8;
	sub_8238FD38(ctx, base);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x826186a0
	ctx.lr = 0x826B20E0;
	sub_826186A0(ctx, base);
	// stw r3,9092(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9092, ctx.r3.u32);
	// stw r29,20(r28)
	PPC_STORE_U32(ctx.r28.u32 + 20, ctx.r29.u32);
	// bl 0x82387b90
	ctx.lr = 0x826B20EC;
	sub_82387B90(ctx, base);
	// lis r7,3
	ctx.r7.s64 = 196608;
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// ori r11,r7,57424
	ctx.r11.u64 = ctx.r7.u64 | 57424;
	// li r10,1
	ctx.r10.s64 = 1;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// stw r29,1344(r6)
	PPC_STORE_U32(ctx.r6.u32 + 1344, ctx.r29.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stbx r10,r6,r11
	PPC_STORE_U8(ctx.r6.u32 + ctx.r11.u32, ctx.r10.u8);
	// bl 0x826b1c88
	ctx.lr = 0x826B2114;
	sub_826B1C88(ctx, base);
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B211C"))) PPC_WEAK_FUNC(sub_826B211C);
PPC_FUNC_IMPL(__imp__sub_826B211C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B2120"))) PPC_WEAK_FUNC(sub_826B2120);
PPC_FUNC_IMPL(__imp__sub_826B2120) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826B2128;
	__savegprlr_26(ctx, base);
	// stwu r1,-144(r1)
	ea = -144 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r27,r4
	ctx.r27.u64 = ctx.r4.u64;
	// lwz r11,724(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 724);
	// cmpw cr6,r27,r11
	ctx.cr6.compare<int32_t>(ctx.r27.s32, ctx.r11.s32, ctx.xer);
	// bge cr6,0x826b2314
	if (!ctx.cr6.lt) goto loc_826B2314;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// mulli r28,r27,152
	ctx.r28.s64 = ctx.r27.s64 * 152;
	// addi r29,r11,-29096
	ctx.r29.s64 = ctx.r11.s64 + -29096;
	// addi r11,r29,76
	ctx.r11.s64 = ctx.r29.s64 + 76;
	// add r30,r28,r11
	ctx.r30.u64 = ctx.r28.u64 + ctx.r11.u64;
	// lwzx r3,r28,r11
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r11.u32);
	// bl 0x82396f58
	ctx.lr = 0x826B215C;
	sub_82396F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bge cr6,0x826b2180
	if (!ctx.cr6.lt) goto loc_826B2180;
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B2178;
	sub_8268EE10(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826B2180:
	// lwz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + 0);
	// lwz r10,748(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 748);
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stw r11,732(r31)
	PPC_STORE_U32(ctx.r31.u32 + 732, ctx.r11.u32);
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r5,4(r30)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r30.u32 + 4);
	// stw r5,736(r31)
	PPC_STORE_U32(ctx.r31.u32 + 736, ctx.r5.u32);
	// beq cr6,0x826b21b8
	if (ctx.cr6.eq) goto loc_826B21B8;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r3,-10244(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-21868
	ctx.r4.s64 = ctx.r10.s64 + -21868;
	// bl 0x82218788
	ctx.lr = 0x826B21B4;
	sub_82218788(ctx, base);
	// b 0x826b21e0
	goto loc_826B21E0;
loc_826B21B8:
	// lwz r30,-10244(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10244);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r10,-21884
	ctx.r4.s64 = ctx.r10.s64 + -21884;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82218310
	ctx.lr = 0x826B21CC;
	sub_82218310(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// addi r4,r9,-21868
	ctx.r4.s64 = ctx.r9.s64 + -21868;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x822183b0
	ctx.lr = 0x826B21E0;
	sub_822183B0(ctx, base);
loc_826B21E0:
	// stw r27,720(r31)
	PPC_STORE_U32(ctx.r31.u32 + 720, ctx.r27.u32);
	// addi r11,r29,52
	ctx.r11.s64 = ctx.r29.s64 + 52;
	// lwz r10,884(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// lwzx r9,r28,r11
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r11.u32);
	// stw r9,9092(r31)
	PPC_STORE_U32(ctx.r31.u32 + 9092, ctx.r9.u32);
	// beq cr6,0x826b2288
	if (ctx.cr6.eq) goto loc_826B2288;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B2204;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B2218;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B2220;
	sub_824E7110(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// add r3,r28,r29
	ctx.r3.u64 = ctx.r28.u64 + ctx.r29.u64;
	// bl 0x824f92f8
	ctx.lr = 0x826B222C;
	sub_824F92F8(ctx, base);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// beq cr6,0x826b2288
	if (ctx.cr6.eq) goto loc_826B2288;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-21168
	ctx.r3.s64 = ctx.r11.s64 + -21168;
	// bl 0x82130000
	ctx.lr = 0x826B2244;
	sub_82130000(ctx, base);
	// li r5,8192
	ctx.r5.s64 = 8192;
	// addi r3,r31,888
	ctx.r3.s64 = ctx.r31.s64 + 888;
	// lwz r4,884(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// bl 0x823da950
	ctx.lr = 0x826B2254;
	sub_823DA950(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r10,-21988
	ctx.r3.s64 = ctx.r10.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B2268;
	sub_82130000(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r9,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r9.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b1c88
	ctx.lr = 0x826B2280;
	sub_826B1C88(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826B2288:
	// lwz r10,720(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// addi r9,r29,40
	ctx.r9.s64 = ctx.r29.s64 + 40;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// mulli r8,r10,152
	ctx.r8.s64 = ctx.r10.s64 * 152;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// lwzx r30,r8,r9
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// addi r29,r31,28
	ctx.r29.s64 = ctx.r31.s64 + 28;
	// addi r28,r31,36
	ctx.r28.s64 = ctx.r31.s64 + 36;
	// addi r27,r31,24
	ctx.r27.s64 = ctx.r31.s64 + 24;
	// addi r26,r31,888
	ctx.r26.s64 = ctx.r31.s64 + 888;
	// bl 0x8226ce68
	ctx.lr = 0x826B22B4;
	sub_8226CE68(ctx, base);
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r5,r26
	ctx.r5.u64 = ctx.r26.u64;
	// li r6,8192
	ctx.r6.s64 = 8192;
	// mr r7,r27
	ctx.r7.u64 = ctx.r27.u64;
	// mr r8,r28
	ctx.r8.u64 = ctx.r28.u64;
	// mr r9,r29
	ctx.r9.u64 = ctx.r29.u64;
	// bl 0x824f7578
	ctx.lr = 0x826B22D0;
	sub_824F7578(ctx, base);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// li r5,3
	ctx.r5.s64 = 3;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r7,-21988
	ctx.r3.s64 = ctx.r7.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B22E4;
	sub_82130000(ctx, base);
	// lwz r6,20(r31)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// beq cr6,0x826b22fc
	if (ctx.cr6.eq) goto loc_826B22FC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afcc8
	ctx.lr = 0x826B22FC;
	sub_826AFCC8(ctx, base);
loc_826B22FC:
	// li r11,0
	ctx.r11.s64 = 0;
	// li r10,3
	ctx.r10.s64 = 3;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
loc_826B2314:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ee8
	ctx.lr = 0x826B231C;
	sub_826B0EE8(ctx, base);
	// addi r1,r1,144
	ctx.r1.s64 = ctx.r1.s64 + 144;
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B2324"))) PPC_WEAK_FUNC(sub_826B2324);
PPC_FUNC_IMPL(__imp__sub_826B2324) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B2328"))) PPC_WEAK_FUNC(sub_826B2328);
PPC_FUNC_IMPL(__imp__sub_826B2328) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r11,r4,-1
	ctx.r11.s64 = ctx.r4.s64 + -1;
	// cmplwi cr6,r11,6
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 6, ctx.xer);
	// bgt cr6,0x826b2760
	if (ctx.cr6.gt) goto loc_826B2760;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,9064
	ctx.r12.s64 = ctx.r12.s64 + 9064;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826B24A8;
	case 1:
		goto loc_826B23CC;
	case 2:
		goto loc_826B23CC;
	case 3:
		goto loc_826B2620;
	case 4:
		goto loc_826B26F0;
	case 5:
		goto loc_826B25D8;
	case 6:
		goto loc_826B2384;
	default:
		__builtin_unreachable();
	}
	// lwz r19,9384(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9384);
	// lwz r19,9164(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9164);
	// lwz r19,9164(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9164);
	// lwz r19,9760(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9760);
	// lwz r19,9968(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9968);
	// lwz r19,9688(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9688);
	// lwz r19,9092(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 9092);
loc_826B2384:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826afc48
	ctx.lr = 0x826B238C;
	sub_826AFC48(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b2760
	if (ctx.cr6.eq) goto loc_826B2760;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B23AC;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r6,-1
	ctx.r6.s64 = -1;
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B23C8;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B23CC:
	// lwz r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// bne cr6,0x826b2468
	if (!ctx.cr6.eq) goto loc_826B2468;
	// cmpwi cr6,r4,3
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 3, ctx.xer);
	// bne cr6,0x826b240c
	if (!ctx.cr6.eq) goto loc_826B240C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B23F0;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r5,0
	ctx.r5.s64 = 0;
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b1c88
	ctx.lr = 0x826B2408;
	sub_826B1C88(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B240C:
	// lis r11,-32115
	ctx.r11.s64 = -2104688640;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r6,1
	ctx.r6.s64 = 1;
	// addi r4,r10,-20884
	ctx.r4.s64 = ctx.r10.s64 + -20884;
	// li r5,4
	ctx.r5.s64 = 4;
	// lwz r3,-12440(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -12440);
	// lwz r9,0(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r8,48(r9)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r9.u32 + 48);
	// mtctr r8
	ctx.ctr.u64 = ctx.r8.u64;
	// bctrl 
	ctx.lr = 0x826B2434;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r7,-32244
	ctx.r7.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r7,-21988
	ctx.r3.s64 = ctx.r7.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B2448;
	sub_82130000(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r6,-1
	ctx.r6.s64 = -1;
	// stw r5,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r5.u32);
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B2464;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B2468:
	// cmplwi cr6,r11,2
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 2, ctx.xer);
	// bne cr6,0x826b2760
	if (!ctx.cr6.eq) goto loc_826B2760;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,32(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// bl 0x826b0d50
	ctx.lr = 0x826B247C;
	sub_826B0D50(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-20944
	ctx.r3.s64 = ctx.r11.s64 + -20944;
	// bl 0x82130000
	ctx.lr = 0x826B2488;
	sub_82130000(ctx, base);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// lwz r4,20(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 20);
	// addi r3,r10,-21988
	ctx.r3.s64 = ctx.r10.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B249C;
	sub_82130000(ctx, base);
	// li r9,0
	ctx.r9.s64 = 0;
	// stw r9,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r9.u32);
	// b 0x826b2758
	goto loc_826B2758;
loc_826B24A8:
	// lwz r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// bne cr6,0x826b259c
	if (!ctx.cr6.eq) goto loc_826B259C;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B24C4;
	sub_82130000(ctx, base);
	// lwz r10,728(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 728);
	// li r11,0
	ctx.r11.s64 = 0;
	// cmplwi cr6,r10,1
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 1, ctx.xer);
	// stw r11,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r11.u32);
	// bne cr6,0x826b24f4
	if (!ctx.cr6.eq) goto loc_826B24F4;
	// stw r11,728(r31)
	PPC_STORE_U32(ctx.r31.u32 + 728, ctx.r11.u32);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B24F0;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B24F4:
	// lwz r11,724(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 724);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// ble cr6,0x826b2588
	if (!ctx.cr6.gt) goto loc_826B2588;
	// bl 0x826b05b8
	ctx.lr = 0x826B2508;
	sub_826B05B8(ctx, base);
	// lwz r11,724(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 724);
	// cmplwi cr6,r11,1
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 1, ctx.xer);
	// ble cr6,0x826b2520
	if (!ctx.cr6.gt) goto loc_826B2520;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0458
	ctx.lr = 0x826B251C;
	sub_826B0458(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B2520:
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// addi r30,r11,-29096
	ctx.r30.s64 = ctx.r11.s64 + -29096;
	// lwz r3,76(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 76);
	// bl 0x82396f58
	ctx.lr = 0x826B2530;
	sub_82396F58(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// bge cr6,0x826b2550
	if (!ctx.cr6.lt) goto loc_826B2550;
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,2
	ctx.r4.s64 = 2;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B254C;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B2550:
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// lwz r3,864(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 864);
	// bl 0x826b1530
	ctx.lr = 0x826B255C;
	sub_826B1530(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// blt cr6,0x826b257c
	if (ctx.cr6.lt) goto loc_826B257C;
	// li r4,5
	ctx.r4.s64 = 5;
	// bl 0x8268ee10
	ctx.lr = 0x826B2578;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B257C:
	// li r4,3
	ctx.r4.s64 = 3;
	// bl 0x8268ee10
	ctx.lr = 0x826B2584;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B2588:
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,1
	ctx.r4.s64 = 1;
	// bl 0x8268ee10
	ctx.lr = 0x826B2598;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B259C:
	// cmplwi cr6,r11,2
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 2, ctx.xer);
	// bne cr6,0x826b2760
	if (!ctx.cr6.eq) goto loc_826B2760;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B25B4;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,32(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// bl 0x826b0d50
	ctx.lr = 0x826B25C8;
	sub_826B0D50(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-20976
	ctx.r3.s64 = ctx.r9.s64 + -20976;
	// bl 0x82130000
	ctx.lr = 0x826B25D4;
	sub_82130000(ctx, base);
	// b 0x826b2758
	goto loc_826B2758;
loc_826B25D8:
	// lwz r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// beq cr6,0x826b26fc
	if (ctx.cr6.eq) goto loc_826B26FC;
	// cmplwi cr6,r11,2
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 2, ctx.xer);
	// bne cr6,0x826b2760
	if (!ctx.cr6.eq) goto loc_826B2760;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B25FC;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,32(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// bl 0x826b0d50
	ctx.lr = 0x826B2610;
	sub_826B0D50(ctx, base);
	// lis r9,-32244
	ctx.r9.s64 = -2113142784;
	// addi r3,r9,-21008
	ctx.r3.s64 = ctx.r9.s64 + -21008;
	// bl 0x82130000
	ctx.lr = 0x826B261C;
	sub_82130000(ctx, base);
	// b 0x826b2758
	goto loc_826B2758;
loc_826B2620:
	// lwz r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// bne cr6,0x826b2688
	if (!ctx.cr6.eq) goto loc_826B2688;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B263C;
	sub_82130000(ctx, base);
	// lfs f1,872(r31)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + 872);
	ctx.f1.f64 = double(temp.f32);
	// stfd f1,24(r1)
	PPC_STORE_U64(ctx.r1.u32 + 24, ctx.f1.u64);
	// ld r4,24(r1)
	ctx.r4.u64 = PPC_LOAD_U64(ctx.r1.u32 + 24);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r5,868(r31)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r31.u32 + 868);
	// li r9,0
	ctx.r9.s64 = 0;
	// addi r3,r10,-21048
	ctx.r3.s64 = ctx.r10.s64 + -21048;
	// stw r9,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r9.u32);
	// bl 0x82130000
	ctx.lr = 0x826B2660;
	sub_82130000(ctx, base);
	// lis r8,-32111
	ctx.r8.s64 = -2104426496;
	// lwz r3,864(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 864);
	// addi r4,r8,-29096
	ctx.r4.s64 = ctx.r8.s64 + -29096;
	// bl 0x826b1ed0
	ctx.lr = 0x826B2670;
	sub_826B1ED0(ctx, base);
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B2684;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B2688:
	// cmplwi cr6,r11,2
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 2, ctx.xer);
	// bne cr6,0x826b2760
	if (!ctx.cr6.eq) goto loc_826B2760;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// lwz r30,32(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B26A4;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// cmpwi cr6,r30,10
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 10, ctx.xer);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// beq cr6,0x826b26d8
	if (ctx.cr6.eq) goto loc_826B26D8;
	// cmpwi cr6,r30,1
	ctx.cr6.compare<int32_t>(ctx.r30.s32, 1, ctx.xer);
	// beq cr6,0x826b26d8
	if (ctx.cr6.eq) goto loc_826B26D8;
	// mr r4,r30
	ctx.r4.u64 = ctx.r30.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0d50
	ctx.lr = 0x826B26C8;
	sub_826B0D50(ctx, base);
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-21084
	ctx.r3.s64 = ctx.r11.s64 + -21084;
	// bl 0x82130000
	ctx.lr = 0x826B26D4;
	sub_82130000(ctx, base);
	// b 0x826b2758
	goto loc_826B2758;
loc_826B26D8:
	// li r6,-1
	ctx.r6.s64 = -1;
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B26EC;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B26F0:
	// lwz r11,28(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 28);
	// cmplwi cr6,r11,3
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 3, ctx.xer);
	// bne cr6,0x826b272c
	if (!ctx.cr6.eq) goto loc_826B272C;
loc_826B26FC:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B270C;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// li r6,-1
	ctx.r6.s64 = -1;
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// li r5,3
	ctx.r5.s64 = 3;
	// li r4,3
	ctx.r4.s64 = 3;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8268ee10
	ctx.lr = 0x826B2728;
	sub_8268EE10(ctx, base);
	// b 0x826b2760
	goto loc_826B2760;
loc_826B272C:
	// cmplwi cr6,r11,2
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 2, ctx.xer);
	// bne cr6,0x826b2760
	if (!ctx.cr6.eq) goto loc_826B2760;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// li r5,0
	ctx.r5.s64 = 0;
	// addi r3,r11,-21988
	ctx.r3.s64 = ctx.r11.s64 + -21988;
	// bl 0x82130000
	ctx.lr = 0x826B2744;
	sub_82130000(ctx, base);
	// li r10,0
	ctx.r10.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,32(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 32);
	// stw r10,20(r31)
	PPC_STORE_U32(ctx.r31.u32 + 20, ctx.r10.u32);
	// bl 0x826b0d50
	ctx.lr = 0x826B2758;
	sub_826B0D50(ctx, base);
loc_826B2758:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ee8
	ctx.lr = 0x826B2760;
	sub_826B0EE8(ctx, base);
loc_826B2760:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B2778"))) PPC_WEAK_FUNC(sub_826B2778);
PPC_FUNC_IMPL(__imp__sub_826B2778) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r10,r11,-21180
	ctx.r10.s64 = ctx.r11.s64 + -21180;
	// lwz r30,864(r31)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r31.u32 + 864);
	// stw r10,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r10.u32);
	// cmplwi cr6,r30,0
	ctx.cr6.compare<uint32_t>(ctx.r30.u32, 0, ctx.xer);
	// beq cr6,0x826b27b8
	if (ctx.cr6.eq) goto loc_826B27B8;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x826b14a0
	ctx.lr = 0x826B27B0;
	sub_826B14A0(ctx, base);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x82130588
	ctx.lr = 0x826B27B8;
	sub_82130588(ctx, base);
loc_826B27B8:
	// lwz r3,884(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 884);
	// li r30,0
	ctx.r30.s64 = 0;
	// stw r30,864(r31)
	PPC_STORE_U32(ctx.r31.u32 + 864, ctx.r30.u32);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b27d0
	if (ctx.cr6.eq) goto loc_826B27D0;
	// bl 0x82130588
	ctx.lr = 0x826B27D0;
	sub_82130588(ctx, base);
loc_826B27D0:
	// stw r30,884(r31)
	PPC_STORE_U32(ctx.r31.u32 + 884, ctx.r30.u32);
	// addi r3,r31,9104
	ctx.r3.s64 = ctx.r31.s64 + 9104;
	// bl 0x8238ed78
	ctx.lr = 0x826B27DC;
	sub_8238ED78(ctx, base);
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// addi r10,r11,-21856
	ctx.r10.s64 = ctx.r11.s64 + -21856;
	// stw r10,0(r31)
	PPC_STORE_U32(ctx.r31.u32 + 0, ctx.r10.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B2800"))) PPC_WEAK_FUNC(sub_826B2800);
PPC_FUNC_IMPL(__imp__sub_826B2800) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826B2808;
	__savegprlr_27(ctx, base);
	// ld r12,-4096(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -4096);
	// ld r12,-8192(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -8192);
	// ld r12,-12288(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -12288);
	// ld r12,-16384(r1)
	ctx.r12.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16384);
	// stwu r1,-16496(r1)
	ea = -16496 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r30,r5
	ctx.r30.u64 = ctx.r5.u64;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// lhz r11,2(r30)
	ctx.r11.u64 = PPC_LOAD_U16(ctx.r30.u32 + 2);
	// extsh r11,r11
	ctx.r11.s64 = ctx.r11.s16;
	// cmplwi cr6,r11,17
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 17, ctx.xer);
	// bgt cr6,0x826b3038
	if (ctx.cr6.gt) goto loc_826B3038;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,10320
	ctx.r12.s64 = ctx.r12.s64 + 10320;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		goto loc_826B2C8C;
	case 1:
		goto loc_826B2FA8;
	case 2:
		goto loc_826B2AF8;
	case 3:
		goto loc_826B2B48;
	case 4:
		goto loc_826B2E64;
	case 5:
		goto loc_826B2958;
	case 6:
		goto loc_826B2898;
	case 7:
		goto loc_826B2EE0;
	case 8:
		goto loc_826B28E8;
	case 9:
		goto loc_826B2B68;
	case 10:
		goto loc_826B2B34;
	case 11:
		goto loc_826B29A8;
	case 12:
		goto loc_826B29E4;
	case 13:
		goto loc_826B2F6C;
	case 14:
		goto loc_826B2B20;
	case 15:
		goto loc_826B2AA8;
	case 16:
		goto loc_826B2A0C;
	case 17:
		goto loc_826B2BF4;
	default:
		__builtin_unreachable();
	}
	// lwz r19,11404(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11404);
	// lwz r19,12200(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12200);
	// lwz r19,11000(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11000);
	// lwz r19,11080(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11080);
	// lwz r19,11876(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11876);
	// lwz r19,10584(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10584);
	// lwz r19,10392(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10392);
	// lwz r19,12000(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12000);
	// lwz r19,10472(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10472);
	// lwz r19,11112(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11112);
	// lwz r19,11060(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11060);
	// lwz r19,10664(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10664);
	// lwz r19,10724(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10724);
	// lwz r19,12140(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 12140);
	// lwz r19,11040(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11040);
	// lwz r19,10920(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10920);
	// lwz r19,10764(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 10764);
	// lwz r19,11252(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 11252);
loc_826B2898:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B28A4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-32130
	ctx.r9.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// addi r6,r9,-22132
	ctx.r6.s64 = ctx.r9.s64 + -22132;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r8,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x823dedd8
	ctx.lr = 0x826B28D0;
	sub_823DEDD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b18e0
	ctx.lr = 0x826B28DC;
	sub_826B18E0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B28E8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B28F4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r10,-32130
	ctx.r10.s64 = -2105671680;
	// lwz r9,76(r28)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// addi r30,r10,-22132
	ctx.r30.s64 = ctx.r10.s64 + -22132;
	// lis r11,-32130
	ctx.r11.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// lwzx r3,r8,r9
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r9.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r29,r11,-17888
	ctx.r29.s64 = ctx.r11.s64 + -17888;
	// bl 0x823dedd8
	ctx.lr = 0x826B292C;
	sub_823DEDD8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// bl 0x823dedd8
	ctx.lr = 0x826B2940;
	sub_823DEDD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826affd8
	ctx.lr = 0x826B294C;
	sub_826AFFD8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2958:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2964;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-32130
	ctx.r9.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// addi r6,r9,-22132
	ctx.r6.s64 = ctx.r9.s64 + -22132;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r8,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x823dedd8
	ctx.lr = 0x826B2990;
	sub_823DEDD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0258
	ctx.lr = 0x826B299C;
	sub_826B0258(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B29A8:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B29B0;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B29C4;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B29CC;
	sub_824E7110(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0658
	ctx.lr = 0x826B29D8;
	sub_826B0658(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B29E4:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B29F0;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826b06f0
	ctx.lr = 0x826B2A00;
	sub_826B06F0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2A0C:
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2A18;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r9,4(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// rlwinm r8,r9,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r30,r8,r10
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x8268c9f0
	ctx.lr = 0x826B2A38;
	sub_8268C9F0(ctx, base);
	// lwz r7,4(r3)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r6,-32130
	ctx.r6.s64 = -2105671680;
	// lwz r4,76(r28)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r5,-32130
	ctx.r5.s64 = -2105671680;
	// rlwinm r3,r7,2,0,29
	ctx.r3.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 2) & 0xFFFFFFFC;
	// addi r29,r6,-22132
	ctx.r29.s64 = ctx.r6.s64 + -22132;
	// addi r28,r5,-22108
	ctx.r28.s64 = ctx.r5.s64 + -22108;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// lwzx r27,r3,r4
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r3.u32 + ctx.r4.u32);
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x823dedd8
	ctx.lr = 0x826B2A70;
	sub_823DEDD8(ctx, base);
	// mr r30,r3
	ctx.r30.u64 = ctx.r3.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// bl 0x823dedd8
	ctx.lr = 0x826B2A8C;
	sub_823DEDD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// bl 0x826b07c8
	ctx.lr = 0x826B2A9C;
	sub_826B07C8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2AA8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2AB4;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-32130
	ctx.r9.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// addi r6,r9,-22132
	ctx.r6.s64 = ctx.r9.s64 + -22132;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r8,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x823dedd8
	ctx.lr = 0x826B2AE0;
	sub_823DEDD8(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ae0
	ctx.lr = 0x826B2AEC;
	sub_826B0AE0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2AF8:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2B04;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826b03b0
	ctx.lr = 0x826B2B14;
	sub_826B03B0(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2B20:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b1bb8
	ctx.lr = 0x826B2B28;
	sub_826B1BB8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2B34:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0bb8
	ctx.lr = 0x826B2B3C;
	sub_826B0BB8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2B48:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2B54;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 876, ctx.r11.u32);
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2B68:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2B74;
	sub_8268C9F0(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b2bdc
	if (ctx.cr6.eq) goto loc_826B2BDC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2B88;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-32130
	ctx.r9.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// addi r6,r9,-22132
	ctx.r6.s64 = ctx.r9.s64 + -22132;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r8,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x823dedd8
	ctx.lr = 0x826B2BB4;
	sub_823DEDD8(ctx, base);
	// lwz r6,0(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r5,336(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 336);
	// mtctr r5
	ctx.ctr.u64 = ctx.r5.u64;
	// bctrl 
	ctx.lr = 0x826B2BC4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b2068
	ctx.lr = 0x826B2BD0;
	sub_826B2068(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2BDC:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,17280(r31)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17280);
	// bl 0x826b2068
	ctx.lr = 0x826B2BE8;
	sub_826B2068(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2BF4:
	// lwz r11,748(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 748);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b3038
	if (ctx.cr6.eq) goto loc_826B3038;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B2C08;
	sub_82388580(ctx, base);
	// mr r10,r3
	ctx.r10.u64 = ctx.r3.u64;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r4,4(r10)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r10.u32 + 4);
	// lwz r3,-10240(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -10240);
	// bl 0x82270170
	ctx.lr = 0x826B2C1C;
	sub_82270170(ctx, base);
	// addi r3,r3,16
	ctx.r3.s64 = ctx.r3.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B2C24;
	sub_824E7110(ctx, base);
	// lwz r9,720(r31)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r31.u32 + 720);
	// lis r8,-32111
	ctx.r8.s64 = -2104426496;
	// mulli r10,r9,152
	ctx.r10.s64 = ctx.r9.s64 * 152;
	// addi r11,r8,-29096
	ctx.r11.s64 = ctx.r8.s64 + -29096;
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// add r3,r10,r11
	ctx.r3.u64 = ctx.r10.u64 + ctx.r11.u64;
	// bl 0x824f9388
	ctx.lr = 0x826B2C40;
	sub_824F9388(ctx, base);
	// clrlwi r7,r3,24
	ctx.r7.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826b3038
	if (ctx.cr6.eq) goto loc_826B3038;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2C58;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-32130
	ctx.r9.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// addi r6,r9,-22132
	ctx.r6.s64 = ctx.r9.s64 + -22132;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r8,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x823dedd8
	ctx.lr = 0x826B2C84;
	sub_823DEDD8(ctx, base);
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2C8C:
	// bl 0x82387b90
	ctx.lr = 0x826B2C90;
	sub_82387B90(ctx, base);
	// lwz r11,1344(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// blt cr6,0x826b2e50
	if (ctx.cr6.lt) goto loc_826B2E50;
	// bl 0x82387b90
	ctx.lr = 0x826B2CA0;
	sub_82387B90(ctx, base);
	// lwz r27,1344(r3)
	ctx.r27.u64 = PPC_LOAD_U32(ctx.r3.u32 + 1344);
	// bl 0x82387b90
	ctx.lr = 0x826B2CA8;
	sub_82387B90(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// lwz r10,1344(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 1344);
	// mulli r10,r10,8176
	ctx.r10.s64 = ctx.r10.s64 * 8176;
	// add r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	// addi r4,r11,1360
	ctx.r4.s64 = ctx.r11.s64 + 1360;
	// bl 0x8238f648
	ctx.lr = 0x826B2CC4;
	sub_8238F648(ctx, base);
	// lis r29,-32121
	ctx.r29.s64 = -2105081856;
	// lis r9,2
	ctx.r9.s64 = 131072;
	// ori r8,r9,6900
	ctx.r8.u64 = ctx.r9.u64 | 6900;
	// lwz r11,-10240(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10240);
	// lwz r11,4296(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4296);
	// add r7,r11,r27
	ctx.r7.u64 = ctx.r11.u64 + ctx.r27.u64;
	// lbzx r6,r7,r8
	ctx.r6.u64 = PPC_LOAD_U8(ctx.r7.u32 + ctx.r8.u32);
	// cmplwi cr6,r6,0
	ctx.cr6.compare<uint32_t>(ctx.r6.u32, 0, ctx.xer);
	// bne cr6,0x826b2d68
	if (!ctx.cr6.eq) goto loc_826B2D68;
	// li r5,29
	ctx.r5.s64 = 29;
	// li r4,0
	ctx.r4.s64 = 0;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2CF8;
	sub_823924B0(ctx, base);
	// li r5,20
	ctx.r5.s64 = 20;
	// li r4,1
	ctx.r4.s64 = 1;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D08;
	sub_823924B0(ctx, base);
	// li r5,30
	ctx.r5.s64 = 30;
	// li r4,2
	ctx.r4.s64 = 2;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D18;
	sub_823924B0(ctx, base);
	// li r5,36
	ctx.r5.s64 = 36;
	// li r4,3
	ctx.r4.s64 = 3;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D28;
	sub_823924B0(ctx, base);
	// li r5,19
	ctx.r5.s64 = 19;
	// li r4,4
	ctx.r4.s64 = 4;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D38;
	sub_823924B0(ctx, base);
	// li r5,28
	ctx.r5.s64 = 28;
	// li r4,5
	ctx.r4.s64 = 5;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D48;
	sub_823924B0(ctx, base);
	// li r5,18
	ctx.r5.s64 = 18;
	// li r4,6
	ctx.r4.s64 = 6;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D58;
	sub_823924B0(ctx, base);
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,7
	ctx.r4.s64 = 7;
	// addi r3,r1,160
	ctx.r3.s64 = ctx.r1.s64 + 160;
	// bl 0x823924b0
	ctx.lr = 0x826B2D68;
	sub_823924B0(ctx, base);
loc_826B2D68:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2D74;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,76(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + 76);
	// lis r7,-32130
	ctx.r7.s64 = -2105671680;
	// rlwinm r8,r11,2,0,29
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lis r9,-32130
	ctx.r9.s64 = -2105671680;
	// addi r5,r7,-22108
	ctx.r5.s64 = ctx.r7.s64 + -22108;
	// addi r6,r9,-22132
	ctx.r6.s64 = ctx.r9.s64 + -22132;
	// li r7,0
	ctx.r7.s64 = 0;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwzx r3,r8,r10
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + ctx.r10.u32);
	// bl 0x823dedd8
	ctx.lr = 0x826B2DA0;
	sub_823DEDD8(ctx, base);
	// mr r27,r3
	ctx.r27.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B2DAC;
	sub_82388580(ctx, base);
	// mr r6,r3
	ctx.r6.u64 = ctx.r3.u64;
	// lwz r3,-10240(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10240);
	// lwz r4,4(r6)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r6.u32 + 4);
	// bl 0x82270170
	ctx.lr = 0x826B2DBC;
	sub_82270170(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82388580
	ctx.lr = 0x826B2DC8;
	sub_82388580(ctx, base);
	// mr r5,r3
	ctx.r5.u64 = ctx.r3.u64;
	// lwz r3,-10240(r29)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r29.u32 + -10240);
	// lwz r4,4(r5)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	// bl 0x82270170
	ctx.lr = 0x826B2DD8;
	sub_82270170(ctx, base);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2DE8;
	sub_8268C9F0(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// addi r3,r28,16
	ctx.r3.s64 = ctx.r28.s64 + 16;
	// lbz r30,4(r4)
	ctx.r30.u64 = PPC_LOAD_U8(ctx.r4.u32 + 4);
	// bl 0x824e7118
	ctx.lr = 0x826B2DF8;
	sub_824E7118(ctx, base);
	// mr r28,r3
	ctx.r28.u64 = ctx.r3.u64;
	// addi r3,r29,16
	ctx.r3.s64 = ctx.r29.s64 + 16;
	// bl 0x824e7110
	ctx.lr = 0x826B2E04;
	sub_824E7110(ctx, base);
	// lwz r11,0(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// mr r3,r27
	ctx.r3.u64 = ctx.r27.u64;
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B2E1C;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// cntlzw r9,r3
	ctx.r9.u64 = ctx.r3.u32 == 0 ? 32 : __builtin_clz(ctx.r3.u32);
	// addi r4,r1,96
	ctx.r4.s64 = ctx.r1.s64 + 96;
	// rlwinm r5,r9,27,31,31
	ctx.r5.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 27) & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// mr r7,r29
	ctx.r7.u64 = ctx.r29.u64;
	// mr r8,r28
	ctx.r8.u64 = ctx.r28.u64;
	// bl 0x826b1688
	ctx.lr = 0x826B2E3C;
	sub_826B1688(ctx, base);
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// bl 0x8238ed78
	ctx.lr = 0x826B2E44;
	sub_8238ED78(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2E50:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0ee8
	ctx.lr = 0x826B2E58;
	sub_826B0EE8(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2E64:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2E70;
	sub_8268C9F0(ctx, base);
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r11,876(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 876);
	// add. r11,r10,r11
	ctx.r11.u64 = ctx.r10.u64 + ctx.r11.u64;
	ctx.cr0.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// stw r11,876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 876, ctx.r11.u32);
	// bge 0x826b2eb4
	if (!ctx.cr0.lt) goto loc_826B2EB4;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2E90;
	sub_8268C9F0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r10,880(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 880);
	// neg r9,r11
	ctx.r9.s64 = -ctx.r11.s64;
	// divwu r8,r10,r9
	ctx.r8.u32 = ctx.r10.u32 / ctx.r9.u32;
	// twllei r9,0
	// mullw r7,r8,r9
	ctx.r7.s64 = int64_t(ctx.r8.s32) * int64_t(ctx.r9.s32);
	// subf r6,r7,r10
	ctx.r6.s64 = ctx.r10.s64 - ctx.r7.s64;
	// subf r5,r6,r10
	ctx.r5.s64 = ctx.r10.s64 - ctx.r6.s64;
	// stw r5,876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 876, ctx.r5.u32);
loc_826B2EB4:
	// lwz r11,880(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 880);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3038
	if (ctx.cr6.eq) goto loc_826B3038;
	// lwz r10,876(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 876);
	// cmpw cr6,r10,r11
	ctx.cr6.compare<int32_t>(ctx.r10.s32, ctx.r11.s32, ctx.xer);
	// blt cr6,0x826b3038
	if (ctx.cr6.lt) goto loc_826B3038;
	// li r11,0
	ctx.r11.s64 = 0;
	// li r3,0
	ctx.r3.s64 = 0;
	// stw r11,876(r31)
	PPC_STORE_U32(ctx.r31.u32 + 876, ctx.r11.u32);
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2EE0:
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2EEC;
	sub_8268C9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// li r4,0
	ctx.r4.s64 = 0;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bne cr6,0x826b2f20
	if (!ctx.cr6.eq) goto loc_826B2F20;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2F04;
	sub_8268C9F0(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// bl 0x826b2120
	ctx.lr = 0x826B2F14;
	sub_826B2120(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2F20:
	// bl 0x8268c9f0
	ctx.lr = 0x826B2F24;
	sub_8268C9F0(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// bne cr6,0x826b3038
	if (!ctx.cr6.eq) goto loc_826B3038;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B2F3C;
	sub_8268C9F0(ctx, base);
	// mr r4,r28
	ctx.r4.u64 = ctx.r28.u64;
	// bl 0x8268c970
	ctx.lr = 0x826B2F44;
	sub_8268C970(ctx, base);
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,336(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 336);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B2F54;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b2120
	ctx.lr = 0x826B2F60;
	sub_826B2120(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2F6C:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x824f9438
	ctx.lr = 0x826B2F74;
	sub_824F9438(ctx, base);
	// lis r10,-32125
	ctx.r10.s64 = -2105344000;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r11,-27740(r10)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r10.u32 + -27740);
	// addi r11,r11,1
	ctx.r11.s64 = ctx.r11.s64 + 1;
	// stw r11,-27740(r10)
	PPC_STORE_U32(ctx.r10.u32 + -27740, ctx.r11.u32);
	// extsw r4,r11
	ctx.r4.s64 = ctx.r11.s32;
	// bl 0x824f92a0
	ctx.lr = 0x826B2F90;
	sub_824F92A0(ctx, base);
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b0658
	ctx.lr = 0x826B2F9C;
	sub_826B0658(ctx, base);
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B2FA8:
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// bl 0x824f9438
	ctx.lr = 0x826B2FB0;
	sub_824F9438(ctx, base);
	// addi r3,r1,8272
	ctx.r3.s64 = ctx.r1.s64 + 8272;
	// bl 0x8238f550
	ctx.lr = 0x826B2FB8;
	sub_8238F550(ctx, base);
	// lis r29,-32125
	ctx.r29.s64 = -2105344000;
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lwz r11,-27740(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -27740);
	// extsw r4,r11
	ctx.r4.s64 = ctx.r11.s32;
	// bl 0x824f92a0
	ctx.lr = 0x826B2FCC;
	sub_824F92A0(ctx, base);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r6,-27740(r29)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r29.u32 + -27740);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r29,r11,-29140
	ctx.r29.s64 = ctx.r11.s64 + -29140;
	// addi r5,r10,-20876
	ctx.r5.s64 = ctx.r10.s64 + -20876;
	// mr r3,r29
	ctx.r3.u64 = ctx.r29.u64;
	// li r4,32
	ctx.r4.s64 = 32;
	// bl 0x82137a08
	ctx.lr = 0x826B2FEC;
	sub_82137A08(ctx, base);
	// addi r3,r1,8272
	ctx.r3.s64 = ctx.r1.s64 + 8272;
	// bl 0x82390248
	ctx.lr = 0x826B2FF4;
	sub_82390248(ctx, base);
	// li r4,1
	ctx.r4.s64 = 1;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// bl 0x8268c9f0
	ctx.lr = 0x826B3000;
	sub_8268C9F0(ctx, base);
	// mr r9,r3
	ctx.r9.u64 = ctx.r3.u64;
	// mr r3,r30
	ctx.r3.u64 = ctx.r30.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lbz r30,4(r9)
	ctx.r30.u64 = PPC_LOAD_U8(ctx.r9.u32 + 4);
	// bl 0x8268c9f0
	ctx.lr = 0x826B3014;
	sub_8268C9F0(ctx, base);
	// lbz r5,4(r3)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r3.u32 + 4);
	// mr r8,r29
	ctx.r8.u64 = ctx.r29.u64;
	// addi r7,r1,80
	ctx.r7.s64 = ctx.r1.s64 + 80;
	// mr r6,r30
	ctx.r6.u64 = ctx.r30.u64;
	// addi r4,r1,8272
	ctx.r4.s64 = ctx.r1.s64 + 8272;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b1688
	ctx.lr = 0x826B3030;
	sub_826B1688(ctx, base);
	// addi r3,r1,8272
	ctx.r3.s64 = ctx.r1.s64 + 8272;
	// bl 0x8238ed78
	ctx.lr = 0x826B3038;
	sub_8238ED78(ctx, base);
loc_826B3038:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,16496
	ctx.r1.s64 = ctx.r1.s64 + 16496;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B3044"))) PPC_WEAK_FUNC(sub_826B3044);
PPC_FUNC_IMPL(__imp__sub_826B3044) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B3048"))) PPC_WEAK_FUNC(sub_826B3048);
PPC_FUNC_IMPL(__imp__sub_826B3048) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lbz r11,16(r31)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r31.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3080
	if (ctx.cr6.eq) goto loc_826B3080;
	// lis r11,-32121
	ctx.r11.s64 = -2105081856;
	// lwz r3,-3624(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + -3624);
	// bl 0x8226ce68
	ctx.lr = 0x826B3074;
	sub_8226CE68(ctx, base);
	// bl 0x824f3b50
	ctx.lr = 0x826B3078;
	sub_824F3B50(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b2328
	ctx.lr = 0x826B3080;
	sub_826B2328(ctx, base);
loc_826B3080:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B3094"))) PPC_WEAK_FUNC(sub_826B3094);
PPC_FUNC_IMPL(__imp__sub_826B3094) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B3098"))) PPC_WEAK_FUNC(sub_826B3098);
PPC_FUNC_IMPL(__imp__sub_826B3098) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r30,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.r30.u64);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// bl 0x826b2778
	ctx.lr = 0x826B30B8;
	sub_826B2778(ctx, base);
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b30d0
	if (ctx.cr6.eq) goto loc_826B30D0;
	// bl 0x82130588
	ctx.lr = 0x826B30CC;
	sub_82130588(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
loc_826B30D0:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r30,-24(r1)
	ctx.r30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B30E8"))) PPC_WEAK_FUNC(sub_826B30E8);
PPC_FUNC_IMPL(__imp__sub_826B30E8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B30F0;
	__savegprlr_28(ctx, base);
	// addi r12,r1,-40
	ctx.r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823db9d8
	ctx.lr = 0x826B30F8;
	sub_823DB9D8(ctx, base);
	// stwu r1,-160(r1)
	ea = -160 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// mr r28,r4
	ctx.r28.u64 = ctx.r4.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r29,r3
	ctx.r29.u64 = ctx.r3.u64;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3114;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b32a4
	if (ctx.cr6.eq) goto loc_826B32A4;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B312C;
	sub_822A3998(ctx, base);
	// lwz r10,0(r13)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r13.u32 + 0);
	// li r9,72
	ctx.r9.s64 = 72;
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lbzx r8,r9,r10
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b314c
	if (ctx.cr6.eq) goto loc_826B314C;
	// addi r11,r11,208
	ctx.r11.s64 = ctx.r11.s64 + 208;
	// b 0x826b3150
	goto loc_826B3150;
loc_826B314C:
	// addi r11,r11,144
	ctx.r11.s64 = ctx.r11.s64 + 144;
loc_826B3150:
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// lvx128 v63,r0,r11
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r9,16
	ctx.r9.s64 = 16;
	// addi r31,r10,-29280
	ctx.r31.s64 = ctx.r10.s64 + -29280;
	// li r8,16
	ctx.r8.s64 = 16;
	// li r7,32
	ctx.r7.s64 = 32;
	// lis r6,-32125
	ctx.r6.s64 = -2105344000;
	// li r5,32
	ctx.r5.s64 = 32;
	// li r4,48
	ctx.r4.s64 = 48;
	// stvx128 v63,r0,r31
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r3,48
	ctx.r3.s64 = 48;
	// lvx128 v63,r11,r9
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r31,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v63,r11,r7
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lwz r10,-29212(r6)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r6.u32 + -29212);
	// stvx128 v63,r31,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v0,r11,r4
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmpwi cr6,r10,0
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 0, ctx.xer);
	// stvx128 v0,r31,r3
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r3.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x826b3298
	if (!ctx.cr6.eq) goto loc_826B3298;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B31AC;
	sub_822A3998(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// lwz r10,880(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 880);
	// lwz r9,124(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 124);
	// lfs f29,204(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 204);
	ctx.f29.f64 = double(temp.f32);
	// bl 0x822a3998
	ctx.lr = 0x826B31C8;
	sub_822A3998(ctx, base);
	// lwz r8,880(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lwz r7,124(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 124);
	// lfs f30,200(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 200);
	ctx.f30.f64 = double(temp.f32);
	// fmr f1,f30
	ctx.f1.f64 = ctx.f30.f64;
	// bl 0x823dbae8
	ctx.lr = 0x826B31DC;
	sub_823DBAE8(ctx, base);
	// frsp f28,f1
	ctx.fpscr.disableFlushMode();
	ctx.f28.f64 = double(float(ctx.f1.f64));
	// fmr f1,f29
	ctx.f1.f64 = ctx.f29.f64;
	// bl 0x823dbbc8
	ctx.lr = 0x826B31E8;
	sub_823DBBC8(ctx, base);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// lfs f13,21688(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 21688);
	ctx.f13.f64 = double(temp.f32);
	// lis r6,-32255
	ctx.r6.s64 = -2113863680;
	// fmr f1,f30
	ctx.f1.f64 = ctx.f30.f64;
	// lfs f31,-31384(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -31384);
	ctx.f31.f64 = double(temp.f32);
	// fmuls f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 * ctx.f0.f64));
	// fmuls f11,f12,f28
	ctx.f11.f64 = double(float(ctx.f12.f64 * ctx.f28.f64));
	// fmuls f10,f11,f31
	ctx.f10.f64 = double(float(ctx.f11.f64 * ctx.f31.f64));
	// stfs f10,80(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// bl 0x823dbbc8
	ctx.lr = 0x826B3210;
	sub_823DBBC8(ctx, base);
	// frsp f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = double(float(ctx.f1.f64));
	// fmr f1,f29
	ctx.f1.f64 = ctx.f29.f64;
	// bl 0x823dbbc8
	ctx.lr = 0x826B321C;
	sub_823DBBC8(ctx, base);
	// frsp f9,f1
	ctx.fpscr.disableFlushMode();
	ctx.f9.f64 = double(float(ctx.f1.f64));
	// lfs f8,21692(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 21692);
	ctx.f8.f64 = double(temp.f32);
	// li r10,48
	ctx.r10.s64 = 48;
	// lbz r5,21684(r29)
	ctx.r5.u64 = PPC_LOAD_U8(ctx.r29.u32 + 21684);
	// li r8,32
	ctx.r8.s64 = 32;
	// lvx128 v0,r0,r31
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r31.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// cmplwi cr6,r5,0
	ctx.cr6.compare<uint32_t>(ctx.r5.u32, 0, ctx.xer);
	// li r7,48
	ctx.r7.s64 = 48;
	// lvx128 v13,r31,r10
	_mm_store_si128((__m128i*)ctx.v13.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lvx128 v12,r31,r8
	_mm_store_si128((__m128i*)ctx.v12.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// fmuls f7,f8,f9
	ctx.f7.f64 = double(float(ctx.f8.f64 * ctx.f9.f64));
	// fmuls f6,f7,f30
	ctx.f6.f64 = double(float(ctx.f7.f64 * ctx.f30.f64));
	// fmuls f5,f6,f31
	ctx.f5.f64 = double(float(ctx.f6.f64 * ctx.f31.f64));
	// stfs f5,84(r1)
	temp.f32 = float(ctx.f5.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// beq cr6,0x826b3274
	if (ctx.cr6.eq) goto loc_826B3274;
	// addi r11,r1,84
	ctx.r11.s64 = ctx.r1.s64 + 84;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lvlx128 v63,r0,r11
	temp.u32 = ctx.r11.u32;
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvlx128 v62,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v11,v63,0
	_mm_store_si128((__m128i*)ctx.v11.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v63.u32), 0xFF));
	// vspltw128 v10,v62,0
	_mm_store_si128((__m128i*)ctx.v10.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v62.u32), 0xFF));
	// b 0x826b328c
	goto loc_826B328C;
loc_826B3274:
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// addi r9,r1,84
	ctx.r9.s64 = ctx.r1.s64 + 84;
	// lvlx128 v61,r0,r11
	temp.u32 = ctx.r11.u32;
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// lvlx128 v60,r0,r9
	temp.u32 = ctx.r9.u32;
	_mm_store_si128((__m128i*)ctx.v60.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v11,v61,0
	_mm_store_si128((__m128i*)ctx.v11.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v61.u32), 0xFF));
	// vspltw128 v10,v60,0
	_mm_store_si128((__m128i*)ctx.v10.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v60.u32), 0xFF));
loc_826B328C:
	// vmaddfp v0,v0,v11,v13
	ctx.fpscr.enableFlushMode();
	_mm_store_ps(ctx.v0.f32, _mm_add_ps(_mm_mul_ps(_mm_load_ps(ctx.v0.f32), _mm_load_ps(ctx.v11.f32)), _mm_load_ps(ctx.v13.f32)));
	// vmaddfp v0,v12,v10,v0
	_mm_store_ps(ctx.v0.f32, _mm_add_ps(_mm_mul_ps(_mm_load_ps(ctx.v12.f32), _mm_load_ps(ctx.v10.f32)), _mm_load_ps(ctx.v0.f32)));
	// stvx128 v0,r31,r7
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r7.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826B3298:
	// cmplwi cr6,r28,0
	ctx.cr6.compare<uint32_t>(ctx.r28.u32, 0, ctx.xer);
	// beq cr6,0x826b32a4
	if (ctx.cr6.eq) goto loc_826B32A4;
	// stvx128 v0,r0,r28
	_mm_store_si128((__m128i*)(base + ((ctx.r28.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826B32A4:
	// addi r1,r1,160
	ctx.r1.s64 = ctx.r1.s64 + 160;
	// addi r12,r1,-40
	ctx.r12.s64 = ctx.r1.s64 + -40;
	// bl 0x823dba24
	ctx.lr = 0x826B32B0;
	__restfpr_28(ctx, base);
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B32B4"))) PPC_WEAK_FUNC(sub_826B32B4);
PPC_FUNC_IMPL(__imp__sub_826B32B4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B32B8"))) PPC_WEAK_FUNC(sub_826B32B8);
PPC_FUNC_IMPL(__imp__sub_826B32B8) {
	PPC_FUNC_PROLOGUE();
	// cmpwi cr6,r4,3
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 3, ctx.xer);
	// beq cr6,0x826b32d8
	if (ctx.cr6.eq) goto loc_826B32D8;
	// cmpwi cr6,r4,9
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 9, ctx.xer);
	// ble cr6,0x826b32d0
	if (!ctx.cr6.gt) goto loc_826B32D0;
	// cmpwi cr6,r4,13
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 13, ctx.xer);
	// ble cr6,0x826b32d8
	if (!ctx.cr6.gt) goto loc_826B32D8;
loc_826B32D0:
	// li r3,0
	ctx.r3.s64 = 0;
	// blr 
	return;
loc_826B32D8:
	// li r3,1
	ctx.r3.s64 = 1;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B32E0"))) PPC_WEAK_FUNC(sub_826B32E0);
PPC_FUNC_IMPL(__imp__sub_826B32E0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B32E8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r30,-32125
	ctx.r30.s64 = -2105344000;
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// ori r9,r11,40784
	ctx.r9.u64 = ctx.r11.u64 | 40784;
	// addi r29,r10,-21664
	ctx.r29.s64 = ctx.r10.s64 + -21664;
	// lwz r11,-29212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29212);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// add r7,r11,r10
	ctx.r7.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r5,r8,-20528
	ctx.r5.s64 = ctx.r8.s64 + -20528;
	// rlwinm r11,r7,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// add r6,r11,r31
	ctx.r6.u64 = ctx.r11.u64 + ctx.r31.u64;
	// lfsx f1,r6,r9
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r9.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x826a61b0
	ctx.lr = 0x826B332C;
	sub_826A61B0(ctx, base);
	// lwz r11,-29212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29212);
	// lis r5,-32244
	ctx.r5.s64 = -2113142784;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// addi r11,r11,850
	ctx.r11.s64 = ctx.r11.s64 + 850;
	// addi r28,r5,-20548
	ctx.r28.s64 = ctx.r5.s64 + -20548;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r11,r11,r10
	ctx.r11.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// rlwinm r10,r11,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 4) & 0xFFFFFFF0;
	// li r6,0
	ctx.r6.s64 = 0;
	// lfsx f1,r10,r31
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r31.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x826a6220
	ctx.lr = 0x826B3360;
	sub_826A6220(ctx, base);
	// lwz r11,-29212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29212);
	// lis r9,0
	ctx.r9.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r8,r9,40804
	ctx.r8.u64 = ctx.r9.u64 | 40804;
	// add r7,r11,r10
	ctx.r7.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// rlwinm r11,r7,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// li r6,1
	ctx.r6.s64 = 1;
	// lfsx f1,r11,r8
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r8.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x826a6220
	ctx.lr = 0x826B3394;
	sub_826A6220(ctx, base);
	// lwz r11,-29212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29212);
	// lis r9,0
	ctx.r9.s64 = 0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r8,r9,40808
	ctx.r8.u64 = ctx.r9.u64 | 40808;
	// add r7,r11,r10
	ctx.r7.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// rlwinm r11,r7,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// li r6,2
	ctx.r6.s64 = 2;
	// lfsx f1,r11,r8
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r8.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x826a6220
	ctx.lr = 0x826B33C8;
	sub_826A6220(ctx, base);
	// lwz r11,-29212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29212);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r7,r9,40816
	ctx.r7.u64 = ctx.r9.u64 | 40816;
	// add r6,r11,r10
	ctx.r6.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addi r28,r8,-20564
	ctx.r28.s64 = ctx.r8.s64 + -20564;
	// rlwinm r11,r6,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// li r6,0
	ctx.r6.s64 = 0;
	// lfsx f1,r11,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r7.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x826a6220
	ctx.lr = 0x826B3404;
	sub_826A6220(ctx, base);
	// lwz r11,-29212(r30)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r30.u32 + -29212);
	// lis r9,0
	ctx.r9.s64 = 0;
	// mr r5,r28
	ctx.r5.u64 = ctx.r28.u64;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r8,r9,40820
	ctx.r8.u64 = ctx.r9.u64 | 40820;
	// add r7,r11,r10
	ctx.r7.u64 = ctx.r11.u64 + ctx.r10.u64;
	// mr r4,r29
	ctx.r4.u64 = ctx.r29.u64;
	// rlwinm r11,r7,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r7.u32 | (ctx.r7.u64 << 32), 4) & 0xFFFFFFF0;
	// li r6,1
	ctx.r6.s64 = 1;
	// add r11,r11,r31
	ctx.r11.u64 = ctx.r11.u64 + ctx.r31.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lfsx f1,r11,r8
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + ctx.r8.u32);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x826a6220
	ctx.lr = 0x826B3438;
	sub_826A6220(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B3440"))) PPC_WEAK_FUNC(sub_826B3440);
PPC_FUNC_IMPL(__imp__sub_826B3440) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.f31.u64);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82387ba0
	ctx.lr = 0x826B345C;
	sub_82387BA0(ctx, base);
	// lis r11,-32112
	ctx.r11.s64 = -2104492032;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// addi r11,r11,21384
	ctx.r11.s64 = ctx.r11.s64 + 21384;
	// rlwinm r10,r10,6,0,25
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r9,r11,8
	ctx.r9.s64 = ctx.r11.s64 + 8;
	// lwzx r9,r10,r9
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r9.u32);
	// clrlwi r8,r9,31
	ctx.r8.u64 = ctx.r9.u32 & 0x1;
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// bne cr6,0x826b34d8
	if (!ctx.cr6.eq) goto loc_826B34D8;
	// rlwinm r9,r9,0,30,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826b34d8
	if (!ctx.cr6.eq) goto loc_826B34D8;
	// add r31,r10,r11
	ctx.r31.u64 = ctx.r10.u64 + ctx.r11.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8221cc50
	ctx.lr = 0x826B3498;
	sub_8221CC50(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fmr f31,f1
	ctx.fpscr.disableFlushMode();
	ctx.f31.f64 = ctx.f1.f64;
	// bl 0x8221cca8
	ctx.lr = 0x826B34A4;
	sub_8221CCA8(ctx, base);
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f0,-29232(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -29232);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f31,f0
	ctx.cr6.compare(ctx.f31.f64, ctx.f0.f64);
	// bgt cr6,0x826b34d8
	if (ctx.cr6.gt) goto loc_826B34D8;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// lfs f13,25724(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 25724);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f31,f13
	ctx.cr6.compare(ctx.f31.f64, ctx.f13.f64);
	// blt cr6,0x826b34d8
	if (ctx.cr6.lt) goto loc_826B34D8;
	// fcmpu cr6,f1,f0
	ctx.cr6.compare(ctx.f1.f64, ctx.f0.f64);
	// bgt cr6,0x826b34d8
	if (ctx.cr6.gt) goto loc_826B34D8;
	// fcmpu cr6,f1,f13
	ctx.cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// li r3,1
	ctx.r3.s64 = 1;
	// bge cr6,0x826b34dc
	if (!ctx.cr6.lt) goto loc_826B34DC;
loc_826B34D8:
	// li r3,0
	ctx.r3.s64 = 0;
loc_826B34DC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f31,-24(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B34F4"))) PPC_WEAK_FUNC(sub_826B34F4);
PPC_FUNC_IMPL(__imp__sub_826B34F4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B34F8"))) PPC_WEAK_FUNC(sub_826B34F8);
PPC_FUNC_IMPL(__imp__sub_826B34F8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91d8
	ctx.lr = 0x826B3500;
	__savegprlr_20(ctx, base);
	// stwu r1,-208(r1)
	ea = -208 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r28,-32125
	ctx.r28.s64 = -2105344000;
	// mr r21,r4
	ctx.r21.u64 = ctx.r4.u64;
	// lis r11,0
	ctx.r11.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// ori r9,r11,39252
	ctx.r9.u64 = ctx.r11.u64 | 39252;
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// cmpw cr6,r21,r10
	ctx.cr6.compare<int32_t>(ctx.r21.s32, ctx.r10.s32, ctx.xer);
	// bne cr6,0x826b3540
	if (!ctx.cr6.eq) goto loc_826B3540;
	// clrlwi r11,r5,24
	ctx.r11.u64 = ctx.r5.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3b88
	if (ctx.cr6.eq) goto loc_826B3B88;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f0,11360(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 11360);
	ctx.f0.f64 = double(temp.f32);
	// stfsx f0,r31,r9
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
loc_826B3540:
	// li r20,1
	ctx.r20.s64 = 1;
	// cmpwi cr6,r21,3
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 3, ctx.xer);
	// beq cr6,0x826b3564
	if (ctx.cr6.eq) goto loc_826B3564;
	// cmpwi cr6,r21,9
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 9, ctx.xer);
	// ble cr6,0x826b355c
	if (!ctx.cr6.gt) goto loc_826B355C;
	// cmpwi cr6,r21,13
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 13, ctx.xer);
	// ble cr6,0x826b3564
	if (!ctx.cr6.gt) goto loc_826B3564;
loc_826B355C:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b3568
	goto loc_826B3568;
loc_826B3564:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B3568:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3588
	if (ctx.cr6.eq) goto loc_826B3588;
	// cmpwi cr6,r10,4
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 4, ctx.xer);
	// bne cr6,0x826b3588
	if (!ctx.cr6.eq) goto loc_826B3588;
	// clrlwi r11,r5,24
	ctx.r11.u64 = ctx.r5.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3b88
	if (ctx.cr6.eq) goto loc_826B3B88;
loc_826B3588:
	// cmpwi cr6,r21,3
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 3, ctx.xer);
	// beq cr6,0x826b35a8
	if (ctx.cr6.eq) goto loc_826B35A8;
	// cmpwi cr6,r21,9
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 9, ctx.xer);
	// ble cr6,0x826b35a0
	if (!ctx.cr6.gt) goto loc_826B35A0;
	// cmpwi cr6,r21,13
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 13, ctx.xer);
	// ble cr6,0x826b35a8
	if (!ctx.cr6.gt) goto loc_826B35A8;
loc_826B35A0:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b35ac
	goto loc_826B35AC;
loc_826B35A8:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B35AC:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b35f8
	if (!ctx.cr6.eq) goto loc_826B35F8;
	// cmpwi cr6,r10,3
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 3, ctx.xer);
	// beq cr6,0x826b35d8
	if (ctx.cr6.eq) goto loc_826B35D8;
	// cmpwi cr6,r10,9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 9, ctx.xer);
	// ble cr6,0x826b35d0
	if (!ctx.cr6.gt) goto loc_826B35D0;
	// cmpwi cr6,r10,13
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 13, ctx.xer);
	// ble cr6,0x826b35d8
	if (!ctx.cr6.gt) goto loc_826B35D8;
loc_826B35D0:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b35dc
	goto loc_826B35DC;
loc_826B35D8:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B35DC:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b35f8
	if (!ctx.cr6.eq) goto loc_826B35F8;
	// cmpwi cr6,r21,4
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 4, ctx.xer);
	// beq cr6,0x826b35f8
	if (ctx.cr6.eq) goto loc_826B35F8;
	// cmpwi cr6,r10,4
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 4, ctx.xer);
	// bne cr6,0x826b36cc
	if (!ctx.cr6.eq) goto loc_826B36CC;
loc_826B35F8:
	// cmpwi cr6,r21,3
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 3, ctx.xer);
	// beq cr6,0x826b3618
	if (ctx.cr6.eq) goto loc_826B3618;
	// cmpwi cr6,r21,9
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 9, ctx.xer);
	// ble cr6,0x826b3610
	if (!ctx.cr6.gt) goto loc_826B3610;
	// cmpwi cr6,r21,13
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 13, ctx.xer);
	// ble cr6,0x826b3618
	if (!ctx.cr6.gt) goto loc_826B3618;
loc_826B3610:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b361c
	goto loc_826B361C;
loc_826B3618:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B361C:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3674
	if (ctx.cr6.eq) goto loc_826B3674;
	// cmpwi cr6,r10,3
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 3, ctx.xer);
	// beq cr6,0x826b3648
	if (ctx.cr6.eq) goto loc_826B3648;
	// cmpwi cr6,r10,9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 9, ctx.xer);
	// ble cr6,0x826b3640
	if (!ctx.cr6.gt) goto loc_826B3640;
	// cmpwi cr6,r10,13
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 13, ctx.xer);
	// ble cr6,0x826b3648
	if (!ctx.cr6.gt) goto loc_826B3648;
loc_826B3640:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b364c
	goto loc_826B364C;
loc_826B3648:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B364C:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b3674
	if (!ctx.cr6.eq) goto loc_826B3674;
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r8,r11,39248
	ctx.r8.u64 = ctx.r11.u64 | 39248;
	// ori r7,r10,39240
	ctx.r7.u64 = ctx.r10.u64 | 39240;
	// lfsx f0,r31,r8
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	ctx.f0.f64 = double(temp.f32);
	// stwx r21,r31,r7
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, ctx.r21.u32);
	// b 0x826b36d8
	goto loc_826B36D8;
loc_826B3674:
	// cmpwi cr6,r21,3
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 3, ctx.xer);
	// beq cr6,0x826b3694
	if (ctx.cr6.eq) goto loc_826B3694;
	// cmpwi cr6,r21,9
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 9, ctx.xer);
	// ble cr6,0x826b368c
	if (!ctx.cr6.gt) goto loc_826B368C;
	// cmpwi cr6,r21,13
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 13, ctx.xer);
	// ble cr6,0x826b3694
	if (!ctx.cr6.gt) goto loc_826B3694;
loc_826B368C:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b3698
	goto loc_826B3698;
loc_826B3694:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B3698:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b36cc
	if (!ctx.cr6.eq) goto loc_826B36CC;
	// cmpwi cr6,r10,3
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 3, ctx.xer);
	// beq cr6,0x826b36c4
	if (ctx.cr6.eq) goto loc_826B36C4;
	// cmpwi cr6,r10,9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 9, ctx.xer);
	// ble cr6,0x826b36bc
	if (!ctx.cr6.gt) goto loc_826B36BC;
	// cmpwi cr6,r10,13
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 13, ctx.xer);
	// ble cr6,0x826b36c4
	if (!ctx.cr6.gt) goto loc_826B36C4;
loc_826B36BC:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b36c8
	goto loc_826B36C8;
loc_826B36C4:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B36C8:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
loc_826B36CC:
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39248
	ctx.r10.u64 = ctx.r11.u64 | 39248;
	// lfsx f0,r31,r10
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	ctx.f0.f64 = double(temp.f32);
loc_826B36D8:
	// stfsx f0,r31,r9
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// lwz r25,-29212(r28)
	ctx.r25.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// stw r21,-29212(r28)
	PPC_STORE_U32(ctx.r28.u32 + -29212, ctx.r21.u32);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b32e0
	ctx.lr = 0x826B36EC;
	sub_826B32E0(ctx, base);
	// cmpwi cr6,r21,3
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 3, ctx.xer);
	// beq cr6,0x826b370c
	if (ctx.cr6.eq) goto loc_826B370C;
	// cmpwi cr6,r21,9
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 9, ctx.xer);
	// ble cr6,0x826b3704
	if (!ctx.cr6.gt) goto loc_826B3704;
	// cmpwi cr6,r21,13
	ctx.cr6.compare<int32_t>(ctx.r21.s32, 13, ctx.xer);
	// ble cr6,0x826b370c
	if (!ctx.cr6.gt) goto loc_826B370C;
loc_826B3704:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b3710
	goto loc_826B3710;
loc_826B370C:
	// mr r11,r20
	ctx.r11.u64 = ctx.r20.u64;
loc_826B3710:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// lis r11,0
	ctx.r11.s64 = 0;
	// beq cr6,0x826b372c
	if (ctx.cr6.eq) goto loc_826B372C;
	// ori r10,r11,39229
	ctx.r10.u64 = ctx.r11.u64 | 39229;
	// stbx r20,r31,r10
	PPC_STORE_U8(ctx.r31.u32 + ctx.r10.u32, ctx.r20.u8);
	// b 0x826b3738
	goto loc_826B3738;
loc_826B372C:
	// ori r9,r11,39229
	ctx.r9.u64 = ctx.r11.u64 | 39229;
	// li r10,0
	ctx.r10.s64 = 0;
	// stbx r10,r31,r9
	PPC_STORE_U8(ctx.r31.u32 + ctx.r9.u32, ctx.r10.u8);
loc_826B3738:
	// lis r23,-32121
	ctx.r23.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3748;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,0
	ctx.r10.s64 = 0;
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// ori r9,r10,39268
	ctx.r9.u64 = ctx.r10.u64 | 39268;
	// addis r24,r31,1
	ctx.r24.s64 = ctx.r31.s64 + 65536;
	// addi r29,r29,-26264
	ctx.r29.s64 = ctx.r29.s64 + -26264;
	// lwz r30,124(r11)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// addis r27,r31,1
	ctx.r27.s64 = ctx.r31.s64 + 65536;
	// addi r24,r24,-26260
	ctx.r24.s64 = ctx.r24.s64 + -26260;
	// addis r26,r31,1
	ctx.r26.s64 = ctx.r31.s64 + 65536;
	// addi r27,r27,-26256
	ctx.r27.s64 = ctx.r27.s64 + -26256;
	// lis r8,0
	ctx.r8.s64 = 0;
	// lfs f0,192(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 192);
	ctx.f0.f64 = double(temp.f32);
	// addi r26,r26,-26252
	ctx.r26.s64 = ctx.r26.s64 + -26252;
	// stfsx f0,r31,r9
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// ori r7,r8,39288
	ctx.r7.u64 = ctx.r8.u64 | 39288;
	// lfs f13,196(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 196);
	ctx.f13.f64 = double(temp.f32);
	// stfs f13,0(r29)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lfs f12,200(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 200);
	ctx.f12.f64 = double(temp.f32);
	// stfs f12,0(r24)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r24.u32 + 0, temp.u32);
	// lfs f11,204(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 204);
	ctx.f11.f64 = double(temp.f32);
	// stfs f11,0(r27)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r27.u32 + 0, temp.u32);
	// lfs f10,208(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 208);
	ctx.f10.f64 = double(temp.f32);
	// stfs f10,0(r26)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r26.u32 + 0, temp.u32);
	// lfs f9,168(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 168);
	ctx.f9.f64 = double(temp.f32);
	// stfsx f9,r31,r7
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r7.u32, temp.u32);
	// lwz r6,144(r30)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r30.u32 + 144);
	// cmpwi cr6,r6,0
	ctx.cr6.compare<int32_t>(ctx.r6.s32, 0, ctx.xer);
	// bne cr6,0x826b37dc
	if (!ctx.cr6.eq) goto loc_826B37DC;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B37C8;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// addi r9,r10,-29280
	ctx.r9.s64 = ctx.r10.s64 + -29280;
	// lwz r8,124(r11)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// stw r9,144(r8)
	PPC_STORE_U32(ctx.r8.u32 + 144, ctx.r9.u32);
loc_826B37DC:
	// lis r10,-32111
	ctx.r10.s64 = -2104426496;
	// lwz r9,144(r30)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r30.u32 + 144);
	// li r22,48
	ctx.r22.s64 = 48;
	// lwz r11,-29212(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// addi r8,r10,-29216
	ctx.r8.s64 = ctx.r10.s64 + -29216;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// lvx128 v63,r9,r22
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32 + ctx.r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r8
	_mm_store_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bne cr6,0x826b38f8
	if (!ctx.cr6.eq) goto loc_826B38F8;
	// cmpwi cr6,r25,3
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 3, ctx.xer);
	// beq cr6,0x826b3820
	if (ctx.cr6.eq) goto loc_826B3820;
	// cmpwi cr6,r25,9
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 9, ctx.xer);
	// ble cr6,0x826b3818
	if (!ctx.cr6.gt) goto loc_826B3818;
	// cmpwi cr6,r25,13
	ctx.cr6.compare<int32_t>(ctx.r25.s32, 13, ctx.xer);
	// ble cr6,0x826b3820
	if (!ctx.cr6.gt) goto loc_826B3820;
loc_826B3818:
	// li r10,0
	ctx.r10.s64 = 0;
	// b 0x826b3824
	goto loc_826B3824;
loc_826B3820:
	// mr r10,r20
	ctx.r10.u64 = ctx.r20.u64;
loc_826B3824:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b38f8
	if (!ctx.cr6.eq) goto loc_826B38F8;
	// lis r11,0
	ctx.r11.s64 = 0;
	// lfs f13,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// lfs f11,0(r24)
	temp.u32 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// ori r8,r11,39596
	ctx.r8.u64 = ctx.r11.u64 | 39596;
	// lfs f0,0(r26)
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lis r10,0
	ctx.r10.s64 = 0;
	// lfs f12,0(r27)
	temp.u32 = PPC_LOAD_U32(ctx.r27.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// addis r9,r31,1
	ctx.r9.s64 = ctx.r31.s64 + 65536;
	// addis r7,r31,1
	ctx.r7.s64 = ctx.r31.s64 + 65536;
	// addi r29,r29,-26236
	ctx.r29.s64 = ctx.r29.s64 + -26236;
	// lfsx f10,r31,r8
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	ctx.f10.f64 = double(temp.f32);
	// ori r6,r10,39308
	ctx.r6.u64 = ctx.r10.u64 | 39308;
	// addi r11,r11,-26244
	ctx.r11.s64 = ctx.r11.s64 + -26244;
	// addi r9,r9,-26240
	ctx.r9.s64 = ctx.r9.s64 + -26240;
	// addi r7,r7,-26232
	ctx.r7.s64 = ctx.r7.s64 + -26232;
	// stfs f11,0(r29)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lis r4,0
	ctx.r4.s64 = 0;
	// stfsx f0,r31,r6
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r6.u32, temp.u32);
	// lis r5,0
	ctx.r5.s64 = 0;
	// stfs f10,0(r11)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// ori r6,r4,39312
	ctx.r6.u64 = ctx.r4.u64 | 39312;
	// stfs f13,0(r9)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
	// ori r3,r5,39604
	ctx.r3.u64 = ctx.r5.u64 | 39604;
	// stfs f12,0(r7)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r7.u32 + 0, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// rlwinm r8,r10,1,0,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r4,r10,r8
	ctx.r4.u64 = ctx.r10.u64 + ctx.r8.u64;
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// rlwinm r10,r4,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r4.u32 | (ctx.r4.u64 << 32), 4) & 0xFFFFFFF0;
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + ctx.r31.u64;
	// lfs f13,32672(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 32672);
	ctx.f13.f64 = double(temp.f32);
	// lfsx f9,r10,r3
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r3.u32);
	ctx.f9.f64 = double(temp.f32);
	// stfsx f9,r31,r6
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r6.u32, temp.u32);
	// lfs f0,196(r30)
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 196);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// bgt cr6,0x826b38d8
	if (ctx.cr6.gt) goto loc_826B38D8;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,30712(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 30712);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// bge cr6,0x826b38dc
	if (!ctx.cr6.lt) goto loc_826B38DC;
loc_826B38D8:
	// stfs f13,0(r9)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r9.u32 + 0, temp.u32);
loc_826B38DC:
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f13,204(r30)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r30.u32 + 204);
	ctx.f13.f64 = double(temp.f32);
	// lfs f0,14992(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14992);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x826b39f4
	if (!ctx.cr6.lt) goto loc_826B39F4;
	// stfs f0,0(r7)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r7.u32 + 0, temp.u32);
	// b 0x826b39f4
	goto loc_826B39F4;
loc_826B38F8:
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r9,0
	ctx.r9.s64 = 0;
	// add r8,r11,r10
	ctx.r8.u64 = ctx.r11.u64 + ctx.r10.u64;
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// rlwinm r10,r8,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// ori r7,r9,39596
	ctx.r7.u64 = ctx.r9.u64 | 39596;
	// add r6,r10,r31
	ctx.r6.u64 = ctx.r10.u64 + ctx.r31.u64;
	// addi r11,r11,-26244
	ctx.r11.s64 = ctx.r11.s64 + -26244;
	// lis r4,0
	ctx.r4.s64 = 0;
	// lis r5,0
	ctx.r5.s64 = 0;
	// ori r8,r4,39296
	ctx.r8.u64 = ctx.r4.u64 | 39296;
	// lfsx f0,r6,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r7.u32);
	ctx.f0.f64 = double(temp.f32);
	// ori r3,r5,39584
	ctx.r3.u64 = ctx.r5.u64 | 39584;
	// stfs f0,0(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r6,r10,r9
	ctx.r6.u64 = ctx.r10.u64 + ctx.r9.u64;
	// lis r7,0
	ctx.r7.s64 = 0;
	// rlwinm r10,r6,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// lis r9,0
	ctx.r9.s64 = 0;
	// add r4,r10,r31
	ctx.r4.u64 = ctx.r10.u64 + ctx.r31.u64;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r5,r7,39588
	ctx.r5.u64 = ctx.r7.u64 | 39588;
	// ori r7,r10,39592
	ctx.r7.u64 = ctx.r10.u64 | 39592;
	// ori r6,r9,39304
	ctx.r6.u64 = ctx.r9.u64 | 39304;
	// lfsx f13,r4,r3
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + ctx.r3.u32);
	ctx.f13.f64 = double(temp.f32);
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// stfsx f13,r31,r8
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// addi r29,r29,-26236
	ctx.r29.s64 = ctx.r29.s64 + -26236;
	// rlwinm r10,r10,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// lis r4,0
	ctx.r4.s64 = 0;
	// add r10,r10,r31
	ctx.r10.u64 = ctx.r10.u64 + ctx.r31.u64;
	// ori r8,r4,39308
	ctx.r8.u64 = ctx.r4.u64 | 39308;
	// lis r3,0
	ctx.r3.s64 = 0;
	// lis r4,0
	ctx.r4.s64 = 0;
	// ori r3,r3,39604
	ctx.r3.u64 = ctx.r3.u64 | 39604;
	// lfsx f12,r10,r5
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + ctx.r5.u32);
	ctx.f12.f64 = double(temp.f32);
	// ori r4,r4,39312
	ctx.r4.u64 = ctx.r4.u64 | 39312;
	// stfs f12,0(r29)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r9,r10,r9
	ctx.r9.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r9,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r9.u32 | (ctx.r9.u64 << 32), 4) & 0xFFFFFFF0;
	// add r5,r10,r31
	ctx.r5.u64 = ctx.r10.u64 + ctx.r31.u64;
	// lfsx f11,r5,r7
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + ctx.r7.u32);
	ctx.f11.f64 = double(temp.f32);
	// stfsx f11,r31,r6
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r6.u32, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// addi r10,r10,825
	ctx.r10.s64 = ctx.r10.s64 + 825;
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r10,r10,r9
	ctx.r10.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r9,r10,4,0,27
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 4) & 0xFFFFFFF0;
	// lfsx f10,r9,r31
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + ctx.r31.u32);
	ctx.f10.f64 = double(temp.f32);
	// stfsx f10,r31,r8
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r8.u32, temp.u32);
	// lwz r10,-29212(r28)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// rlwinm r9,r10,1,0,30
	ctx.r9.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 1) & 0xFFFFFFFE;
	// add r8,r10,r9
	ctx.r8.u64 = ctx.r10.u64 + ctx.r9.u64;
	// rlwinm r10,r8,4,0,27
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// add r7,r10,r31
	ctx.r7.u64 = ctx.r10.u64 + ctx.r31.u64;
	// lfsx f9,r7,r3
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + ctx.r3.u32);
	ctx.f9.f64 = double(temp.f32);
	// stfsx f9,r31,r4
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r4.u32, temp.u32);
loc_826B39F4:
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r10,57776
	ctx.r9.u64 = ctx.r10.u64 | 57776;
	// lbzx r8,r31,r9
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r31.u32 + ctx.r9.u32);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b3a14
	if (ctx.cr6.eq) goto loc_826B3A14;
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lfs f0,-31384(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -31384);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,0(r11)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
loc_826B3A14:
	// lwz r11,-29212(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826b3a30
	if (!ctx.cr6.eq) goto loc_826B3A30;
	// addi r4,r1,80
	ctx.r4.s64 = ctx.r1.s64 + 80;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b30e8
	ctx.lr = 0x826B3A2C;
	sub_826B30E8(ctx, base);
	// b 0x826b3a84
	goto loc_826B3A84;
loc_826B3A30:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3A3C;
	sub_822A3998(ctx, base);
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b3a84
	if (ctx.cr6.eq) goto loc_826B3A84;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r23)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r23.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3A54;
	sub_822A3998(ctx, base);
	// lwz r10,0(r13)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r13.u32 + 0);
	// li r9,72
	ctx.r9.s64 = 72;
	// lwz r11,48(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 48);
	// lbzx r8,r9,r10
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r9.u32 + ctx.r10.u32);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b3a74
	if (ctx.cr6.eq) goto loc_826B3A74;
	// addi r11,r11,208
	ctx.r11.s64 = ctx.r11.s64 + 208;
	// b 0x826b3a78
	goto loc_826B3A78;
loc_826B3A74:
	// addi r11,r11,144
	ctx.r11.s64 = ctx.r11.s64 + 144;
loc_826B3A78:
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lvx128 v63,r11,r22
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32 + ctx.r22.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
loc_826B3A84:
	// lwz r11,-29212(r28)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r28.u32 + -29212);
	// lis r9,0
	ctx.r9.s64 = 0;
	// addi r8,r1,80
	ctx.r8.s64 = ctx.r1.s64 + 80;
	// lfs f12,0(r24)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r24.u32 + 0);
	ctx.f12.f64 = double(temp.f32);
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// ori r7,r9,39616
	ctx.r7.u64 = ctx.r9.u64 | 39616;
	// add r6,r11,r10
	ctx.r6.u64 = ctx.r11.u64 + ctx.r10.u64;
	// lis r5,0
	ctx.r5.s64 = 0;
	// rlwinm r11,r6,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r6.u32 | (ctx.r6.u64 << 32), 4) & 0xFFFFFFF0;
	// lvx128 v62,r0,r8
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lis r4,-32256
	ctx.r4.s64 = -2113929216;
	// add r3,r11,r31
	ctx.r3.u64 = ctx.r11.u64 + ctx.r31.u64;
	// ori r11,r5,39328
	ctx.r11.u64 = ctx.r5.u64 | 39328;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lfs f11,3796(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 3796);
	ctx.f11.f64 = double(temp.f32);
	// lvx128 v61,r3,r7
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32 + ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// fcmpu cr6,f12,f11
	ctx.cr6.compare(ctx.f12.f64, ctx.f11.f64);
	// vaddfp128 v60,v62,v61
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v60.f32, _mm_add_ps(_mm_load_ps(ctx.v62.f32), _mm_load_ps(ctx.v61.f32)));
	// lfs f0,14980(r10)
	ctx.fpscr.disableFlushModeUnconditional();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 14980);
	ctx.f0.f64 = double(temp.f32);
	// stvx128 v60,r31,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// ble cr6,0x826b3af4
	if (!ctx.cr6.gt) goto loc_826B3AF4;
	// lfs f13,0(r29)
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f10,f12,f13
	ctx.f10.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fcmpu cr6,f10,f0
	ctx.cr6.compare(ctx.f10.f64, ctx.f0.f64);
	// ble cr6,0x826b3af4
	if (!ctx.cr6.gt) goto loc_826B3AF4;
	// fadds f13,f13,f0
	ctx.f13.f64 = double(float(ctx.f13.f64 + ctx.f0.f64));
	// fadds f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f0.f64));
	// b 0x826b3b1c
	goto loc_826B3B1C;
loc_826B3AF4:
	// lfs f13,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r29.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f11
	ctx.cr6.compare(ctx.f13.f64, ctx.f11.f64);
	// ble cr6,0x826b3b20
	if (!ctx.cr6.gt) goto loc_826B3B20;
	// fsubs f12,f13,f12
	ctx.f12.f64 = double(float(ctx.f13.f64 - ctx.f12.f64));
	// fcmpu cr6,f12,f0
	ctx.cr6.compare(ctx.f12.f64, ctx.f0.f64);
	// ble cr6,0x826b3b20
	if (!ctx.cr6.gt) goto loc_826B3B20;
	// fsubs f13,f0,f13
	ctx.f13.f64 = double(float(ctx.f0.f64 - ctx.f13.f64));
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f0,2432(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 2432);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f12,f0,f13
	ctx.f12.f64 = double(float(ctx.f0.f64 - ctx.f13.f64));
loc_826B3B1C:
	// stfs f12,0(r29)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r29.u32 + 0, temp.u32);
loc_826B3B20:
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,0
	ctx.r10.s64 = 0;
	// ori r9,r11,39236
	ctx.r9.u64 = ctx.r11.u64 | 39236;
	// ori r8,r10,39244
	ctx.r8.u64 = ctx.r10.u64 | 39244;
	// lis r7,-32121
	ctx.r7.s64 = -2105081856;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// stfsx f11,r31,r9
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, temp.u32);
	// addi r4,r6,-21664
	ctx.r4.s64 = ctx.r6.s64 + -21664;
	// stbx r20,r31,r8
	PPC_STORE_U8(ctx.r31.u32 + ctx.r8.u32, ctx.r20.u8);
	// lwz r3,-10236(r7)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r7.u32 + -10236);
	// bl 0x821f9fb8
	ctx.lr = 0x826B3B4C;
	sub_821F9FB8(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b3b88
	if (ctx.cr6.eq) goto loc_826B3B88;
	// lwz r31,56(r3)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r3.u32 + 56);
	// cmplwi cr6,r31,0
	ctx.cr6.compare<uint32_t>(ctx.r31.u32, 0, ctx.xer);
	// beq cr6,0x826b3b88
	if (ctx.cr6.eq) goto loc_826B3B88;
	// lis r11,-32254
	ctx.r11.s64 = -2113798144;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r11,-12592
	ctx.r4.s64 = ctx.r11.s64 + -12592;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826B3B74;
	sub_825EE0E0(ctx, base);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// mr r5,r21
	ctx.r5.u64 = ctx.r21.u64;
	// addi r4,r10,21416
	ctx.r4.s64 = ctx.r10.s64 + 21416;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x825ee0e0
	ctx.lr = 0x826B3B88;
	sub_825EE0E0(ctx, base);
loc_826B3B88:
	// addi r1,r1,208
	ctx.r1.s64 = ctx.r1.s64 + 208;
	// b 0x823d9228
	__restgprlr_20(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B3B90"))) PPC_WEAK_FUNC(sub_826B3B90);
PPC_FUNC_IMPL(__imp__sub_826B3B90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91fc
	ctx.lr = 0x826B3B98;
	__savegprlr_29(ctx, base);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r29,-32125
	ctx.r29.s64 = -2105344000;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r11,-29212(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -29212);
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x826b3c5c
	if (!ctx.cr6.eq) goto loc_826B3C5C;
	// bl 0x822a3998
	ctx.lr = 0x826B3BC0;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,26468(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 26468);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,200(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x826b3cfc
	if (!ctx.cr6.lt) goto loc_826B3CFC;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3BE8;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,23884(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 23884);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,200(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// ble cr6,0x826b3cfc
	if (!ctx.cr6.gt) goto loc_826B3CFC;
	// lis r11,0
	ctx.r11.s64 = 0;
	// li r5,1
	ctx.r5.s64 = 1;
	// ori r10,r11,39240
	ctx.r10.u64 = ctx.r11.u64 | 39240;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// lwzx r4,r31,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	// bl 0x826b34f8
	ctx.lr = 0x826B3C1C;
	sub_826B34F8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3C28;
	sub_822A3998(ctx, base);
	// lwz r9,880(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r7,0
	ctx.r7.s64 = 0;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// ori r5,r8,39300
	ctx.r5.u64 = ctx.r8.u64 | 39300;
	// lwz r4,124(r9)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r9.u32 + 124);
	// ori r3,r7,39252
	ctx.r3.u64 = ctx.r7.u64 | 39252;
	// lfs f0,-12084(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -12084);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,200(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// stfsx f13,r31,r5
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r5.u32, temp.u32);
	// stfsx f0,r31,r3
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r3.u32, temp.u32);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
loc_826B3C5C:
	// bl 0x822a3998
	ctx.lr = 0x826B3C60;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,26468(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 26468);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,200(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bgt cr6,0x826b3ca4
	if (ctx.cr6.gt) goto loc_826B3CA4;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3C88;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32254
	ctx.r10.s64 = -2113798144;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,23884(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 23884);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,200(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x826b3cfc
	if (!ctx.cr6.lt) goto loc_826B3CFC;
loc_826B3CA4:
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r11,-29212(r29)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r29.u32 + -29212);
	// li r5,1
	ctx.r5.s64 = 1;
	// ori r9,r10,39240
	ctx.r9.u64 = ctx.r10.u64 | 39240;
	// li r4,4
	ctx.r4.s64 = 4;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// stwx r11,r31,r9
	PPC_STORE_U32(ctx.r31.u32 + ctx.r9.u32, ctx.r11.u32);
	// bl 0x826b34f8
	ctx.lr = 0x826B3CC4;
	sub_826B34F8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3CD0;
	sub_822A3998(ctx, base);
	// lwz r8,880(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r7,0
	ctx.r7.s64 = 0;
	// lis r6,0
	ctx.r6.s64 = 0;
	// lis r5,-32254
	ctx.r5.s64 = -2113798144;
	// ori r4,r7,39300
	ctx.r4.u64 = ctx.r7.u64 | 39300;
	// lwz r3,124(r8)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r8.u32 + 124);
	// ori r11,r6,39252
	ctx.r11.u64 = ctx.r6.u64 | 39252;
	// lfs f0,-12084(r5)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + -12084);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,200(r3)
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 200);
	ctx.f13.f64 = double(temp.f32);
	// stfsx f13,r31,r4
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r4.u32, temp.u32);
	// stfsx f0,r31,r11
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r31.u32 + ctx.r11.u32, temp.u32);
loc_826B3CFC:
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// b 0x823d924c
	__restgprlr_29(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B3D04"))) PPC_WEAK_FUNC(sub_826B3D04);
PPC_FUNC_IMPL(__imp__sub_826B3D04) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B3D08"))) PPC_WEAK_FUNC(sub_826B3D08);
PPC_FUNC_IMPL(__imp__sub_826B3D08) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f0
	ctx.lr = 0x826B3D10;
	__savegprlr_26(ctx, base);
	// addi r12,r1,-56
	ctx.r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823db9d4
	ctx.lr = 0x826B3D18;
	sub_823DB9D4(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82387ba0
	ctx.lr = 0x826B3D28;
	sub_82387BA0(ctx, base);
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r30,4(r3)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3D3C;
	sub_822A3998(ctx, base);
	// lis r11,-32112
	ctx.r11.s64 = -2104492032;
	// lwz r10,880(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// rlwinm r28,r30,6,0,25
	ctx.r28.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r29,r11,21384
	ctx.r29.s64 = ctx.r11.s64 + 21384;
	// lis r27,-32125
	ctx.r27.s64 = -2105344000;
	// addi r9,r29,8
	ctx.r9.s64 = ctx.r29.s64 + 8;
	// lwz r8,124(r10)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r10.u32 + 124);
	// lwzx r30,r28,r9
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r9.u32);
	// lfs f31,168(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 168);
	ctx.f31.f64 = double(temp.f32);
	// rlwinm r7,r30,0,30,30
	ctx.r7.u64 = __builtin_rotateleft64(ctx.r30.u32 | (ctx.r30.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r7,0
	ctx.cr6.compare<uint32_t>(ctx.r7.u32, 0, ctx.xer);
	// beq cr6,0x826b3ddc
	if (ctx.cr6.eq) goto loc_826B3DDC;
	// bl 0x8269a1b0
	ctx.lr = 0x826B3D70;
	sub_8269A1B0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3da4
	if (ctx.cr6.eq) goto loc_826B3DA4;
	// lwz r11,-29212(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b3d94
	if (ctx.cr6.eq) goto loc_826B3D94;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// li r11,0
	ctx.r11.s64 = 0;
	// bne cr6,0x826b3d98
	if (!ctx.cr6.eq) goto loc_826B3D98;
loc_826B3D94:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B3D98:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3ddc
	if (ctx.cr6.eq) goto loc_826B3DDC;
loc_826B3DA4:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3DB0;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,-20504(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -20504);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,168(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 168);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// blt cr6,0x826b3e54
	if (ctx.cr6.lt) goto loc_826B3E54;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f0,31308(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 31308);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f31,f31,f0
	ctx.f31.f64 = double(float(ctx.f31.f64 - ctx.f0.f64));
	// b 0x826b3e54
	goto loc_826B3E54;
loc_826B3DDC:
	// clrlwi r11,r30,31
	ctx.r11.u64 = ctx.r30.u32 & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3e54
	if (ctx.cr6.eq) goto loc_826B3E54;
	// bl 0x8269a1b0
	ctx.lr = 0x826B3DEC;
	sub_8269A1B0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3e20
	if (ctx.cr6.eq) goto loc_826B3E20;
	// lwz r11,-29212(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b3e10
	if (ctx.cr6.eq) goto loc_826B3E10;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// li r11,0
	ctx.r11.s64 = 0;
	// bne cr6,0x826b3e14
	if (!ctx.cr6.eq) goto loc_826B3E14;
loc_826B3E10:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B3E14:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b3e54
	if (ctx.cr6.eq) goto loc_826B3E54;
loc_826B3E20:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3E2C;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,-20508(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + -20508);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,168(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 168);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bgt cr6,0x826b3e54
	if (ctx.cr6.gt) goto loc_826B3E54;
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// lfs f0,31308(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 31308);
	ctx.f0.f64 = double(temp.f32);
	// fadds f31,f31,f0
	ctx.f31.f64 = double(float(ctx.f31.f64 + ctx.f0.f64));
loc_826B3E54:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B3E60;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// addi r10,r29,18
	ctx.r10.s64 = ctx.r29.s64 + 18;
	// lis r9,-32255
	ctx.r9.s64 = -2113863680;
	// lis r8,-32254
	ctx.r8.s64 = -2113798144;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// lwz r6,124(r11)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lis r5,-32256
	ctx.r5.s64 = -2113929216;
	// lfs f12,-28876(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + -28876);
	ctx.f12.f64 = double(temp.f32);
	// lfs f11,1068(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 1068);
	ctx.f11.f64 = double(temp.f32);
	// lfs f13,14192(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 14192);
	ctx.f13.f64 = double(temp.f32);
	// stfs f31,168(r6)
	temp.f32 = float(ctx.f31.f64);
	PPC_STORE_U32(ctx.r6.u32 + 168, temp.u32);
	// lbzx r3,r28,r10
	ctx.r3.u64 = PPC_LOAD_U8(ctx.r28.u32 + ctx.r10.u32);
	// std r3,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r3.u64);
	// lfd f0,80(r1)
	ctx.f0.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f9,f0
	ctx.f9.f64 = double(ctx.f0.s64);
	// lfs f10,7444(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 7444);
	ctx.f10.f64 = double(temp.f32);
	// frsp f8,f9
	ctx.f8.f64 = double(float(ctx.f9.f64));
	// fsubs f7,f8,f12
	ctx.f7.f64 = double(float(ctx.f8.f64 - ctx.f12.f64));
	// fmuls f0,f7,f11
	ctx.f0.f64 = double(float(ctx.f7.f64 * ctx.f11.f64));
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// bge cr6,0x826b3ebc
	if (!ctx.cr6.lt) goto loc_826B3EBC;
	// fmr f0,f13
	ctx.f0.f64 = ctx.f13.f64;
	// b 0x826b3ec8
	goto loc_826B3EC8;
loc_826B3EBC:
	// fcmpu cr6,f0,f10
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f0.f64, ctx.f10.f64);
	// ble cr6,0x826b3ec8
	if (!ctx.cr6.gt) goto loc_826B3EC8;
	// fmr f0,f10
	ctx.f0.f64 = ctx.f10.f64;
loc_826B3EC8:
	// addi r11,r29,19
	ctx.r11.s64 = ctx.r29.s64 + 19;
	// lbzx r9,r28,r11
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r28.u32 + ctx.r11.u32);
	// std r9,80(r1)
	PPC_STORE_U64(ctx.r1.u32 + 80, ctx.r9.u64);
	// lfd f9,80(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f9.u64 = PPC_LOAD_U64(ctx.r1.u32 + 80);
	// fcfid f8,f9
	ctx.f8.f64 = double(ctx.f9.s64);
	// frsp f7,f8
	ctx.f7.f64 = double(float(ctx.f8.f64));
	// fsubs f6,f7,f12
	ctx.f6.f64 = double(float(ctx.f7.f64 - ctx.f12.f64));
	// fmuls f12,f6,f11
	ctx.f12.f64 = double(float(ctx.f6.f64 * ctx.f11.f64));
	// fcmpu cr6,f12,f13
	ctx.cr6.compare(ctx.f12.f64, ctx.f13.f64);
	// bge cr6,0x826b3ef8
	if (!ctx.cr6.lt) goto loc_826B3EF8;
	// fmr f27,f13
	ctx.f27.f64 = ctx.f13.f64;
	// b 0x826b3f0c
	goto loc_826B3F0C;
loc_826B3EF8:
	// fcmpu cr6,f12,f10
	ctx.fpscr.disableFlushMode();
	ctx.cr6.compare(ctx.f12.f64, ctx.f10.f64);
	// ble cr6,0x826b3f08
	if (!ctx.cr6.gt) goto loc_826B3F08;
	// fmr f27,f10
	ctx.f27.f64 = ctx.f10.f64;
	// b 0x826b3f0c
	goto loc_826B3F0C;
loc_826B3F08:
	// fmr f27,f12
	ctx.fpscr.disableFlushMode();
	ctx.f27.f64 = ctx.f12.f64;
loc_826B3F0C:
	// lis r11,-32255
	ctx.r11.s64 = -2113863680;
	// lfs f28,-29232(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + -29232);
	ctx.f28.f64 = double(temp.f32);
	// fcmpu cr6,f0,f28
	ctx.cr6.compare(ctx.f0.f64, ctx.f28.f64);
	// bgt cr6,0x826b3f3c
	if (ctx.cr6.gt) goto loc_826B3F3C;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// lfs f13,25724(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 25724);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f0,f13
	ctx.cr6.compare(ctx.f0.f64, ctx.f13.f64);
	// blt cr6,0x826b3f3c
	if (ctx.cr6.lt) goto loc_826B3F3C;
	// fcmpu cr6,f27,f28
	ctx.cr6.compare(ctx.f27.f64, ctx.f28.f64);
	// bgt cr6,0x826b3f3c
	if (ctx.cr6.gt) goto loc_826B3F3C;
	// fcmpu cr6,f27,f13
	ctx.cr6.compare(ctx.f27.f64, ctx.f13.f64);
	// bge cr6,0x826b4060
	if (!ctx.cr6.lt) goto loc_826B4060;
loc_826B3F3C:
	// lis r11,0
	ctx.r11.s64 = 0;
	// fmr f1,f0
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f0.f64;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// fmr f2,f28
	ctx.f2.f64 = ctx.f28.f64;
	// ori r9,r11,39232
	ctx.r9.u64 = ctx.r11.u64 | 39232;
	// lfs f0,3796(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// stfsx f0,r26,r9
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r26.u32 + ctx.r9.u32, temp.u32);
	// bl 0x8260c5c8
	ctx.lr = 0x826B3F5C;
	sub_8260C5C8(ctx, base);
	// lis r8,-32253
	ctx.r8.s64 = -2113732608;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// lfs f29,-26236(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -26236);
	ctx.f29.f64 = double(temp.f32);
	// fmuls f31,f1,f29
	ctx.f31.f64 = double(float(ctx.f1.f64 * ctx.f29.f64));
	// bl 0x822a3998
	ctx.lr = 0x826B3F74;
	sub_822A3998(ctx, base);
	// mr r7,r3
	ctx.r7.u64 = ctx.r3.u64;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r6,880(r7)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r7.u32 + 880);
	// lwz r5,124(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 124);
	// lfs f30,200(r5)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 200);
	ctx.f30.f64 = double(temp.f32);
	// bl 0x822a3998
	ctx.lr = 0x826B3F90;
	sub_822A3998(ctx, base);
	// mr r4,r3
	ctx.r4.u64 = ctx.r3.u64;
	// fadds f0,f30,f31
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f30.f64 + ctx.f31.f64));
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// lwz r11,880(r4)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r4.u32 + 880);
	// lwz r10,124(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// stfs f0,200(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 200, temp.u32);
	// bl 0x826b3b90
	ctx.lr = 0x826B3FAC;
	sub_826B3B90(ctx, base);
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lwz r11,-29212(r27)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r27.u32 + -29212);
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// lfs f31,14992(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 14992);
	ctx.f31.f64 = double(temp.f32);
	// lfs f30,32680(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 32680);
	ctx.f30.f64 = double(temp.f32);
	// beq cr6,0x826b4008
	if (ctx.cr6.eq) goto loc_826B4008;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x826b3fe8
	if (ctx.cr6.eq) goto loc_826B3FE8;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// ble cr6,0x826b3fe0
	if (!ctx.cr6.gt) goto loc_826B3FE0;
	// cmpwi cr6,r11,13
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 13, ctx.xer);
	// ble cr6,0x826b3fe8
	if (!ctx.cr6.gt) goto loc_826B3FE8;
loc_826B3FE0:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b3fec
	goto loc_826B3FEC;
loc_826B3FE8:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B3FEC:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b4008
	if (ctx.cr6.eq) goto loc_826B4008;
	// lis r11,-32253
	ctx.r11.s64 = -2113732608;
	// lis r10,-32252
	ctx.r10.s64 = -2113667072;
	// lfs f31,29964(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 29964);
	ctx.f31.f64 = double(temp.f32);
	// lfs f30,21992(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 21992);
	ctx.f30.f64 = double(temp.f32);
loc_826B4008:
	// fmr f2,f28
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f28.f64;
	// fmr f1,f27
	ctx.f1.f64 = ctx.f27.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826B4014;
	sub_8260C5C8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// fmuls f29,f1,f29
	ctx.fpscr.disableFlushMode();
	ctx.f29.f64 = double(float(ctx.f1.f64 * ctx.f29.f64));
	// bl 0x822a3998
	ctx.lr = 0x826B4024;
	sub_822A3998(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r31)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r31.u32 + 17268);
	// lwz r10,880(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 880);
	// lwz r9,124(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 124);
	// lfs f0,204(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 204);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f29,f0,f29
	ctx.f29.f64 = double(float(ctx.f0.f64 - ctx.f29.f64));
	// bl 0x822a3998
	ctx.lr = 0x826B4044;
	sub_822A3998(ctx, base);
	// fsubs f13,f29,f31
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f29.f64 - ctx.f31.f64));
	// lwz r8,880(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lwz r7,124(r8)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r8.u32 + 124);
	// fsel f12,f13,f29,f31
	ctx.f12.f64 = ctx.f13.f64 >= 0.0 ? ctx.f29.f64 : ctx.f31.f64;
	// fsubs f11,f12,f30
	ctx.f11.f64 = double(float(ctx.f12.f64 - ctx.f30.f64));
	// fsel f10,f11,f30,f12
	ctx.f10.f64 = ctx.f11.f64 >= 0.0 ? ctx.f30.f64 : ctx.f12.f64;
	// stfs f10,204(r7)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r7.u32 + 204, temp.u32);
loc_826B4060:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-56
	ctx.r12.s64 = ctx.r1.s64 + -56;
	// bl 0x823dba20
	ctx.lr = 0x826B406C;
	__restfpr_27(ctx, base);
	// b 0x823d9240
	__restgprlr_26(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4070"))) PPC_WEAK_FUNC(sub_826B4070);
PPC_FUNC_IMPL(__imp__sub_826B4070) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91ec
	ctx.lr = 0x826B4078;
	__savegprlr_25(ctx, base);
	// addi r12,r1,-64
	ctx.r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823db9d4
	ctx.lr = 0x826B4080;
	sub_823DB9D4(ctx, base);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r26,r3
	ctx.r26.u64 = ctx.r3.u64;
	// lbz r11,21668(r26)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r26.u32 + 21668);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b44f8
	if (ctx.cr6.eq) goto loc_826B44F8;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39228
	ctx.r10.u64 = ctx.r11.u64 | 39228;
	// lbzx r9,r26,r10
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r26.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,1
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 1, ctx.xer);
	// beq cr6,0x826b44f8
	if (ctx.cr6.eq) goto loc_826B44F8;
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82387ba0
	ctx.lr = 0x826B40B0;
	sub_82387BA0(ctx, base);
	// lis r11,-32112
	ctx.r11.s64 = -2104492032;
	// lwz r10,4(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// lis r25,-32125
	ctx.r25.s64 = -2105344000;
	// addi r29,r11,21384
	ctx.r29.s64 = ctx.r11.s64 + 21384;
	// rlwinm r28,r10,6,0,25
	ctx.r28.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 6) & 0xFFFFFFC0;
	// addi r9,r29,8
	ctx.r9.s64 = ctx.r29.s64 + 8;
	// lis r30,-32121
	ctx.r30.s64 = -2105081856;
	// li r27,0
	ctx.r27.s64 = 0;
	// lwzx r31,r28,r9
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r28.u32 + ctx.r9.u32);
	// rlwinm r8,r31,0,30,30
	ctx.r8.u64 = __builtin_rotateleft64(ctx.r31.u32 | (ctx.r31.u64 << 32), 0) & 0x2;
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// beq cr6,0x826b417c
	if (ctx.cr6.eq) goto loc_826B417C;
	// lwz r11,21676(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 21676);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// beq cr6,0x826b417c
	if (ctx.cr6.eq) goto loc_826B417C;
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// beq cr6,0x826b417c
	if (ctx.cr6.eq) goto loc_826B417C;
	// bl 0x8269a1b0
	ctx.lr = 0x826B40F8;
	sub_8269A1B0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b412c
	if (ctx.cr6.eq) goto loc_826B412C;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b411c
	if (ctx.cr6.eq) goto loc_826B411C;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// li r11,0
	ctx.r11.s64 = 0;
	// bne cr6,0x826b4120
	if (!ctx.cr6.eq) goto loc_826B4120;
loc_826B411C:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B4120:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b417c
	if (ctx.cr6.eq) goto loc_826B417C;
loc_826B412C:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B4138;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,30712(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 30712);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,196(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 196);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// ble cr6,0x826b4224
	if (!ctx.cr6.gt) goto loc_826B4224;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B4160;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,31308(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 31308);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,196(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 196);
	ctx.f13.f64 = double(temp.f32);
	// fsubs f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 - ctx.f0.f64));
	// b 0x826b4220
	goto loc_826B4220;
loc_826B417C:
	// clrlwi r11,r31,31
	ctx.r11.u64 = ctx.r31.u32 & 0x1;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b4228
	if (ctx.cr6.eq) goto loc_826B4228;
	// lwz r11,21676(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 21676);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// beq cr6,0x826b4228
	if (ctx.cr6.eq) goto loc_826B4228;
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// beq cr6,0x826b4228
	if (ctx.cr6.eq) goto loc_826B4228;
	// bl 0x8269a1b0
	ctx.lr = 0x826B41A0;
	sub_8269A1B0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b41d4
	if (ctx.cr6.eq) goto loc_826B41D4;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b41c4
	if (ctx.cr6.eq) goto loc_826B41C4;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// li r11,0
	ctx.r11.s64 = 0;
	// bne cr6,0x826b41c8
	if (!ctx.cr6.eq) goto loc_826B41C8;
loc_826B41C4:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B41C8:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b4228
	if (ctx.cr6.eq) goto loc_826B4228;
loc_826B41D4:
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B41E0;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r9,124(r11)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,32672(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 32672);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,196(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 196);
	ctx.f13.f64 = double(temp.f32);
	// fcmpu cr6,f13,f0
	ctx.cr6.compare(ctx.f13.f64, ctx.f0.f64);
	// bge cr6,0x826b4224
	if (!ctx.cr6.lt) goto loc_826B4224;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B4208;
	sub_822A3998(ctx, base);
	// lwz r11,880(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// lwz r11,124(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 124);
	// lfs f0,31308(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 31308);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,196(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 196);
	ctx.f13.f64 = double(temp.f32);
	// fadds f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f0.f64));
loc_826B4220:
	// stfs f12,196(r11)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 196, temp.u32);
loc_826B4224:
	// li r27,1
	ctx.r27.s64 = 1;
loc_826B4228:
	// add r31,r28,r29
	ctx.r31.u64 = ctx.r28.u64 + ctx.r29.u64;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x8221cc50
	ctx.lr = 0x826B4234;
	sub_8221CC50(ctx, base);
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = ctx.f1.f64;
	// bl 0x8221cca8
	ctx.lr = 0x826B4240;
	sub_8221CCA8(ctx, base);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// fmr f29,f1
	ctx.fpscr.disableFlushMode();
	ctx.f29.f64 = ctx.f1.f64;
	// bl 0x822a3998
	ctx.lr = 0x826B4250;
	sub_822A3998(ctx, base);
	// mr r11,r3
	ctx.r11.u64 = ctx.r3.u64;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// lwz r10,880(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 880);
	// lwz r9,124(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 124);
	// lfs f28,204(r9)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 204);
	ctx.f28.f64 = double(temp.f32);
	// bl 0x822a3998
	ctx.lr = 0x826B426C;
	sub_822A3998(ctx, base);
	// lwz r8,880(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r7,-32255
	ctx.r7.s64 = -2113863680;
	// lwz r6,124(r8)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r8.u32 + 124);
	// lfs f31,-29232(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -29232);
	ctx.f31.f64 = double(temp.f32);
	// fcmpu cr6,f30,f31
	ctx.cr6.compare(ctx.f30.f64, ctx.f31.f64);
	// lfs f27,200(r6)
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + 200);
	ctx.f27.f64 = double(temp.f32);
	// bgt cr6,0x826b42a8
	if (ctx.cr6.gt) goto loc_826B42A8;
	// fcmpu cr6,f29,f31
	ctx.cr6.compare(ctx.f29.f64, ctx.f31.f64);
	// bgt cr6,0x826b42a8
	if (ctx.cr6.gt) goto loc_826B42A8;
	// lis r11,-32252
	ctx.r11.s64 = -2113667072;
	// lfs f0,25724(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 25724);
	ctx.f0.f64 = double(temp.f32);
	// fcmpu cr6,f30,f0
	ctx.cr6.compare(ctx.f30.f64, ctx.f0.f64);
	// blt cr6,0x826b42a8
	if (ctx.cr6.lt) goto loc_826B42A8;
	// fcmpu cr6,f29,f0
	ctx.cr6.compare(ctx.f29.f64, ctx.f0.f64);
	// bge cr6,0x826b4360
	if (!ctx.cr6.lt) goto loc_826B4360;
loc_826B42A8:
	// fmr f2,f31
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = ctx.f31.f64;
	// fmr f1,f30
	ctx.f1.f64 = ctx.f30.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826B42B4;
	sub_8260C5C8(ctx, base);
	// fmr f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = ctx.f1.f64;
	// fmr f2,f31
	ctx.f2.f64 = ctx.f31.f64;
	// fmr f1,f29
	ctx.f1.f64 = ctx.f29.f64;
	// bl 0x8260c5c8
	ctx.lr = 0x826B42C4;
	sub_8260C5C8(ctx, base);
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,-32256
	ctx.r10.s64 = -2113929216;
	// ori r9,r11,39232
	ctx.r9.u64 = ctx.r11.u64 | 39232;
	// lis r8,-32253
	ctx.r8.s64 = -2113732608;
	// li r27,1
	ctx.r27.s64 = 1;
	// lfs f0,3796(r10)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 3796);
	ctx.f0.f64 = double(temp.f32);
	// stfsx f0,r26,r9
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r26.u32 + ctx.r9.u32, temp.u32);
	// lwz r7,-29212(r25)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// lfs f31,-26236(r8)
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + -26236);
	ctx.f31.f64 = double(temp.f32);
	// cmpwi cr6,r7,0
	ctx.cr6.compare<int32_t>(ctx.r7.s32, 0, ctx.xer);
	// fmuls f29,f1,f31
	ctx.f29.f64 = double(float(ctx.f1.f64 * ctx.f31.f64));
	// bne cr6,0x826b4360
	if (!ctx.cr6.eq) goto loc_826B4360;
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B4300;
	sub_822A3998(ctx, base);
	// lwz r9,880(r3)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lis r11,-32256
	ctx.r11.s64 = -2113929216;
	// fmadds f1,f30,f31,f27
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = double(float(ctx.f30.f64 * ctx.f31.f64 + ctx.f27.f64));
	// lis r10,-32255
	ctx.r10.s64 = -2113863680;
	// lwz r31,124(r9)
	ctx.r31.u64 = PPC_LOAD_U32(ctx.r9.u32 + 124);
	// lfs f3,14980(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 14980);
	ctx.f3.f64 = double(temp.f32);
	// lfs f2,2432(r10)
	temp.u32 = PPC_LOAD_U32(ctx.r10.u32 + 2432);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x82151fe0
	ctx.lr = 0x826B4320;
	sub_82151FE0(ctx, base);
	// stfs f1,200(r31)
	ctx.fpscr.disableFlushMode();
	temp.f32 = float(ctx.f1.f64);
	PPC_STORE_U32(ctx.r31.u32 + 200, temp.u32);
	// li r4,0
	ctx.r4.s64 = 0;
	// lwz r3,17268(r30)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r30.u32 + 17268);
	// fsubs f31,f28,f29
	ctx.f31.f64 = double(float(ctx.f28.f64 - ctx.f29.f64));
	// bl 0x822a3998
	ctx.lr = 0x826B4334;
	sub_822A3998(ctx, base);
	// lis r8,-32256
	ctx.r8.s64 = -2113929216;
	// lfs f0,14992(r8)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r8.u32 + 14992);
	ctx.f0.f64 = double(temp.f32);
	// lis r7,-32255
	ctx.r7.s64 = -2113863680;
	// fsubs f12,f31,f0
	ctx.f12.f64 = double(float(ctx.f31.f64 - ctx.f0.f64));
	// lwz r6,880(r3)
	ctx.r6.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// lfs f13,-28880(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -28880);
	ctx.f13.f64 = double(temp.f32);
	// lwz r5,124(r6)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r6.u32 + 124);
	// fsel f11,f12,f31,f0
	ctx.f11.f64 = ctx.f12.f64 >= 0.0 ? ctx.f31.f64 : ctx.f0.f64;
	// fsubs f10,f11,f13
	ctx.f10.f64 = double(float(ctx.f11.f64 - ctx.f13.f64));
	// fsel f9,f10,f13,f11
	ctx.f9.f64 = ctx.f10.f64 >= 0.0 ? ctx.f13.f64 : ctx.f11.f64;
	// stfs f9,204(r5)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r5.u32 + 204, temp.u32);
loc_826B4360:
	// clrlwi r11,r27,24
	ctx.r11.u64 = ctx.r27.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b44f8
	if (ctx.cr6.eq) goto loc_826B44F8;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39244
	ctx.r10.u64 = ctx.r11.u64 | 39244;
	// lbzx r9,r26,r10
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r26.u32 + ctx.r10.u32);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826b44f8
	if (!ctx.cr6.eq) goto loc_826B44F8;
	// lwz r11,21676(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 21676);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// beq cr6,0x826b44f8
	if (ctx.cr6.eq) goto loc_826B44F8;
	// cmpwi cr6,r11,6
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 6, ctx.xer);
	// beq cr6,0x826b44f8
	if (ctx.cr6.eq) goto loc_826B44F8;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826b43bc
	if (!ctx.cr6.eq) goto loc_826B43BC;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// bl 0x826b30e8
	ctx.lr = 0x826B43AC;
	sub_826B30E8(ctx, base);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-64
	ctx.r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823dba20
	ctx.lr = 0x826B43B8;
	__restfpr_27(ctx, base);
	// b 0x823d923c
	__restgprlr_25(ctx, base);
	return;
loc_826B43BC:
	// bl 0x8269a1b0
	ctx.lr = 0x826B43C0;
	sub_8269A1B0(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b44f8
	if (!ctx.cr6.eq) goto loc_826B44F8;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lbz r10,-29345(r11)
	ctx.r10.u64 = PPC_LOAD_U8(ctx.r11.u32 + -29345);
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b44f8
	if (!ctx.cr6.eq) goto loc_826B44F8;
	// lis r31,-32121
	ctx.r31.s64 = -2105081856;
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// addi r3,r11,4
	ctx.r3.s64 = ctx.r11.s64 + 4;
	// lwz r11,4(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r10,28(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 28);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B43FC;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// clrlwi r9,r3,24
	ctx.r9.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826b44f8
	if (!ctx.cr6.eq) goto loc_826B44F8;
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// lwz r3,52(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// bl 0x8221df70
	ctx.lr = 0x826B4414;
	sub_8221DF70(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b44f8
	if (!ctx.cr6.eq) goto loc_826B44F8;
	// lwz r11,21676(r26)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r26.u32 + 21676);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b4490
	if (ctx.cr6.eq) goto loc_826B4490;
	// cmpwi cr6,r11,5
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 5, ctx.xer);
	// beq cr6,0x826b4490
	if (ctx.cr6.eq) goto loc_826B4490;
	// cmpwi cr6,r11,1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 1, ctx.xer);
	// beq cr6,0x826b444c
	if (ctx.cr6.eq) goto loc_826B444C;
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x826b444c
	if (ctx.cr6.eq) goto loc_826B444C;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// bne cr6,0x826b44f8
	if (!ctx.cr6.eq) goto loc_826B44F8;
loc_826B444C:
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// li r5,0
	ctx.r5.s64 = 0;
	// ori r9,r10,39240
	ctx.r9.u64 = ctx.r10.u64 | 39240;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// stwx r11,r26,r9
	PPC_STORE_U32(ctx.r26.u32 + ctx.r9.u32, ctx.r11.u32);
	// bl 0x826b34f8
	ctx.lr = 0x826B446C;
	sub_826B34F8(ctx, base);
	// lis r8,0
	ctx.r8.s64 = 0;
	// lis r7,-32254
	ctx.r7.s64 = -2113798144;
	// ori r6,r8,39252
	ctx.r6.u64 = ctx.r8.u64 | 39252;
	// lfs f0,-12084(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + -12084);
	ctx.f0.f64 = double(temp.f32);
	// stfsx f0,r26,r6
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r26.u32 + ctx.r6.u32, temp.u32);
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-64
	ctx.r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823dba20
	ctx.lr = 0x826B448C;
	__restfpr_27(ctx, base);
	// b 0x823d923c
	__restgprlr_25(ctx, base);
	return;
loc_826B4490:
	// lis r11,-32244
	ctx.r11.s64 = -2113142784;
	// addi r3,r11,-20500
	ctx.r3.s64 = ctx.r11.s64 + -20500;
	// bl 0x821fa230
	ctx.lr = 0x826B449C;
	sub_821FA230(ctx, base);
	// lwz r11,-10236(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + -10236);
	// lwz r11,52(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + 52);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// addi r4,r11,4
	ctx.r4.s64 = ctx.r11.s64 + 4;
	// bne cr6,0x826b44b4
	if (!ctx.cr6.eq) goto loc_826B44B4;
	// li r4,0
	ctx.r4.s64 = 0;
loc_826B44B4:
	// lwz r11,0(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// lwz r10,348(r11)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r11.u32 + 348);
	// mtctr r10
	ctx.ctr.u64 = ctx.r10.u64;
	// bctrl 
	ctx.lr = 0x826B44C4;
	PPC_CALL_INDIRECT_FUNC(ctx.ctr.u32);
	// lis r9,0
	ctx.r9.s64 = 0;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// li r5,0
	ctx.r5.s64 = 0;
	// ori r8,r9,39240
	ctx.r8.u64 = ctx.r9.u64 | 39240;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r3,r26
	ctx.r3.u64 = ctx.r26.u64;
	// stwx r11,r26,r8
	PPC_STORE_U32(ctx.r26.u32 + ctx.r8.u32, ctx.r11.u32);
	// bl 0x826b34f8
	ctx.lr = 0x826B44E4;
	sub_826B34F8(ctx, base);
	// lis r7,0
	ctx.r7.s64 = 0;
	// lis r6,-32254
	ctx.r6.s64 = -2113798144;
	// ori r5,r7,39252
	ctx.r5.u64 = ctx.r7.u64 | 39252;
	// lfs f0,-12084(r6)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + -12084);
	ctx.f0.f64 = double(temp.f32);
	// stfsx f0,r26,r5
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r26.u32 + ctx.r5.u32, temp.u32);
loc_826B44F8:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// addi r12,r1,-64
	ctx.r12.s64 = ctx.r1.s64 + -64;
	// bl 0x823dba20
	ctx.lr = 0x826B4504;
	__restfpr_27(ctx, base);
	// b 0x823d923c
	__restgprlr_25(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4508"))) PPC_WEAK_FUNC(sub_826B4508);
PPC_FUNC_IMPL(__imp__sub_826B4508) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91e8
	ctx.lr = 0x826B4510;
	__savegprlr_24(ctx, base);
	// stfd f29,-96(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -96, ctx.f29.u64);
	// stfd f30,-88(r1)
	PPC_STORE_U64(ctx.r1.u32 + -88, ctx.f30.u64);
	// stfd f31,-80(r1)
	PPC_STORE_U64(ctx.r1.u32 + -80, ctx.f31.u64);
	// stwu r1,-192(r1)
	ea = -192 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r27,-32121
	ctx.r27.s64 = -2105081856;
	// li r4,0
	ctx.r4.s64 = 0;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// bl 0x822a3998
	ctx.lr = 0x826B4534;
	sub_822A3998(ctx, base);
	// lwz r10,880(r3)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// addis r29,r31,1
	ctx.r29.s64 = ctx.r31.s64 + 65536;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// addi r29,r29,-26292
	ctx.r29.s64 = ctx.r29.s64 + -26292;
	// addi r28,r11,-29280
	ctx.r28.s64 = ctx.r11.s64 + -29280;
	// li r24,0
	ctx.r24.s64 = 0;
	// lwz r9,124(r10)
	ctx.r9.u64 = PPC_LOAD_U32(ctx.r10.u32 + 124);
	// lis r11,-32131
	ctx.r11.s64 = -2105737216;
	// lis r25,-32125
	ctx.r25.s64 = -2105344000;
	// mr r30,r24
	ctx.r30.u64 = ctx.r24.u64;
	// addi r26,r11,29952
	ctx.r26.s64 = ctx.r11.s64 + 29952;
	// stw r28,144(r9)
	PPC_STORE_U32(ctx.r9.u32 + 144, ctx.r28.u32);
	// lbz r8,0(r29)
	ctx.r8.u64 = PPC_LOAD_U8(ctx.r29.u32 + 0);
	// cmplwi cr6,r8,0
	ctx.cr6.compare<uint32_t>(ctx.r8.u32, 0, ctx.xer);
	// bne cr6,0x826b45dc
	if (!ctx.cr6.eq) goto loc_826B45DC;
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// lwz r11,-29336(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29336);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826b45dc
	if (!ctx.cr6.eq) goto loc_826B45DC;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// bne cr6,0x826b45a4
	if (!ctx.cr6.eq) goto loc_826B45A4;
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// lfs f0,8(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 8);
	ctx.f0.f64 = double(temp.f32);
	// addi r11,r11,-26304
	ctx.r11.s64 = ctx.r11.s64 + -26304;
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fadds f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f0.f64));
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
loc_826B45A4:
	// addis r30,r31,1
	ctx.r30.s64 = ctx.r31.s64 + 65536;
	// addi r30,r30,-26016
	ctx.r30.s64 = ctx.r30.s64 + -26016;
	// lbz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b45d0
	if (ctx.cr6.eq) goto loc_826B45D0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b3440
	ctx.lr = 0x826B45C0;
	sub_826B3440(ctx, base);
	// clrlwi r11,r3,24
	ctx.r11.u64 = ctx.r3.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b45d0
	if (ctx.cr6.eq) goto loc_826B45D0;
	// stb r24,0(r30)
	PPC_STORE_U8(ctx.r30.u32 + 0, ctx.r24.u8);
loc_826B45D0:
	// lbz r11,0(r30)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r30.u32 + 0);
	// cntlzw r10,r11
	ctx.r10.u64 = ctx.r11.u32 == 0 ? 32 : __builtin_clz(ctx.r11.u32);
	// rlwinm r30,r10,27,31,31
	ctx.r30.u64 = __builtin_rotateleft64(ctx.r10.u32 | (ctx.r10.u64 << 32), 27) & 0x1;
loc_826B45DC:
	// li r3,0
	ctx.r3.s64 = 0;
	// bl 0x82387ba0
	ctx.lr = 0x826B45E4;
	sub_82387BA0(ctx, base);
	// lwz r11,4(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 4);
	// cmpwi cr6,r11,-1
	ctx.cr6.compare<int32_t>(ctx.r11.s32, -1, ctx.xer);
	// beq cr6,0x826b464c
	if (ctx.cr6.eq) goto loc_826B464C;
	// clrlwi r11,r30,24
	ctx.r11.u64 = ctx.r30.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b464c
	if (ctx.cr6.eq) goto loc_826B464C;
	// lwz r10,-29212(r25)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r10,3
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 3, ctx.xer);
	// beq cr6,0x826b4620
	if (ctx.cr6.eq) goto loc_826B4620;
	// cmpwi cr6,r10,9
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 9, ctx.xer);
	// ble cr6,0x826b4618
	if (!ctx.cr6.gt) goto loc_826B4618;
	// cmpwi cr6,r10,13
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 13, ctx.xer);
	// ble cr6,0x826b4620
	if (!ctx.cr6.gt) goto loc_826B4620;
loc_826B4618:
	// mr r11,r24
	ctx.r11.u64 = ctx.r24.u64;
	// b 0x826b4624
	goto loc_826B4624;
loc_826B4620:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B4624:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b4644
	if (!ctx.cr6.eq) goto loc_826B4644;
	// cmpwi cr6,r10,4
	ctx.cr6.compare<int32_t>(ctx.r10.s32, 4, ctx.xer);
	// beq cr6,0x826b4644
	if (ctx.cr6.eq) goto loc_826B4644;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b4070
	ctx.lr = 0x826B4640;
	sub_826B4070(ctx, base);
	// b 0x826b464c
	goto loc_826B464C;
loc_826B4644:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b3d08
	ctx.lr = 0x826B464C;
	sub_826B3D08(ctx, base);
loc_826B464C:
	// lbz r11,0(r29)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r29.u32 + 0);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b48d0
	if (ctx.cr6.eq) goto loc_826B48D0;
	// addis r11,r31,1
	ctx.r11.s64 = ctx.r31.s64 + 65536;
	// lfs f0,8(r26)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r26.u32 + 8);
	ctx.f0.f64 = double(temp.f32);
	// lis r10,0
	ctx.r10.s64 = 0;
	// addi r11,r11,-26300
	ctx.r11.s64 = ctx.r11.s64 + -26300;
	// ori r8,r10,39252
	ctx.r8.u64 = ctx.r10.u64 | 39252;
	// lis r9,-32256
	ctx.r9.s64 = -2113929216;
	// lfs f13,0(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f13.f64 = double(temp.f32);
	// fadds f12,f13,f0
	ctx.f12.f64 = double(float(ctx.f13.f64 + ctx.f0.f64));
	// lfsx f11,r31,r8
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	ctx.f11.f64 = double(temp.f32);
	// lfs f30,7444(r9)
	temp.u32 = PPC_LOAD_U32(ctx.r9.u32 + 7444);
	ctx.f30.f64 = double(temp.f32);
	// stfs f12,0(r11)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r11.u32 + 0, temp.u32);
	// fdivs f31,f12,f11
	ctx.f31.f64 = double(float(ctx.f12.f64 / ctx.f11.f64));
	// fcmpu cr6,f31,f30
	ctx.cr6.compare(ctx.f31.f64, ctx.f30.f64);
	// blt cr6,0x826b46b8
	if (ctx.cr6.lt) goto loc_826B46B8;
	// stb r24,0(r29)
	PPC_STORE_U8(ctx.r29.u32 + 0, ctx.r24.u8);
	// fmr f31,f30
	ctx.f31.f64 = ctx.f30.f64;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r11,21
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 21, ctx.xer);
	// bne cr6,0x826b46c4
	if (!ctx.cr6.eq) goto loc_826B46C4;
	// lwz r11,21676(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 21676);
	// cmpwi cr6,r11,2
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 2, ctx.xer);
	// bne cr6,0x826b46c4
	if (!ctx.cr6.eq) goto loc_826B46C4;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x826b46bc
	goto loc_826B46BC;
loc_826B46B8:
	// li r4,0
	ctx.r4.s64 = 0;
loc_826B46BC:
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826a50c8
	ctx.lr = 0x826B46C4;
	sub_826A50C8(ctx, base);
loc_826B46C4:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x82227ce8
	ctx.lr = 0x826B46CC;
	sub_82227CE8(ctx, base);
	// lis r11,-32111
	ctx.r11.s64 = -2104426496;
	// fsubs f0,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r10,0
	ctx.r10.s64 = 0;
	// lwz r3,17268(r27)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r27.u32 + 17268);
	// addi r9,r11,-29216
	ctx.r9.s64 = ctx.r11.s64 + -29216;
	// ori r8,r10,39328
	ctx.r8.u64 = ctx.r10.u64 | 39328;
	// lis r7,-32256
	ctx.r7.s64 = -2113929216;
	// addi r6,r1,80
	ctx.r6.s64 = ctx.r1.s64 + 80;
	// li r5,48
	ctx.r5.s64 = 48;
	// lvx128 v0,r0,r9
	_mm_store_si128((__m128i*)ctx.v0.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r4,0
	ctx.r4.s64 = 0;
	// lvx128 v63,r31,r8
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r31.u32 + ctx.r8.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// vsubfp128 v13,v63,v0
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v13.f32, _mm_sub_ps(_mm_load_ps(ctx.v63.f32), _mm_load_ps(ctx.v0.f32)));
	// lfs f29,14884(r7)
	ctx.fpscr.disableFlushModeUnconditional();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 14884);
	ctx.f29.f64 = double(temp.f32);
	// fmuls f13,f0,f29
	ctx.f13.f64 = double(float(ctx.f0.f64 * ctx.f29.f64));
	// stfs f13,80(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// lvlx128 v62,r0,r6
	temp.u32 = ctx.r6.u32;
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + (temp.u32 & ~0xF))), _mm_load_si128((__m128i*)&VectorMaskL[(temp.u32 & 0xF) * 16])));
	// vspltw128 v12,v62,0
	_mm_store_si128((__m128i*)ctx.v12.u32, _mm_shuffle_epi32(_mm_load_si128((__m128i*)ctx.v62.u32), 0xFF));
	// vmaddfp v0,v13,v12,v0
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v0.f32, _mm_add_ps(_mm_mul_ps(_mm_load_ps(ctx.v13.f32), _mm_load_ps(ctx.v12.f32)), _mm_load_ps(ctx.v0.f32)));
	// stvx128 v0,r28,r5
	_mm_store_si128((__m128i*)(base + ((ctx.r28.u32 + ctx.r5.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v0.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x822a3998
	ctx.lr = 0x826B4720;
	sub_822A3998(ctx, base);
	// lwz r4,880(r3)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r3.u32 + 880);
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// lwz r30,124(r4)
	ctx.r30.u64 = PPC_LOAD_U32(ctx.r4.u32 + 124);
	// bl 0x82227ce8
	ctx.lr = 0x826B4730;
	sub_82227CE8(ctx, base);
	// fsubs f12,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f12.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r3,0
	ctx.r3.s64 = 0;
	// lis r11,0
	ctx.r11.s64 = 0;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// ori r10,r3,39268
	ctx.r10.u64 = ctx.r3.u64 | 39268;
	// ori r9,r11,39292
	ctx.r9.u64 = ctx.r11.u64 | 39292;
	// lfsx f11,r31,r10
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	ctx.f11.f64 = double(temp.f32);
	// lfsx f10,r31,r9
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	ctx.f10.f64 = double(temp.f32);
	// fsubs f9,f10,f11
	ctx.f9.f64 = double(float(ctx.f10.f64 - ctx.f11.f64));
	// fmuls f8,f12,f29
	ctx.f8.f64 = double(float(ctx.f12.f64 * ctx.f29.f64));
	// fmadds f7,f9,f8,f11
	ctx.f7.f64 = double(float(ctx.f9.f64 * ctx.f8.f64 + ctx.f11.f64));
	// stfs f7,192(r30)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r30.u32 + 192, temp.u32);
	// bl 0x82227ce8
	ctx.lr = 0x826B4764;
	sub_82227CE8(ctx, base);
	// fsubs f6,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f6.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r8,0
	ctx.r8.s64 = 0;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lis r7,0
	ctx.r7.s64 = 0;
	// ori r6,r8,39272
	ctx.r6.u64 = ctx.r8.u64 | 39272;
	// ori r5,r7,39296
	ctx.r5.u64 = ctx.r7.u64 | 39296;
	// lfsx f5,r31,r6
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r6.u32);
	ctx.f5.f64 = double(temp.f32);
	// lfsx f4,r31,r5
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r5.u32);
	ctx.f4.f64 = double(temp.f32);
	// fsubs f3,f4,f5
	ctx.f3.f64 = double(float(ctx.f4.f64 - ctx.f5.f64));
	// fmuls f2,f6,f29
	ctx.f2.f64 = double(float(ctx.f6.f64 * ctx.f29.f64));
	// fmadds f0,f3,f2,f5
	ctx.f0.f64 = double(float(ctx.f3.f64 * ctx.f2.f64 + ctx.f5.f64));
	// stfs f0,196(r30)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r30.u32 + 196, temp.u32);
	// bl 0x82227ce8
	ctx.lr = 0x826B4798;
	sub_82227CE8(ctx, base);
	// fsubs f13,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f13.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r4,0
	ctx.r4.s64 = 0;
	// lis r3,0
	ctx.r3.s64 = 0;
	// ori r11,r4,39276
	ctx.r11.u64 = ctx.r4.u64 | 39276;
	// ori r10,r3,39300
	ctx.r10.u64 = ctx.r3.u64 | 39300;
	// lfsx f12,r31,r11
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r11.u32);
	ctx.f12.f64 = double(temp.f32);
	// lfsx f11,r31,r10
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	ctx.f11.f64 = double(temp.f32);
	// fsubs f10,f11,f12
	ctx.f10.f64 = double(float(ctx.f11.f64 - ctx.f12.f64));
	// fmuls f9,f13,f29
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f29.f64));
	// fmadds f8,f10,f9,f12
	ctx.f8.f64 = double(float(ctx.f10.f64 * ctx.f9.f64 + ctx.f12.f64));
	// stfs f8,200(r30)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r30.u32 + 200, temp.u32);
	// lbz r9,0(r29)
	ctx.r9.u64 = PPC_LOAD_U8(ctx.r29.u32 + 0);
	// cmplwi cr6,r9,0
	ctx.cr6.compare<uint32_t>(ctx.r9.u32, 0, ctx.xer);
	// bne cr6,0x826b4834
	if (!ctx.cr6.eq) goto loc_826B4834;
	// lwz r11,-29212(r25)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r25.u32 + -29212);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x826b47f4
	if (ctx.cr6.eq) goto loc_826B47F4;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// ble cr6,0x826b47ec
	if (!ctx.cr6.gt) goto loc_826B47EC;
	// cmpwi cr6,r11,13
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 13, ctx.xer);
	// ble cr6,0x826b47f4
	if (!ctx.cr6.gt) goto loc_826B47F4;
loc_826B47EC:
	// mr r10,r24
	ctx.r10.u64 = ctx.r24.u64;
	// b 0x826b47f8
	goto loc_826B47F8;
loc_826B47F4:
	// li r10,1
	ctx.r10.s64 = 1;
loc_826B47F8:
	// clrlwi r10,r10,24
	ctx.r10.u64 = ctx.r10.u32 & 0xFF;
	// cmplwi cr6,r10,0
	ctx.cr6.compare<uint32_t>(ctx.r10.u32, 0, ctx.xer);
	// bne cr6,0x826b4834
	if (!ctx.cr6.eq) goto loc_826B4834;
	// cmpwi cr6,r11,4
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 4, ctx.xer);
	// beq cr6,0x826b4834
	if (ctx.cr6.eq) goto loc_826B4834;
	// cmpwi cr6,r11,0
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 0, ctx.xer);
	// beq cr6,0x826b4834
	if (ctx.cr6.eq) goto loc_826B4834;
	// rlwinm r10,r11,1,0,30
	ctx.r10.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 1) & 0xFFFFFFFE;
	// lis r9,0
	ctx.r9.s64 = 0;
	// add r8,r11,r10
	ctx.r8.u64 = ctx.r11.u64 + ctx.r10.u64;
	// ori r7,r9,39588
	ctx.r7.u64 = ctx.r9.u64 | 39588;
	// rlwinm r11,r8,4,0,27
	ctx.r11.u64 = __builtin_rotateleft64(ctx.r8.u32 | (ctx.r8.u64 << 32), 4) & 0xFFFFFFF0;
	// add r6,r11,r31
	ctx.r6.u64 = ctx.r11.u64 + ctx.r31.u64;
	// lfsx f0,r6,r7
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r6.u32 + ctx.r7.u32);
	ctx.f0.f64 = double(temp.f32);
	// stfs f0,200(r30)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r30.u32 + 200, temp.u32);
loc_826B4834:
	// fmr f1,f31
	ctx.fpscr.disableFlushMode();
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x82227ce8
	ctx.lr = 0x826B483C;
	sub_82227CE8(ctx, base);
	// fsubs f0,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r11,0
	ctx.r11.s64 = 0;
	// lis r10,0
	ctx.r10.s64 = 0;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// ori r9,r11,39280
	ctx.r9.u64 = ctx.r11.u64 | 39280;
	// ori r8,r10,39304
	ctx.r8.u64 = ctx.r10.u64 | 39304;
	// lfsx f13,r31,r9
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	ctx.f13.f64 = double(temp.f32);
	// lfsx f12,r31,r8
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r8.u32);
	ctx.f12.f64 = double(temp.f32);
	// fsubs f11,f12,f13
	ctx.f11.f64 = double(float(ctx.f12.f64 - ctx.f13.f64));
	// fmuls f10,f0,f29
	ctx.f10.f64 = double(float(ctx.f0.f64 * ctx.f29.f64));
	// fmadds f9,f11,f10,f13
	ctx.f9.f64 = double(float(ctx.f11.f64 * ctx.f10.f64 + ctx.f13.f64));
	// stfs f9,204(r30)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r30.u32 + 204, temp.u32);
	// bl 0x82227ce8
	ctx.lr = 0x826B4870;
	sub_82227CE8(ctx, base);
	// fsubs f8,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f8.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r7,0
	ctx.r7.s64 = 0;
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// lis r6,0
	ctx.r6.s64 = 0;
	// ori r5,r7,39284
	ctx.r5.u64 = ctx.r7.u64 | 39284;
	// ori r4,r6,39308
	ctx.r4.u64 = ctx.r6.u64 | 39308;
	// lfsx f7,r31,r5
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r5.u32);
	ctx.f7.f64 = double(temp.f32);
	// lfsx f6,r31,r4
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r4.u32);
	ctx.f6.f64 = double(temp.f32);
	// fsubs f5,f6,f7
	ctx.f5.f64 = double(float(ctx.f6.f64 - ctx.f7.f64));
	// fmuls f4,f8,f29
	ctx.f4.f64 = double(float(ctx.f8.f64 * ctx.f29.f64));
	// fmadds f3,f5,f4,f7
	ctx.f3.f64 = double(float(ctx.f5.f64 * ctx.f4.f64 + ctx.f7.f64));
	// stfs f3,208(r30)
	temp.f32 = float(ctx.f3.f64);
	PPC_STORE_U32(ctx.r30.u32 + 208, temp.u32);
	// bl 0x82227ce8
	ctx.lr = 0x826B48A4;
	sub_82227CE8(ctx, base);
	// fsubs f2,f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f2.f64 = double(float(ctx.f30.f64 - ctx.f1.f64));
	// lis r3,0
	ctx.r3.s64 = 0;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r3,39288
	ctx.r10.u64 = ctx.r3.u64 | 39288;
	// ori r9,r11,39312
	ctx.r9.u64 = ctx.r11.u64 | 39312;
	// lfsx f1,r31,r10
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	ctx.f1.f64 = double(temp.f32);
	// lfsx f0,r31,r9
	temp.u32 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r9.u32);
	ctx.f0.f64 = double(temp.f32);
	// fsubs f13,f0,f1
	ctx.f13.f64 = double(float(ctx.f0.f64 - ctx.f1.f64));
	// fmuls f12,f2,f29
	ctx.f12.f64 = double(float(ctx.f2.f64 * ctx.f29.f64));
	// fmadds f11,f13,f12,f1
	ctx.f11.f64 = double(float(ctx.f13.f64 * ctx.f12.f64 + ctx.f1.f64));
	// stfs f11,168(r30)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r30.u32 + 168, temp.u32);
loc_826B48D0:
	// addi r1,r1,192
	ctx.r1.s64 = ctx.r1.s64 + 192;
	// lfd f29,-96(r1)
	ctx.fpscr.disableFlushMode();
	ctx.f29.u64 = PPC_LOAD_U64(ctx.r1.u32 + -96);
	// lfd f30,-88(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -88);
	// lfd f31,-80(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -80);
	// b 0x823d9238
	__restgprlr_24(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B48E4"))) PPC_WEAK_FUNC(sub_826B48E4);
PPC_FUNC_IMPL(__imp__sub_826B48E4) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B48E8"))) PPC_WEAK_FUNC(sub_826B48E8);
PPC_FUNC_IMPL(__imp__sub_826B48E8) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B48F0"))) PPC_WEAK_FUNC(sub_826B48F0);
PPC_FUNC_IMPL(__imp__sub_826B48F0) {
	PPC_FUNC_PROLOGUE();
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39524
	ctx.r10.u64 = ctx.r11.u64 | 39524;
	// lwzx r11,r3,r10
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + ctx.r10.u32);
	// addi r11,r11,-1
	ctx.r11.s64 = ctx.r11.s64 + -1;
	// cmplwi cr6,r11,47
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 47, ctx.xer);
	// bgtlr cr6
	if (ctx.cr6.gt) return;
	// lis r12,-32149
	ctx.r12.s64 = -2106916864;
	// addi r12,r12,18720
	ctx.r12.s64 = ctx.r12.s64 + 18720;
	// rlwinm r0,r11,2,0,29
	ctx.r0.u64 = __builtin_rotateleft64(ctx.r11.u32 | (ctx.r11.u64 << 32), 2) & 0xFFFFFFFC;
	// lwzx r0,r12,r0
	ctx.r0.u64 = PPC_LOAD_U32(ctx.r12.u32 + ctx.r0.u32);
	// mtctr r0
	ctx.ctr.u64 = ctx.r0.u64;
	// bctr 
	switch (ctx.r11.u64) {
	case 0:
		// ERROR: 0x826B49EC
		return;
	case 1:
		// ERROR: 0x826B49F8
		return;
	case 2:
		// ERROR: 0x826B4A04
		return;
	case 3:
		// ERROR: 0x826B4A58
		return;
	case 4:
		// ERROR: 0x826B4A10
		return;
	case 5:
		// ERROR: 0x826B4A1C
		return;
	case 6:
		// ERROR: 0x826B4A04
		return;
	case 7:
		// ERROR: 0x826B49F8
		return;
	case 8:
		// ERROR: 0x826B4A04
		return;
	case 9:
		// ERROR: 0x826B4A58
		return;
	case 10:
		// ERROR: 0x826B49EC
		return;
	case 11:
		// ERROR: 0x826B4A04
		return;
	case 12:
		// ERROR: 0x826B4A1C
		return;
	case 13:
		// ERROR: 0x826B4A10
		return;
	case 14:
		// ERROR: 0x826B4A04
		return;
	case 15:
		// ERROR: 0x826B4A10
		return;
	case 16:
		// ERROR: 0x826B4A10
		return;
	case 17:
		// ERROR: 0x826B49E0
		return;
	case 18:
		// ERROR: 0x826B4A58
		return;
	case 19:
		// ERROR: 0x826B4A58
		return;
	case 20:
		// ERROR: 0x826B4A58
		return;
	case 21:
		// ERROR: 0x826B4A58
		return;
	case 22:
		// ERROR: 0x826B4A58
		return;
	case 23:
		// ERROR: 0x826B4A28
		return;
	case 24:
		// ERROR: 0x826B4A34
		return;
	case 25:
		// ERROR: 0x826B4A34
		return;
	case 26:
		// ERROR: 0x826B4A34
		return;
	case 27:
		// ERROR: 0x826B4A40
		return;
	case 28:
		// ERROR: 0x826B4A4C
		return;
	case 29:
		// ERROR: 0x826B4A58
		return;
	case 30:
		// ERROR: 0x826B4A58
		return;
	case 31:
		// ERROR: 0x826B4A58
		return;
	case 32:
		// ERROR: 0x826B4A58
		return;
	case 33:
		// ERROR: 0x826B49F8
		return;
	case 34:
		// ERROR: 0x826B4A58
		return;
	case 35:
		// ERROR: 0x826B4A58
		return;
	case 36:
		// ERROR: 0x826B4A58
		return;
	case 37:
		// ERROR: 0x826B4A58
		return;
	case 38:
		// ERROR: 0x826B4A58
		return;
	case 39:
		// ERROR: 0x826B4A58
		return;
	case 40:
		// ERROR: 0x826B4A58
		return;
	case 41:
		// ERROR: 0x826B4A58
		return;
	case 42:
		// ERROR: 0x826B4A58
		return;
	case 43:
		// ERROR: 0x826B4A58
		return;
	case 44:
		// ERROR: 0x826B4A58
		return;
	case 45:
		// ERROR: 0x826B4A58
		return;
	case 46:
		// ERROR: 0x826B4A10
		return;
	case 47:
		// ERROR: 0x826B49F8
		return;
	default:
		__builtin_unreachable();
	}
}

__attribute__((alias("__imp__sub_826B4920"))) PPC_WEAK_FUNC(sub_826B4920);
PPC_FUNC_IMPL(__imp__sub_826B4920) {
	PPC_FUNC_PROLOGUE();
	// lwz r19,18924(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18924);
	// lwz r19,18936(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18936);
	// lwz r19,18948(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18948);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,18960(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18960);
	// lwz r19,18972(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18972);
	// lwz r19,18948(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18948);
	// lwz r19,18936(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18936);
	// lwz r19,18948(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18948);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,18924(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18924);
	// lwz r19,18948(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18948);
	// lwz r19,18972(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18972);
	// lwz r19,18960(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18960);
	// lwz r19,18948(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18948);
	// lwz r19,18960(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18960);
	// lwz r19,18960(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18960);
	// lwz r19,18912(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18912);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,18984(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18984);
	// lwz r19,18996(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18996);
	// lwz r19,18996(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18996);
	// lwz r19,18996(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18996);
	// lwz r19,19008(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19008);
	// lwz r19,19020(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19020);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,18936(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18936);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,19032(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 19032);
	// lwz r19,18960(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18960);
	// lwz r19,18936(r11)
	ctx.r19.u64 = PPC_LOAD_U32(ctx.r11.u32 + 18936);
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,23
	ctx.r4.s64 = 23;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B49EC"))) PPC_WEAK_FUNC(sub_826B49EC);
PPC_FUNC_IMPL(__imp__sub_826B49EC) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,7
	ctx.r4.s64 = 7;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B49F8"))) PPC_WEAK_FUNC(sub_826B49F8);
PPC_FUNC_IMPL(__imp__sub_826B49F8) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,2
	ctx.r4.s64 = 2;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A04"))) PPC_WEAK_FUNC(sub_826B4A04);
PPC_FUNC_IMPL(__imp__sub_826B4A04) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,6
	ctx.r4.s64 = 6;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A10"))) PPC_WEAK_FUNC(sub_826B4A10);
PPC_FUNC_IMPL(__imp__sub_826B4A10) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,8
	ctx.r4.s64 = 8;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A1C"))) PPC_WEAK_FUNC(sub_826B4A1C);
PPC_FUNC_IMPL(__imp__sub_826B4A1C) {
	PPC_FUNC_PROLOGUE();
	// li r5,1
	ctx.r5.s64 = 1;
	// li r4,1
	ctx.r4.s64 = 1;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A28"))) PPC_WEAK_FUNC(sub_826B4A28);
PPC_FUNC_IMPL(__imp__sub_826B4A28) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,10
	ctx.r4.s64 = 10;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A34"))) PPC_WEAK_FUNC(sub_826B4A34);
PPC_FUNC_IMPL(__imp__sub_826B4A34) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,11
	ctx.r4.s64 = 11;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A40"))) PPC_WEAK_FUNC(sub_826B4A40);
PPC_FUNC_IMPL(__imp__sub_826B4A40) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,12
	ctx.r4.s64 = 12;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A4C"))) PPC_WEAK_FUNC(sub_826B4A4C);
PPC_FUNC_IMPL(__imp__sub_826B4A4C) {
	PPC_FUNC_PROLOGUE();
	// li r5,0
	ctx.r5.s64 = 0;
	// li r4,13
	ctx.r4.s64 = 13;
	// b 0x826b34f8
	sub_826B34F8(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B4A58"))) PPC_WEAK_FUNC(sub_826B4A58);
PPC_FUNC_IMPL(__imp__sub_826B4A58) {
	PPC_FUNC_PROLOGUE();
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4A5C"))) PPC_WEAK_FUNC(sub_826B4A5C);
PPC_FUNC_IMPL(__imp__sub_826B4A5C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B4A60"))) PPC_WEAK_FUNC(sub_826B4A60);
PPC_FUNC_IMPL(__imp__sub_826B4A60) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// bl 0x8269a1a8
	ctx.lr = 0x826B4A78;
	sub_8269A1A8(ctx, base);
	// lbz r11,16(r3)
	ctx.r11.u64 = PPC_LOAD_U8(ctx.r3.u32 + 16);
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b4b04
	if (!ctx.cr6.eq) goto loc_826B4B04;
	// lis r11,0
	ctx.r11.s64 = 0;
	// ori r10,r11,39240
	ctx.r10.u64 = ctx.r11.u64 | 39240;
	// lwzx r4,r31,r10
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r31.u32 + ctx.r10.u32);
	// cmpwi cr6,r4,3
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 3, ctx.xer);
	// beq cr6,0x826b4ab0
	if (ctx.cr6.eq) goto loc_826B4AB0;
	// cmpwi cr6,r4,9
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 9, ctx.xer);
	// ble cr6,0x826b4aa8
	if (!ctx.cr6.gt) goto loc_826B4AA8;
	// cmpwi cr6,r4,13
	ctx.cr6.compare<int32_t>(ctx.r4.s32, 13, ctx.xer);
	// ble cr6,0x826b4ab0
	if (!ctx.cr6.gt) goto loc_826B4AB0;
loc_826B4AA8:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b4ab4
	goto loc_826B4AB4;
loc_826B4AB0:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B4AB4:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// beq cr6,0x826b4af8
	if (ctx.cr6.eq) goto loc_826B4AF8;
	// lis r11,-32125
	ctx.r11.s64 = -2105344000;
	// lwz r11,-29212(r11)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r11.u32 + -29212);
	// cmpwi cr6,r11,3
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 3, ctx.xer);
	// beq cr6,0x826b4ae8
	if (ctx.cr6.eq) goto loc_826B4AE8;
	// cmpwi cr6,r11,9
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 9, ctx.xer);
	// ble cr6,0x826b4ae0
	if (!ctx.cr6.gt) goto loc_826B4AE0;
	// cmpwi cr6,r11,13
	ctx.cr6.compare<int32_t>(ctx.r11.s32, 13, ctx.xer);
	// ble cr6,0x826b4ae8
	if (!ctx.cr6.gt) goto loc_826B4AE8;
loc_826B4AE0:
	// li r11,0
	ctx.r11.s64 = 0;
	// b 0x826b4aec
	goto loc_826B4AEC;
loc_826B4AE8:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B4AEC:
	// clrlwi r11,r11,24
	ctx.r11.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r11,0
	ctx.cr6.compare<uint32_t>(ctx.r11.u32, 0, ctx.xer);
	// bne cr6,0x826b4b04
	if (!ctx.cr6.eq) goto loc_826B4B04;
loc_826B4AF8:
	// li r5,0
	ctx.r5.s64 = 0;
	// mr r3,r31
	ctx.r3.u64 = ctx.r31.u64;
	// bl 0x826b34f8
	ctx.lr = 0x826B4B04;
	sub_826B34F8(ctx, base);
loc_826B4B04:
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4B18"))) PPC_WEAK_FUNC(sub_826B4B18);
PPC_FUNC_IMPL(__imp__sub_826B4B18) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// lvx128 v63,r0,r4
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r4.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r10,r1,96
	ctx.r10.s64 = ctx.r1.s64 + 96;
	// lvx128 v62,r0,r3
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r3.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// addi r9,r1,96
	ctx.r9.s64 = ctx.r1.s64 + 96;
	// lvx128 v61,r0,r5
	_mm_store_si128((__m128i*)ctx.v61.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r5.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f0,12(r3)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r3.u32 + 12);
	ctx.f0.f64 = double(temp.f32);
	// vaddfp128 v60,v63,v61
	ctx.fpscr.enableFlushModeUnconditional();
	_mm_store_ps(ctx.v60.f32, _mm_add_ps(_mm_load_ps(ctx.v63.f32), _mm_load_ps(ctx.v61.f32)));
	// fmuls f13,f0,f0
	ctx.fpscr.disableFlushModeUnconditional();
	ctx.f13.f64 = double(float(ctx.f0.f64 * ctx.f0.f64));
	// stvx128 v63,r0,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f8,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f8.f64 = double(temp.f32);
	// lfs f12,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f12.f64 = double(temp.f32);
	// lfs f10,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f10.f64 = double(temp.f32);
	// stvx128 v62,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f7,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f7.f64 = double(temp.f32);
	// lfs f11,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f11.f64 = double(temp.f32);
	// lfs f9,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f9.f64 = double(temp.f32);
	// stvx128 v60,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v60.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// fsubs f6,f8,f7
	ctx.f6.f64 = double(float(ctx.f8.f64 - ctx.f7.f64));
	// fsubs f5,f12,f11
	ctx.f5.f64 = double(float(ctx.f12.f64 - ctx.f11.f64));
	// fsubs f3,f10,f9
	ctx.f3.f64 = double(float(ctx.f10.f64 - ctx.f9.f64));
	// fmuls f4,f6,f6
	ctx.f4.f64 = double(float(ctx.f6.f64 * ctx.f6.f64));
	// fmadds f2,f5,f5,f4
	ctx.f2.f64 = double(float(ctx.f5.f64 * ctx.f5.f64 + ctx.f4.f64));
	// fmadds f1,f3,f3,f2
	ctx.f1.f64 = double(float(ctx.f3.f64 * ctx.f3.f64 + ctx.f2.f64));
	// fcmpu cr6,f1,f13
	ctx.cr6.compare(ctx.f1.f64, ctx.f13.f64);
	// blt cr6,0x826b4bd4
	if (ctx.cr6.lt) goto loc_826B4BD4;
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// lfs f13,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f12.f64 = double(temp.f32);
	// fmuls f11,f0,f0
	ctx.f11.f64 = double(float(ctx.f0.f64 * ctx.f0.f64));
	// lfs f10,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f10.f64 = double(temp.f32);
	// stvx128 v62,r0,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// li r11,0
	ctx.r11.s64 = 0;
	// lfs f9,104(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 104);
	ctx.f9.f64 = double(temp.f32);
	// lfs f8,100(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 100);
	ctx.f8.f64 = double(temp.f32);
	// lfs f7,96(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 96);
	ctx.f7.f64 = double(temp.f32);
	// fsubs f6,f13,f7
	ctx.f6.f64 = double(float(ctx.f13.f64 - ctx.f7.f64));
	// fsubs f5,f12,f9
	ctx.f5.f64 = double(float(ctx.f12.f64 - ctx.f9.f64));
	// fmuls f4,f6,f6
	ctx.f4.f64 = double(float(ctx.f6.f64 * ctx.f6.f64));
	// fsubs f3,f10,f8
	ctx.f3.f64 = double(float(ctx.f10.f64 - ctx.f8.f64));
	// fmadds f2,f5,f5,f4
	ctx.f2.f64 = double(float(ctx.f5.f64 * ctx.f5.f64 + ctx.f4.f64));
	// fmadds f1,f3,f3,f2
	ctx.f1.f64 = double(float(ctx.f3.f64 * ctx.f3.f64 + ctx.f2.f64));
	// fcmpu cr6,f1,f11
	ctx.cr6.compare(ctx.f1.f64, ctx.f11.f64);
	// bge cr6,0x826b4bd8
	if (!ctx.cr6.lt) goto loc_826B4BD8;
loc_826B4BD4:
	// li r11,1
	ctx.r11.s64 = 1;
loc_826B4BD8:
	// clrlwi r3,r11,24
	ctx.r3.u64 = ctx.r11.u32 & 0xFF;
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// bne cr6,0x826b4c20
	if (!ctx.cr6.eq) goto loc_826B4C20;
	// vsubfp128 v59,v63,v62
	ctx.fpscr.enableFlushMode();
	_mm_store_ps(ctx.v59.f32, _mm_sub_ps(_mm_load_ps(ctx.v63.f32), _mm_load_ps(ctx.v62.f32)));
	// addi r11,r1,96
	ctx.r11.s64 = ctx.r1.s64 + 96;
	// li r8,0
	ctx.r8.s64 = 0;
	// fmuls f1,f0,f0
	ctx.fpscr.disableFlushModeUnconditional();
	ctx.f1.f64 = double(float(ctx.f0.f64 * ctx.f0.f64));
	// li r7,0
	ctx.r7.s64 = 0;
	// li r6,0
	ctx.r6.s64 = 0;
	// mr r4,r5
	ctx.r4.u64 = ctx.r5.u64;
	// addi r3,r1,96
	ctx.r3.s64 = ctx.r1.s64 + 96;
	// stvx128 v59,r0,r11
	_mm_store_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v59.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x8261c9b8
	ctx.lr = 0x826B4C0C;
	sub_8261C9B8(ctx, base);
	// cmpwi cr6,r3,0
	ctx.cr6.compare<int32_t>(ctx.r3.s32, 0, ctx.xer);
	// li r11,1
	ctx.r11.s64 = 1;
	// bgt cr6,0x826b4c1c
	if (ctx.cr6.gt) goto loc_826B4C1C;
	// li r11,0
	ctx.r11.s64 = 0;
loc_826B4C1C:
	// clrlwi r3,r11,24
	ctx.r3.u64 = ctx.r11.u32 & 0xFF;
loc_826B4C20:
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4C30"))) PPC_WEAK_FUNC(sub_826B4C30);
PPC_FUNC_IMPL(__imp__sub_826B4C30) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f13,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// stfs f13,84(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f12,88(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lvx128 v63,r0,r11
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x823dbae8
	ctx.lr = 0x826B4C7C;
	sub_823DBAE8(ctx, base);
	// frsp f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = double(float(ctx.f1.f64));
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x823dbbc8
	ctx.lr = 0x826B4C88;
	sub_823DBBC8(ctx, base);
	// lfs f0,84(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f0.f64 = double(temp.f32);
	// frsp f11,f1
	ctx.f11.f64 = double(float(ctx.f1.f64));
	// lfs f13,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f10,f0,f30
	ctx.f10.f64 = double(float(ctx.f0.f64 * ctx.f30.f64));
	// fmuls f9,f13,f30
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f30.f64));
	// lfs f8,80(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,0(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 0, temp.u32);
	// fmadds f7,f13,f11,f10
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f11.f64 + ctx.f10.f64));
	// stfs f7,8(r31)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r31.u32 + 8, temp.u32);
	// fmsubs f6,f0,f11,f9
	ctx.f6.f64 = double(float(ctx.f0.f64 * ctx.f11.f64 - ctx.f9.f64));
	// stfs f6,4(r31)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f30,-32(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4CD0"))) PPC_WEAK_FUNC(sub_826B4CD0);
PPC_FUNC_IMPL(__imp__sub_826B4CD0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f13,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// stfs f13,84(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f12,88(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lvx128 v63,r0,r11
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x823dbae8
	ctx.lr = 0x826B4D1C;
	sub_823DBAE8(ctx, base);
	// frsp f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = double(float(ctx.f1.f64));
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x823dbbc8
	ctx.lr = 0x826B4D28;
	sub_823DBBC8(ctx, base);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
	// frsp f11,f1
	ctx.f11.f64 = double(float(ctx.f1.f64));
	// lfs f13,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f10,f0,f30
	ctx.f10.f64 = double(float(ctx.f0.f64 * ctx.f30.f64));
	// fmuls f9,f13,f30
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f30.f64));
	// lfs f8,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,4(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4, temp.u32);
	// fmsubs f7,f13,f11,f10
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f11.f64 - ctx.f10.f64));
	// stfs f7,8(r31)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r31.u32 + 8, temp.u32);
	// fmadds f6,f0,f11,f9
	ctx.f6.f64 = double(float(ctx.f0.f64 * ctx.f11.f64 + ctx.f9.f64));
	// stfs f6,0(r31)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r31.u32 + 0, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f30,-32(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4D70"))) PPC_WEAK_FUNC(sub_826B4D70);
PPC_FUNC_IMPL(__imp__sub_826B4D70) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stfd f30,-32(r1)
	ctx.fpscr.disableFlushMode();
	PPC_STORE_U64(ctx.r1.u32 + -32, ctx.f30.u64);
	// stfd f31,-24(r1)
	PPC_STORE_U64(ctx.r1.u32 + -24, ctx.f31.u64);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// addi r11,r1,80
	ctx.r11.s64 = ctx.r1.s64 + 80;
	// lfs f0,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// lfs f13,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// fmr f31,f1
	ctx.f31.f64 = ctx.f1.f64;
	// stfs f13,84(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f12,88(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lvx128 v63,r0,r11
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r11.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r10
	_mm_store_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x823dbae8
	ctx.lr = 0x826B4DBC;
	sub_823DBAE8(ctx, base);
	// frsp f30,f1
	ctx.fpscr.disableFlushMode();
	ctx.f30.f64 = double(float(ctx.f1.f64));
	// fmr f1,f31
	ctx.f1.f64 = ctx.f31.f64;
	// bl 0x823dbbc8
	ctx.lr = 0x826B4DC8;
	sub_823DBBC8(ctx, base);
	// lfs f0,80(r1)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 80);
	ctx.f0.f64 = double(temp.f32);
	// frsp f11,f1
	ctx.f11.f64 = double(float(ctx.f1.f64));
	// lfs f13,84(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 84);
	ctx.f13.f64 = double(temp.f32);
	// fmuls f10,f0,f30
	ctx.f10.f64 = double(float(ctx.f0.f64 * ctx.f30.f64));
	// fmuls f9,f13,f30
	ctx.f9.f64 = double(float(ctx.f13.f64 * ctx.f30.f64));
	// lfs f8,88(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + 88);
	ctx.f8.f64 = double(temp.f32);
	// stfs f8,8(r31)
	temp.f32 = float(ctx.f8.f64);
	PPC_STORE_U32(ctx.r31.u32 + 8, temp.u32);
	// fmadds f7,f13,f11,f10
	ctx.f7.f64 = double(float(ctx.f13.f64 * ctx.f11.f64 + ctx.f10.f64));
	// stfs f7,4(r31)
	temp.f32 = float(ctx.f7.f64);
	PPC_STORE_U32(ctx.r31.u32 + 4, temp.u32);
	// fmsubs f6,f0,f11,f9
	ctx.f6.f64 = double(float(ctx.f0.f64 * ctx.f11.f64 - ctx.f9.f64));
	// stfs f6,0(r31)
	temp.f32 = float(ctx.f6.f64);
	PPC_STORE_U32(ctx.r31.u32 + 0, temp.u32);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// lfd f30,-32(r1)
	ctx.f30.u64 = PPC_LOAD_U64(ctx.r1.u32 + -32);
	// lfd f31,-24(r1)
	ctx.f31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -24);
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4E10"))) PPC_WEAK_FUNC(sub_826B4E10);
PPC_FUNC_IMPL(__imp__sub_826B4E10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823dbbc8
	ctx.lr = 0x826B4E30;
	sub_823DBBC8(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,0(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4E50"))) PPC_WEAK_FUNC(sub_826B4E50);
PPC_FUNC_IMPL(__imp__sub_826B4E50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823dbae8
	ctx.lr = 0x826B4E70;
	sub_823DBAE8(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,0(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4E90"))) PPC_WEAK_FUNC(sub_826B4E90);
PPC_FUNC_IMPL(__imp__sub_826B4E90) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823dbf10
	ctx.lr = 0x826B4EB0;
	sub_823DBF10(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,0(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4ED0"))) PPC_WEAK_FUNC(sub_826B4ED0);
PPC_FUNC_IMPL(__imp__sub_826B4ED0) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823dcb30
	ctx.lr = 0x826B4EF0;
	sub_823DCB30(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,0(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4F10"))) PPC_WEAK_FUNC(sub_826B4F10);
PPC_FUNC_IMPL(__imp__sub_826B4F10) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// bl 0x823dca68
	ctx.lr = 0x826B4F30;
	sub_823DCA68(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,0(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4F50"))) PPC_WEAK_FUNC(sub_826B4F50);
PPC_FUNC_IMPL(__imp__sub_826B4F50) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// std r31,-16(r1)
	PPC_STORE_U64(ctx.r1.u32 + -16, ctx.r31.u64);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// lwz r11,8(r31)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r31.u32 + 8);
	// lfs f1,0(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	ctx.f1.f64 = double(temp.f32);
	// lfs f2,4(r11)
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	ctx.f2.f64 = double(temp.f32);
	// bl 0x823dcdd8
	ctx.lr = 0x826B4F74;
	sub_823DCDD8(ctx, base);
	// lwz r10,0(r31)
	ctx.r10.u64 = PPC_LOAD_U32(ctx.r31.u32 + 0);
	// frsp f0,f1
	ctx.fpscr.disableFlushMode();
	ctx.f0.f64 = double(float(ctx.f1.f64));
	// stfs f0,0(r10)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r10.u32 + 0, temp.u32);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// ld r31,-16(r1)
	ctx.r31.u64 = PPC_LOAD_U64(ctx.r1.u32 + -16);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4F94"))) PPC_WEAK_FUNC(sub_826B4F94);
PPC_FUNC_IMPL(__imp__sub_826B4F94) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B4F98"))) PPC_WEAK_FUNC(sub_826B4F98);
PPC_FUNC_IMPL(__imp__sub_826B4F98) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-112(r1)
	ea = -112 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// addi r10,r1,80
	ctx.r10.s64 = ctx.r1.s64 + 80;
	// addi r9,r1,80
	ctx.r9.s64 = ctx.r1.s64 + 80;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// li r5,1
	ctx.r5.s64 = 1;
	// addi r4,r8,-20448
	ctx.r4.s64 = ctx.r8.s64 + -20448;
	// lwz r7,0(r11)
	ctx.r7.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// addi r3,r1,80
	ctx.r3.s64 = ctx.r1.s64 + 80;
	// lfs f0,0(r7)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,4(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r7)
	temp.u32 = PPC_LOAD_U32(ctx.r7.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,80(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + 80, temp.u32);
	// stfs f13,84(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + 84, temp.u32);
	// stfs f12,88(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + 88, temp.u32);
	// lvx128 v63,r0,r10
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// bl 0x82130000
	ctx.lr = 0x826B4FE8;
	sub_82130000(ctx, base);
	// addi r1,r1,112
	ctx.r1.s64 = ctx.r1.s64 + 112;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B4FF8"))) PPC_WEAK_FUNC(sub_826B4FF8);
PPC_FUNC_IMPL(__imp__sub_826B4FF8) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lfs f1,8(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	ctx.f1.f64 = double(temp.f32);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x826b4c30
	sub_826B4C30(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B500C"))) PPC_WEAK_FUNC(sub_826B500C);
PPC_FUNC_IMPL(__imp__sub_826B500C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B5010"))) PPC_WEAK_FUNC(sub_826B5010);
PPC_FUNC_IMPL(__imp__sub_826B5010) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lfs f1,8(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	ctx.f1.f64 = double(temp.f32);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x826b4cd0
	sub_826B4CD0(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B5024"))) PPC_WEAK_FUNC(sub_826B5024);
PPC_FUNC_IMPL(__imp__sub_826B5024) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B5028"))) PPC_WEAK_FUNC(sub_826B5028);
PPC_FUNC_IMPL(__imp__sub_826B5028) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// lfs f1,8(r11)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r11.u32 + 8);
	ctx.f1.f64 = double(temp.f32);
	// lwz r4,4(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r3,0(r11)
	ctx.r3.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// b 0x826b4d70
	sub_826B4D70(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B503C"))) PPC_WEAK_FUNC(sub_826B503C);
PPC_FUNC_IMPL(__imp__sub_826B503C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B5040"))) PPC_WEAK_FUNC(sub_826B5040);
PPC_FUNC_IMPL(__imp__sub_826B5040) {
	PPC_FUNC_PROLOGUE();
	PPCRegister temp{};
	// lwz r11,8(r3)
	ctx.r11.u64 = PPC_LOAD_U32(ctx.r3.u32 + 8);
	// addi r10,r1,-32
	ctx.r10.s64 = ctx.r1.s64 + -32;
	// addi r7,r1,-32
	ctx.r7.s64 = ctx.r1.s64 + -32;
	// lwz r8,0(r3)
	ctx.r8.u64 = PPC_LOAD_U32(ctx.r3.u32 + 0);
	// addi r9,r1,-32
	ctx.r9.s64 = ctx.r1.s64 + -32;
	// addi r6,r1,-16
	ctx.r6.s64 = ctx.r1.s64 + -16;
	// lwz r5,4(r11)
	ctx.r5.u64 = PPC_LOAD_U32(ctx.r11.u32 + 4);
	// lwz r4,0(r11)
	ctx.r4.u64 = PPC_LOAD_U32(ctx.r11.u32 + 0);
	// lfs f0,0(r5)
	ctx.fpscr.disableFlushMode();
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 0);
	ctx.f0.f64 = double(temp.f32);
	// lfs f13,4(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 4);
	ctx.f13.f64 = double(temp.f32);
	// lfs f12,8(r5)
	temp.u32 = PPC_LOAD_U32(ctx.r5.u32 + 8);
	ctx.f12.f64 = double(temp.f32);
	// stfs f0,-32(r1)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r1.u32 + -32, temp.u32);
	// stfs f13,-28(r1)
	temp.f32 = float(ctx.f13.f64);
	PPC_STORE_U32(ctx.r1.u32 + -28, temp.u32);
	// stfs f12,-24(r1)
	temp.f32 = float(ctx.f12.f64);
	PPC_STORE_U32(ctx.r1.u32 + -24, temp.u32);
	// lvx128 v63,r0,r10
	_mm_store_si128((__m128i*)ctx.v63.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r10.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f11,0(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 0);
	ctx.f11.f64 = double(temp.f32);
	// lfs f10,4(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 4);
	ctx.f10.f64 = double(temp.f32);
	// lfs f9,8(r4)
	temp.u32 = PPC_LOAD_U32(ctx.r4.u32 + 8);
	ctx.f9.f64 = double(temp.f32);
	// stfs f11,-32(r1)
	temp.f32 = float(ctx.f11.f64);
	PPC_STORE_U32(ctx.r1.u32 + -32, temp.u32);
	// stfs f10,-28(r1)
	temp.f32 = float(ctx.f10.f64);
	PPC_STORE_U32(ctx.r1.u32 + -28, temp.u32);
	// stfs f9,-24(r1)
	temp.f32 = float(ctx.f9.f64);
	PPC_STORE_U32(ctx.r1.u32 + -24, temp.u32);
	// lvx128 v62,r0,r7
	_mm_store_si128((__m128i*)ctx.v62.u8, _mm_shuffle_epi8(_mm_load_si128((__m128i*)(base + ((ctx.r7.u32) & ~0xF))), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v63,r0,r9
	_mm_store_si128((__m128i*)(base + ((ctx.r9.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v63.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// stvx128 v62,r0,r6
	_mm_store_si128((__m128i*)(base + ((ctx.r6.u32) & ~0xF)), _mm_shuffle_epi8(_mm_load_si128((__m128i*)ctx.v62.u8), _mm_load_si128((__m128i*)VectorMaskL)));
	// lfs f8,-28(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + -28);
	ctx.f8.f64 = double(temp.f32);
	// lfs f3,-12(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + -12);
	ctx.f3.f64 = double(temp.f32);
	// lfs f7,-32(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + -32);
	ctx.f7.f64 = double(temp.f32);
	// lfs f1,-16(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + -16);
	ctx.f1.f64 = double(temp.f32);
	// lfs f6,-8(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	ctx.f6.f64 = double(temp.f32);
	// lfs f5,-24(r1)
	temp.u32 = PPC_LOAD_U32(ctx.r1.u32 + -24);
	ctx.f5.f64 = double(temp.f32);
	// fmuls f4,f6,f5
	ctx.f4.f64 = double(float(ctx.f6.f64 * ctx.f5.f64));
	// fmadds f2,f3,f8,f4
	ctx.f2.f64 = double(float(ctx.f3.f64 * ctx.f8.f64 + ctx.f4.f64));
	// fmadds f0,f1,f7,f2
	ctx.f0.f64 = double(float(ctx.f1.f64 * ctx.f7.f64 + ctx.f2.f64));
	// stfs f0,0(r8)
	temp.f32 = float(ctx.f0.f64);
	PPC_STORE_U32(ctx.r8.u32 + 0, temp.u32);
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B50CC"))) PPC_WEAK_FUNC(sub_826B50CC);
PPC_FUNC_IMPL(__imp__sub_826B50CC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B50D0"))) PPC_WEAK_FUNC(sub_826B50D0);
PPC_FUNC_IMPL(__imp__sub_826B50D0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// stw r12,-8(r1)
	PPC_STORE_U32(ctx.r1.u32 + -8, ctx.r12.u32);
	// stwu r1,-96(r1)
	ea = -96 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// lis r11,-32237
	ctx.r11.s64 = -2112684032;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r11,0
	ctx.r4.s64 = ctx.r11.s64 + 0;
	// addi r3,r10,-20268
	ctx.r3.s64 = ctx.r10.s64 + -20268;
	// bl 0x82554798
	ctx.lr = 0x826B50F0;
	sub_82554798(ctx, base);
	// lis r9,-32149
	ctx.r9.s64 = -2106916864;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r4,r9,19984
	ctx.r4.s64 = ctx.r9.s64 + 19984;
	// addi r3,r8,-20280
	ctx.r3.s64 = ctx.r8.s64 + -20280;
	// bl 0x82554798
	ctx.lr = 0x826B5104;
	sub_82554798(ctx, base);
	// lis r7,-32149
	ctx.r7.s64 = -2106916864;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// addi r4,r7,20048
	ctx.r4.s64 = ctx.r7.s64 + 20048;
	// addi r3,r6,-20292
	ctx.r3.s64 = ctx.r6.s64 + -20292;
	// bl 0x82554798
	ctx.lr = 0x826B5118;
	sub_82554798(ctx, base);
	// lis r5,-32149
	ctx.r5.s64 = -2106916864;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// addi r4,r5,20112
	ctx.r4.s64 = ctx.r5.s64 + 20112;
	// addi r3,r3,-20308
	ctx.r3.s64 = ctx.r3.s64 + -20308;
	// bl 0x82554798
	ctx.lr = 0x826B512C;
	sub_82554798(ctx, base);
	// lis r11,-32149
	ctx.r11.s64 = -2106916864;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r11,20176
	ctx.r4.s64 = ctx.r11.s64 + 20176;
	// addi r3,r10,-20324
	ctx.r3.s64 = ctx.r10.s64 + -20324;
	// bl 0x82554798
	ctx.lr = 0x826B5140;
	sub_82554798(ctx, base);
	// lis r9,-32149
	ctx.r9.s64 = -2106916864;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r4,r9,20240
	ctx.r4.s64 = ctx.r9.s64 + 20240;
	// addi r3,r8,-20340
	ctx.r3.s64 = ctx.r8.s64 + -20340;
	// bl 0x82554798
	ctx.lr = 0x826B5154;
	sub_82554798(ctx, base);
	// lis r7,-32149
	ctx.r7.s64 = -2106916864;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// addi r4,r7,20304
	ctx.r4.s64 = ctx.r7.s64 + 20304;
	// addi r3,r6,-20356
	ctx.r3.s64 = ctx.r6.s64 + -20356;
	// bl 0x82554798
	ctx.lr = 0x826B5168;
	sub_82554798(ctx, base);
	// lis r5,-32149
	ctx.r5.s64 = -2106916864;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// addi r4,r5,20376
	ctx.r4.s64 = ctx.r5.s64 + 20376;
	// addi r3,r3,-20376
	ctx.r3.s64 = ctx.r3.s64 + -20376;
	// bl 0x82554798
	ctx.lr = 0x826B517C;
	sub_82554798(ctx, base);
	// lis r11,-32149
	ctx.r11.s64 = -2106916864;
	// lis r10,-32244
	ctx.r10.s64 = -2113142784;
	// addi r4,r11,20472
	ctx.r4.s64 = ctx.r11.s64 + 20472;
	// addi r3,r10,-20392
	ctx.r3.s64 = ctx.r10.s64 + -20392;
	// bl 0x82554798
	ctx.lr = 0x826B5190;
	sub_82554798(ctx, base);
	// lis r9,-32149
	ctx.r9.s64 = -2106916864;
	// lis r8,-32244
	ctx.r8.s64 = -2113142784;
	// addi r4,r9,20496
	ctx.r4.s64 = ctx.r9.s64 + 20496;
	// addi r3,r8,-20408
	ctx.r3.s64 = ctx.r8.s64 + -20408;
	// bl 0x82554798
	ctx.lr = 0x826B51A4;
	sub_82554798(ctx, base);
	// lis r7,-32149
	ctx.r7.s64 = -2106916864;
	// lis r6,-32244
	ctx.r6.s64 = -2113142784;
	// addi r4,r7,20520
	ctx.r4.s64 = ctx.r7.s64 + 20520;
	// addi r3,r6,-20424
	ctx.r3.s64 = ctx.r6.s64 + -20424;
	// bl 0x82554798
	ctx.lr = 0x826B51B8;
	sub_82554798(ctx, base);
	// lis r5,-32149
	ctx.r5.s64 = -2106916864;
	// lis r3,-32244
	ctx.r3.s64 = -2113142784;
	// addi r4,r5,20544
	ctx.r4.s64 = ctx.r5.s64 + 20544;
	// addi r3,r3,-20436
	ctx.r3.s64 = ctx.r3.s64 + -20436;
	// bl 0x82554798
	ctx.lr = 0x826B51CC;
	sub_82554798(ctx, base);
	// addi r1,r1,96
	ctx.r1.s64 = ctx.r1.s64 + 96;
	// lwz r12,-8(r1)
	ctx.r12.u64 = PPC_LOAD_U32(ctx.r1.u32 + -8);
	// mtlr r12
	ctx.lr = ctx.r12.u64;
	// blr 
	return;
}

__attribute__((alias("__imp__sub_826B51DC"))) PPC_WEAK_FUNC(sub_826B51DC);
PPC_FUNC_IMPL(__imp__sub_826B51DC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B51E0"))) PPC_WEAK_FUNC(sub_826B51E0);
PPC_FUNC_IMPL(__imp__sub_826B51E0) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B51E8;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,96
	ctx.r3.s64 = 96;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// bl 0x82130528
	ctx.lr = 0x826B5204;
	sub_82130528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b5228
	if (ctx.cr6.eq) goto loc_826B5228;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x826b7138
	ctx.lr = 0x826B5220;
	sub_826B7138(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826B5228:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B5234"))) PPC_WEAK_FUNC(sub_826B5234);
PPC_FUNC_IMPL(__imp__sub_826B5234) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B5238"))) PPC_WEAK_FUNC(sub_826B5238);
PPC_FUNC_IMPL(__imp__sub_826B5238) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f8
	ctx.lr = 0x826B5240;
	__savegprlr_28(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,164
	ctx.r3.s64 = 164;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// bl 0x82130528
	ctx.lr = 0x826B525C;
	sub_82130528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b5280
	if (ctx.cr6.eq) goto loc_826B5280;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x826b73c0
	ctx.lr = 0x826B5278;
	sub_826B73C0(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
loc_826B5280:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9248
	__restgprlr_28(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B528C"))) PPC_WEAK_FUNC(sub_826B528C);
PPC_FUNC_IMPL(__imp__sub_826B528C) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

__attribute__((alias("__imp__sub_826B5290"))) PPC_WEAK_FUNC(sub_826B5290);
PPC_FUNC_IMPL(__imp__sub_826B5290) {
	PPC_FUNC_PROLOGUE();
	uint32_t ea{};
	// mflr r12
	ctx.r12.u64 = ctx.lr;
	// bl 0x823d91f4
	ctx.lr = 0x826B5298;
	__savegprlr_27(ctx, base);
	// stwu r1,-128(r1)
	ea = -128 + ctx.r1.u32;
	PPC_STORE_U32(ea, ctx.r1.u32);
	ctx.r1.u32 = ea;
	// mr r31,r3
	ctx.r31.u64 = ctx.r3.u64;
	// li r3,128
	ctx.r3.s64 = 128;
	// mr r30,r4
	ctx.r30.u64 = ctx.r4.u64;
	// mr r29,r5
	ctx.r29.u64 = ctx.r5.u64;
	// mr r28,r6
	ctx.r28.u64 = ctx.r6.u64;
	// mr r27,r7
	ctx.r27.u64 = ctx.r7.u64;
	// bl 0x82130528
	ctx.lr = 0x826B52B8;
	sub_82130528(ctx, base);
	// cmplwi cr6,r3,0
	ctx.cr6.compare<uint32_t>(ctx.r3.u32, 0, ctx.xer);
	// beq cr6,0x826b52e0
	if (ctx.cr6.eq) goto loc_826B52E0;
	// mr r8,r27
	ctx.r8.u64 = ctx.r27.u64;
	// mr r7,r28
	ctx.r7.u64 = ctx.r28.u64;
	// mr r6,r29
	ctx.r6.u64 = ctx.r29.u64;
	// mr r5,r30
	ctx.r5.u64 = ctx.r30.u64;
	// mr r4,r31
	ctx.r4.u64 = ctx.r31.u64;
	// bl 0x826b7520
	ctx.lr = 0x826B52D8;
	sub_826B7520(ctx, base);
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
loc_826B52E0:
	// li r3,0
	ctx.r3.s64 = 0;
	// addi r1,r1,128
	ctx.r1.s64 = ctx.r1.s64 + 128;
	// b 0x823d9244
	__restgprlr_27(ctx, base);
	return;
}

__attribute__((alias("__imp__sub_826B52EC"))) PPC_WEAK_FUNC(sub_826B52EC);
PPC_FUNC_IMPL(__imp__sub_826B52EC) {
	PPC_FUNC_PROLOGUE();
	// .long 0x0
}

